url,title,course_code,instructor(s),fulfills,description,other_prerequisites,overlapping_classes,eligible_programs,course_prerequisites
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-50101-1,mpcs 50101 concepts of programming (summer 2025),mpcs-50101-1,"binkowski, thomas (abinkowski)",immersion programming,"course descriptionin this course students will get an introduction to the field of computer science by learning to program in python. students will write code each week, learning the essentials of how to solve real-world problems in an object-oriented programming language. we will learn about fundamental data structures and algorithms, professional coding practices, algorithm design, automated testing, and the fundamentals of object-oriented programming.in mpcs 50101, we provide an immersive introduction to programming for students who may not have prior experience. we will use the python programming language to explore general-purpose computer programming and algorithmic reasoning, in an object-oriented context.course contentduring this course, students will learn:how to construct algorithms, and express them as computer programs;how to refine and improve programs by an iterative process;the core principles of object-oriented programming;fundamental data structures: arrays, sets, maps, and trees;the basics of computational efficiency and ""big o"" notation.courseworkhomework is worth a total of 50%. there will be 9 weekly assignments. the lowest homework grade will be dropped.the midterm is worth 20% and will cover material through week 5.the final exam is worth 30%. | in this course students will get an introduction to the field of computer science by learning to program in python. students will write code each week, learning the essentials of how to solve real-world problems in an object-oriented programming language. we will learn about fundamental data structures and algorithms, professional coding practices, algorithm design, automated testing, and the fundamentals of object-oriented programming. | in mpcs 50101, we provide an immersive introduction to programming for students who may not have prior experience. we will use the python programming language to explore general-purpose computer programming and algorithmic reasoning, in an object-oriented context.","mpcs students only. note, after completing mpcs 50101 concepts of programming, students are only eligible to take to take mpcs 51036 java or mpcs 51042 python as their mpcs core programming course. if you have a background in programming and are interested in taking a more advanced core programming class in the autumn quarter, you should plan to to take the mpcs programming placement exam for proper course placement.",this class is scheduled at a time that conflicts with these other classes:mpcs 53113-1 -- natural language processingmpcs 58020-1 -- time series analysis and stochastic processesmpcs 51400-1 -- functional programmingmpcs 56535-1 -- introduction to cryptography,masters program in computer sciencemasters program in computer science (new) placement: pass imasters program in computer science (immersion),
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-53001-1,mpcs 53001 databases (summer 2025),mpcs-53001-1,"khaled, ahmed (ahmedkhaled)",core systemselective,"course description:this course starts by introducing the fundamental concepts associated with the design and the work of database systems, including 1) the main steps to design a database, the essential properties for the work of a database, a discussion on data storage, and the different data models utilized in such steps; 2) the entity-relationship (er) model for an initial design to relational databases and the relational model to describe such design with structures; 3) the normalization forms for an optimized design; 4) the relational algebra to design, build, and optimize queries to the database; and 5) the different categories of data and an overview on the other database designs and paradigms with a comparison between sql and nosql databases.the course then focuses on three main types of databases: 1) sql-based, where we learn about relational databases (using mysql rdbms), and the structured query language (sql) to build relational databases and to store, manipulate, and retrieve data; 2) nosql-based, where we learn about document-based databases (using mongodb) and the mongodb query language (mql); and 3) nosql-based, where we learn about graph-based databases (using neo4j) and the graph query language (neo4j's cypher).the students, in the final project, will design and implement a database for a system/scenario of their choice, then develop a user interface (e.g., web-based) using a programming language (e.g., java, python) of their choice that connects and interacts with the created database to execute user interactions through database supported queries.course contents:an introduction:essential definitionsdatabase propertiesdata modelsentity-relationship (er) modelrelational modelnormalization and schema refinementrelational algebra:operators to build queriesquery processing and optimizationstructured query language (sql):essential commands, constraints, and operatorsjoin operator, aggregate functions, and nested queries.interfacing java/python programming languages with sqlcategories of data and properties of big datasql/nosql: other types of databasesmongodb: an example of document-based nosql databasesneo4j: an example of graph-based nosql databasescoursework:assignments [homeworks] (65%)midterm (10%)group-based final project [multi-parts] (25%)class participation [bonus points] (5%)recommended (optional) textbooksdatabase systems: a practical approach to design, implementation, and management author: thomas connelly and carolyn begg, 6th edition, isbn-13: 9780132943260database management systems author: raghu ramakrishnan and johannes gehrke. 3rd edition. | this course starts by introducing the fundamental concepts associated with the design and the work of database systems, including 1) the main steps to design a database, the essential properties for the work of a database, a discussion on data storage, and the different data models utilized in such steps; 2) the entity-relationship (er) model for an initial design to relational databases and the relational model to describe such design with structures; 3) the normalization forms for an optimized design; 4) the relational algebra to design, build, and optimize queries to the database; and 5) the different categories of data and an overview on the other database designs and paradigms with a comparison between sql and nosql databases. | the course then focuses on three main types of databases: 1) sql-based, where we learn about relational databases (using mysql rdbms), and the structured query language (sql) to build relational databases and to store, manipulate, and retrieve data; 2) nosql-based, where we learn about document-based databases (using mongodb) and the mongodb query language (mql); and 3) nosql-based, where we learn about graph-based databases (using neo4j) and the graph query language (neo4j's cypher).","this course can not be taken if you are taking or have already completed mpcs 53020 foundations of database systems. there is significant overlap between the two courses.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.","this class is scheduled at a time that conflicts with these other classes:mpcs 56605-1 -- introduction to blockchain and smart contractsmpcs 50103-1 -- mathematics for computer science: discrete mathematicsmpcs 51238-1 -- design, build, ship",ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-51238-1,"mpcs 51238 design, build, ship (summer 2025)",mpcs-51238-1,"marques, andre (andremar)",elective,"overviewturn visionaries into builders, dreamers into doers—transform ideas into launched products and services with real users in 10 weeks.this hands-on course focuses on iterative design and rapid software development, using ai-assisted tools to accelerate the entire process. students will work individually or in small teams to build, launch, and acquire users for a single project they will work on across the quarter.projects can be civic, entrepreneurial, creative, educational, experimental, or social impact-oriented—all ideas are welcome. students are not required to pursue revenue-generating concepts (but can); the primary focus is on creativity, learning, and meaningful engagement with real users.learning objectivesby the end of this course, students will be able to:apply startup design & software engineering best practicesembrace creativity by boldly experimenting, learning through productive failure, taking informed risks, and recognizing that imagination—not technology—is your primary limitation.launch early with imperfect solutions to speed up learning.“do things that don’t scale.” - paul grahamdesign & prototype user interfacesfollow the design process: explore ideas, learn about user needs, prioritize solutions, converge on actionable outcomes.apply standard user interface design and accessibility principles for web and mobile apps.use component libraries to rapidly design prototypes that can transition easily to code.create designs and interactive prototypes in figma.develop & shipbuild full-stack applications with an emphasis on shipping features quickly, while maintaining quality.learn to integrate systems: authentication, databases, and external apis via modern frameworks.develop responsive and accessible user interfaces.choose technologies that optimize for development speed.use ai to accelerate design, development, & user acquisitiongenerate and iterate on ui using llms trained on component libraries.accelerate development with llm assistance to rapidly implement features and debug issues.acquire users with llm-assisted strategies:b2c: identify community channels and craft engaging contentb2b: design personalized outreach campaigns and create compelling demo materialscourse structureweekly format:technical + product workshop & discussionintroduce new technologies for software development, best practices for product scope management, ai usage, and user acquisition strategies.hands-on development time & one-on-one supportstudents build, iterate, and troubleshoot applications with direct guidance from instructors and tas. tasks are prioritized, blockers are addressed, and clear next steps are established for each project.progress share-outseach student or team shares updates, reflects on user feedback, and discusses next steps. constructive peer feedback is encouraged.course scheduleiteration 1📐 week 1: prototyping (design)introduction to figma, web and mobile app design principles.draft vision for week 10: product goals, tech stack, usage goals.introduce scope management principles.begin prototype of smallest launchable solution.user acquisition plan (b2b outreach + scheduling demos, b2c creating + publishing engaging content)10%-15% of each week dedicated to this🏗️ week 2 - 4: implement core features (build)define implementation roadmap with a focus on minimal, high-impact features.introduction to ai-based software development tools.overview of recommended web and mobile platforms.user acquisition strategies and case studies.continue reaching out to users.📦 week 5: finish stable version (ship)start testing an initial project prototype with users; run short usability interviews.evaluate the product using defined rubrics: code quality, accessibility checks, user feedback rating.prioritize backlog of features for v2; continue iteration.reflect on ai usage.iterations 2 - 6week 6 - 9: weekly sprints (design, build, ship)each week, each student or team will prioritize next steps for weekly deployments.📐design:new features prototyped weekly and critiqued during structured design reviews.🏗️build:new features implemented weekly, with scope check-ins.📦ship:weekly deployment encouraged to gather rapid feedback.user outreach and acquisition efforts executed and refined weekly.week 10:include baseline usage data (installs, demos, retention, referrals, feedback) comparison to vision on week 1, how feedback informed product evolution.discuss lessons learned about project scope management, ai usage, and user-centric iteration.prerequisitesrequiredexperience in at least one programming language, familiarity with git, and terminal usage.recommendedyou’ve built a simple website or app, or completed a course covering basic software engineering principles.not requiredprior design experience.entrepreneurial experience and/or ambition.ai-assisted design or software development experience.technologies & toolsthis class is designed to support student projects regardless of tech stack and external apis used, however the recommended stack includes:frontend: next.js (web) or react native (mobile)ui: tailwind css (web) or nativewind (mobile)component library: shadcn (web)database: supabase, supabase edge functionsauth: clerkdeployment: vercel (web), ios app store, google play storeexternal apis: openai api, anthropic api, etc., project-specific apis as needed.model context protocol: integrating ai with different systems to speed up development.these tools are recommended due to their modern apis and low implementation overhead. students using alternative tech stacks are encouraged to do so but should be comfortable iterating independently, with the instructor offering general support for planning and problem-solving.ai-based design and development tools may include:cursor, v0, chatgpt plus, claude, gemini, midjourney, and others to accelerate development and design.students will need a subscription to multiple tools for the duration of this course.if publishing an app in an app store, students may need to pay a registration fee to google or apple. | turn visionaries into builders, dreamers into doers—transform ideas into launched products and services with real users in 10 weeks. | this hands-on course focuses on iterative design and rapid software development, using ai-assisted tools to accelerate the entire process. students will work individually or in small teams to build, launch, and acquire users for a single project they will work on across the quarter.","required: experience in at least one programming language, familiarity with git, and terminal usage.recommended: you’ve built a simple website or app, or completed a course covering basic software engineering principles.not required: prior design experience; entrepreneurial experience and/or ambition; ai-assisted design or software development experience.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that conflicts with these other classes:mpcs 56605-1 -- introduction to blockchain and smart contractsmpcs 50103-1 -- mathematics for computer science: discrete mathematicsmpcs 53001-1 -- databases,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)masters program in computer scienceundergraduate - cs minorundergraduate - cs major,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-51260-1,mpcs 51260 human-computer interaction (summer 2025),mpcs-51260-1,"wozniak, katie (fxx6927)",specialization - application development (app-2)elective,"instructor: kathryn wozniak (she/her/hers)email: k.wozniak@uchicago.eduoffice hours: before/after class and by appointment (please email me to schedule)prerequisites: core programmingcourse website: canvasdescriptionthis course explores the cognitive psychology and physiology behind humans’ interactions with their environment and how this translates to “good design” of computer-based systems, interfaces, and machines. emphasis is placed on the value of intentionally observing and analyzing the reciprocal relationship between humans and the design of systems in various contexts from a designer or engineer’s perspective. from a practical standpoint, the course addresses the role human-computer interaction (hci) plays in enhancing the day-to-day human experience and the value of a product to society, while increasing the bottom line for stakeholders. topics include perception, memory, attention, mental models, accessibility, user/interaction research methods, interface design principles, and design communication strategies.learning objectivesat the end of this class you will be able to:understand aspects of cognitive psychology and human factors engineering that apply to human-computer interaction (hci)identify components and principles of “good” (and bad) interaction designcritically analyze and evaluate human-computer interaction through empirical research methodsdesign mockups, prototypes, or revisions of interactive systems by applying hci principlesdevelop strategies for communicating design, usability, and interactivitycourse componentsclass attendanceweekly attendance is required. failure to attend class on a regular basis could result in a failing grade in the course. if time of the class sessions will not work for you to attend, you should not take this class. if you miss more than two class sessions during the quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.participation: discussion, peer review, hot topicssharing ideas, insights, and questions in response to the readings, lectures, and demos throughout the course is welcomed and highly encouraged in class and in the discussion channel. additionally, you are required to find and read at least two articles beyond the course readings on an hci “hot topic” and share a summary and reflection on those articles by the end of the course. you will also be expected to share your work and provideconstructive feedbackon others’ work throughout the course through an informal peer review process guided by the professor.lectures & demoslectures and demos will prepare you for assignments each week. lectures will cover relevant topics as listed in the schedule and will include interactive and conversational activities. demos will provide hands-on demonstrations in class on how to use design tools.quizzesweekly quizzes, aka “knowledge checks,” will help you to check your comprehension of theories, principles, and applications covered in the readings and lectures.projectfour assignments throughout the course (interaction analysis/heuristic review and report, website/system/program/app mockup and prototype, design evaluation and report, re/design and demo) build up to one culminating final report and presentation, which will demonstrate your ability to apply the course principles and topics to an authentic human-computer interaction scenario of your choice. you will identify and work with a team of 2-4 classmates for the project (all group members must collaborate on all assignments); one team member should notify the professor via email of your team’s members and team name by week 2. everyone will receive feedback from the professor and fellow students on each assignment along the way so that they may improve their deliverables for the final report and presentation.assessmentgrade25% class participation & peer review (exit tickets)10% quizzes65% project assignments (10% analysis, 10% mockup/prototype, 10% evaluation, 10% redesign, 25% final report and presentation)late assignmentsyou can submit up to 2 late quizzes and 1 late assignment within 3 days (72 hours) of the original deadline without penalty. otherwise, the penalty is 5 points per day late. requests for longer extensions should be submitted to the professor within 24 hrs of the original deadline with an explanation and proposed deadline for the late work. failure to submit assignments and quizzes on time could result in a failing grade in the course. if you miss more than three deadlines during the quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.academic honestyhttps://studentmanual.uchicago.edu/academic-policies/academic-honesty-plagiarism/toolswe will discuss a variety of tools for creating mockups and prototypes and analyzing user interactions. some are free for educational use and some have a free trial. you are not required to purchase any of these nor will we go into great depth on the features of each. however, you will be required to use at least one of these tools for the course project, so exploration and self-directed learning is encouraged. additional resources and links to online tutorials will be provided on canvas.mockup and prototyping tools: balsamiq, sketch, figma, invisionuser interaction/testing tools: morae, userzoom, tobii, gazereadingsrequired:boehm-davis, d. a., durso, f. t., & lee, j. d. (2015).apa handbook of human systems integration. washington, dc: american psychological association.goodman, e. & kuniavsky, m. (2012). observing the user experience : a practitioner’s guide to user research: vol. 2nd ed. morgan kaufmann.johnson, j. (2020).designing with the mind in mind: simple guide to understanding user interface design guidelines(third edition.). cambridge, ma: morgan kaufmann.additional readings will be assigned weekly and will either be available as links or pdfs on canvas. readings will support topics covered in class.optional:norman, d. a. (2013).the design of everyday things(revised and expanded edition.). new york, new york: basic books.course content & scheduleslight modifications to schedule and assignments may occur as the quarter progresses.week 1: introduction to hcilecture: what makes a chair good for sitting? humans, environments, interactionsclass activities: introductions, personal audit of interactions against universal design principlesdue end of week 1:week 1 readingsquiz 1form teams of 2-4 for course projectweek 2: hci research methods part 1lecture: methods for observing hci in the wildclass activities: demo - interaction observation, usability heuristic reviewdue end of week 2:week 2 readingsquiz 2confirm project team member names and team name on canvasbegin work on assignment 1week 3: cognition overviewlecture: the magical flawed brain meets the beautiful flawed interfaceclass activities: demo - usability heuristic reviewdue end of week 3:week 3 readingsquiz 3submit assignment 1: heuristic evaluation report or focus group reportweek 4: perception and accessibilitylecture: sense and sensibility: engineering experiences for the 5 sensesclass activities: peer review assignment 1, case studies – siemens vr, disney worlddue end of week 4:week 4 readingsquiz 4submit assignment 2: design mockup sketchweek 5: memory and attentionlecture: “squirrel!” - distractions, addictions, and our mental modelsclass activities: case study – social media of your choice; demo – mockup and prototype toolsdue end of week 5:week 5 readingsquiz 5submit assignment 3: prototype draftweek 6: hci research methods: part 2lecture: usability testing: from the wild to the labclass activities: peer review assignment 2; demo of usability testing tools/processdue end of week 6:week 6 readingsquiz 6submit assignment 4: complete prototype + brief reportweek 7: communicating with stakeholders about hci, part 1lecture: tufte, personas, and why we like storiesclass activities: teamwork/lab timedue end of week 8:week 8 readingsquiz 8begin work on assignment 5: evaluation (user testing) + reportweek 8: communicating with stakeholders about hci, part 2lecture: ted talks, pecha kucha, and crucial conversationsclass activities: peer review assignment 3due end of week 8:week 8 readingsquiz 8submit assignment 5: evaluation (user testing) + reportweek 9: errors and error recovery, bringing it togetherlecture: my recovery journey with recommender systems since 2001class activities: case studies – netflix, stitch fixinformal presentations on course projectdue end of week 9:week 9 readingsquiz 9submit assignment 6: final project prototype, report, and presentationhot topics in hci, acm sigchi (discussion) | instructor: kathryn wozniak (she/her/hers)email: k.wozniak@uchicago.eduoffice hours: before/after class and by appointment (please email me to schedule)prerequisites: core programmingcourse website: canvas | this course explores the cognitive psychology and physiology behind humans’ interactions with their environment and how this translates to “good design” of computer-based systems, interfaces, and machines. emphasis is placed on the value of intentionally observing and analyzing the reciprocal relationship between humans and the design of systems in various contexts from a designer or engineer’s perspective. from a practical standpoint, the course addresses the role human-computer interaction (hci) plays in enhancing the day-to-day human experience and the value of a product to society, while increasing the bottom line for stakeholders. topics include perception, memory, attention, mental models, accessibility, user/interaction research methods, interface design principles, and design communication strategies.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that conflicts with these other classes:mpcs 51132-1 -- full stack software engineeringmpcs 56550-1 -- introduction to devops,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-52011-1,mpcs 52011 introduction to computer systems (summer 2025),mpcs-52011-1,"billingsley, marty (mbilling)",core systemselective,"course descriptionthis course is all about constructing your own knowledge of computer systems by building a general-purpose computer system from the ground up. the objective is to integrate key ideas from algorithms, computer architecture, operating systems, compilers, and software engineering into one unified framework. along the way, we'll explore ideas and techniques used in the design of modern hardware and software systems, and discuss major trade-offs and future trends. throughout this journey, you'll gain lots of cross-section views of the field of computer science, from the bare-bone details of switching circuits to the high-level abstraction of object-based software design. by the end of the course, you will have written a computer game in an object-oriented programming language; compiled that program into machine language using the compiler, the virtual machine language translator, and the assembler that you wrote; and run your program on (virtual) hardware that you designed.course contents and courseworkweek 1 (chapters 1-2 of the text)topics: boolean logic, combinatorical chip design, karnaugh maps, hardware description languagecoursework: use a hardware description language to build a basic chip set.week 2 (chapter 3 of the text)topics: sequential chip design, binary arithmeticcoursework: use a hardware description language to build a sequential chip set and the alu, cpu, memory for a computer.week 3 (chapters 4-5 of the text)topics: machine language, computer architecturecoursework: write and run programs in assembly language; use a hardware description language to build a working computer.week 4 (chapter 6 of the text)topics: assemblerscoursework: design, implement, test, and debug an assembler, using a programming language of your choice.week 5 (chapter 7 of the text)topics: virtual machine paradigm, stack arithmeticcoursework: test 1 (during class time). design, implement, test, and debug a virtual machine translator for stack arithmetic and memory access commands, using a programming language of your choice.week 6 (chapter 8 of the text)topics: virtual machine language program controlcoursework: add function definition, and function call and return commands to the virtual machine translator.week 7 (chapter 9 of the text) (chapter 10 of the text)topics: overview of high-level object-oriented programming languagescoursework: write a small sample program in the high-level object-oriented programming language used in this course.week 8 (chapter 10 of the text)topics: compilers, syntax analysiscoursework: design, implement, test, and debug a tokenizer for an object-oriented language compiler, using a programming language of your choice.week 9 (chapters 11-12 of the text)topics: compilers, code generation, operating systemscoursework: design, implement, test, and debug a code generator for an object-oriented language compiler, using a programming language of your choice.week 10test 2textbookthe elements of computing systems, second edition: building a modern computer from first principlesby nisan and schocken | this course is all about constructing your own knowledge of computer systems by building a general-purpose computer system from the ground up. the objective is to integrate key ideas from algorithms, computer architecture, operating systems, compilers, and software engineering into one unified framework. along the way, we'll explore ideas and techniques used in the design of modern hardware and software systems, and discuss major trade-offs and future trends. throughout this journey, you'll gain lots of cross-section views of the field of computer science, from the bare-bone details of switching circuits to the high-level abstraction of object-based software design. by the end of the course, you will have written a computer game in an object-oriented programming language; compiled that program into machine language using the compiler, the virtual machine language translator, and the assembler that you wrote; and run your program on (virtual) hardware that you designed. | course contents and courseworkweek 1 (chapters 1-2 of the text)","this is mostly a hands-on course, evolving around building a series of hardware and software modules. you can use any programming language you like to implement the software modules (popular choices are c, c++, java, and python), but you must be comfortable designing, writing, and debugging programs on your own; the guidance given in this course centers around what to program rather than how to program it.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that conflicts with these other classes:mpcs 52060-1 -- parallel programmingmpcs 51200-1 -- introduction to software engineering,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-56550-1,mpcs 56550 introduction to devops (summer 2025),mpcs-56550-1,"almhana, rafi (ralmhana)",elective,"this course provides an in-depth introduction to devops principles, practices, and tools for modern software development and operations. students will learn how to integrate development (dev) and operations (ops) to enhance software delivery, automation, and scalability. the course covers continuous integration (ci), continuous deployment (cd), infrastructure as code (iac), monitoring, cloud-native applications, and security. by the end of this course, students will have hands-on experience with tools like docker, kubernetes, terraform, jenkins, github actions, prometheus, and aws/azure/gcp.learning objectivesby the end of this course, students will be able to:understand the core principles of devops and its impact on software development and operations.implement version control and collaboration workflows using git and github/gitlab.create and manage ci/cd pipelines with jenkins, github actions, or gitlab ci.use containerization technologies like docker and container orchestration with kubernetes.apply infrastructure as code (iac) using terraform or ansible.monitor applications and infrastructure using prometheus, grafana, and elk stack.implement cloud-based devops solutions using aws, azure, or gcp.enhance security practices within devops, including secrets management, vulnerability scanning, and compliance.understand site reliability engineering (sre) principles and incident response best practices.implement a real-world devops project integrating multiple devops tools and concepts.course outlinemodule 1: introduction to devops & culturewhat is devops?devops vs. traditional itdevops lifecycledevops principlesmodule 2: version control & git workflowsgit basics and branching strategiesgithub/gitlab workflows (forking, branching, merging, pull requests)managing repositories with gitmodule 3: continuous integration & continuous deployment (ci/cd)what is ci/cd?setting up jenkins, github actions, gitlab ci/cdbuilding ci/cd pipelinesdeployment strategiesmodule 4: containerization & orchestrationintroduction to docker and containerizationbuilding and managing docker containersintroduction to kuberneteskubernetes architecture & deployment strategiesmodule 5: infrastructure as code (iac)what is iac and why it matters?introduction to terraform, ansible, and cloudformationprovisioning infrastructure with terraformmanaging configurations with ansiblemodule 6: cloud computing & devopsdevops in the cloud (aws, azure, gcp)cloud-native devops toolsserverless computing basicsmodule 7: monitoring & loggingobservability and logging in devopsintroduction to prometheus, grafana, elk stack (elasticsearch, logstash, kibana)setting up monitoring and alertsmodule 8: security & compliance in devopsdevsecops and security best practicessecrets management (vault, aws secrets manager)vulnerability scanning (trivy, sonarqube)compliance and auditing in devopsmodule 9: site reliability engineering (sre) & incident managementintroduction to sre principleserror budgets and slis/slos/slasincident response and on-call strategieschaos engineering basicsgrading & assessmentassignments40%topic presentation10%final project40%participation & engagement10%tools & technologiesversion control: git, github/gitlabci/cd: jenkins, github actions, gitlab ci/cdcontainerization: docker, kubernetesinfrastructure as code (iac): terraform, ansiblecloud services: aws, azure, gcpmonitoring & logging: prometheus, grafana, elk stacksecurity: hashicorp vault, trivy, sonarqube | this course provides an in-depth introduction to devops principles, practices, and tools for modern software development and operations. students will learn how to integrate development (dev) and operations (ops) to enhance software delivery, automation, and scalability. the course covers continuous integration (ci), continuous deployment (cd), infrastructure as code (iac), monitoring, cloud-native applications, and security. by the end of this course, students will have hands-on experience with tools like docker, kubernetes, terraform, jenkins, github actions, prometheus, and aws/azure/gcp. | by the end of this course, students will be able to:","• basic knowledge of linux/unix systems• familiarity with git version control• knowledge of scripting languages (python, bash, etc.)this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that conflicts with these other classes:mpcs 51132-1 -- full stack software engineeringmpcs 51260-1 -- human-computer interaction,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)masters program in computer scienceundergraduate - cs minorundergraduate - cs major,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-50103-1,mpcs 50103 mathematics for computer science: discrete mathematics (summer 2025),mpcs-50103-1,"brady, geraldine (gb52)",immersion math,"course overview [watch video]course descriptionthis course is an introduction to ideas and techniques from discrete mathematics that are used in computer science. it emphasizes mathematical proof and problem solving, employed on a variety of useful and interesting examples in number theory, counting, discrete probability, and basic graph theory.on completion of the course, students will be practiced in using mathematical concepts and techniques to solve problems, and in expressing mathematical notions precisely. they will be able to use ideas and techniques from discrete mathematics in subsequent courses in computer science, in particular courses in the design and analysis of algorithms, networks, numerical methods, software engineering, data analysis, and machine learning.course contentstopics covered include: methods of proof, including mathematical induction; number theory, incuding divisibility, prime numbers, and modular arithmetic; counting, including permutations, combinations, binomial theorem, pigeonhole principle, inclusion/exclusion principle, and recurrences; discrete probability, including conditional probability, independence, bayes's rule, random variables, expected value, variance, markov and chebyshev bounds; graphs, including graph isomorphism, graph connectivity; trees; euler and hamiltonian paths and circuits, graph coloring, and matching.requirementsstudents are responsible for all material presented in lectures and on homework assignments.class sessions: course material will be presented in lecture format at the class meetings.homework: all students are required to submit homework weekly. weekly homework assignments are assigned after class and due the day before the next class. students are required to submit homework electronically.exams: there will be a midterm exam and a final exam. there will be no make-up exams.course gradethe course grade is based on homework and exams.homework: 10%midterm examination: 30%final examination: 60%textbookdiscrete mathematics and its applications (7th ed.) (mcgraw-hill) by kenneth rosen (isbn 978-0073383905)prerequisitesprecalculus, especially logarithms and exponentials, is a prerequisite; calculus is recommended but not required. high-school level familiarity with sets, functions, relations, and mathematical notation will be assumed. | course descriptionthis course is an introduction to ideas and techniques from discrete mathematics that are used in computer science. it emphasizes mathematical proof and problem solving, employed on a variety of useful and interesting examples in number theory, counting, discrete probability, and basic graph theory. | on completion of the course, students will be practiced in using mathematical concepts and techniques to solve problems, and in expressing mathematical notions precisely. they will be able to use ideas and techniques from discrete mathematics in subsequent courses in computer science, in particular courses in the design and analysis of algorithms, networks, numerical methods, software engineering, data analysis, and machine learning.",,"this class is scheduled at a time that conflicts with these other classes:mpcs 56605-1 -- introduction to blockchain and smart contractsmpcs 53001-1 -- databasesmpcs 51238-1 -- design, build, ship",ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (new) placement: pass imasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced)masters program in computer science (immersion),mpcs students:mpcs 50101 concepts of programming (completed or concurrently taking) or a pass on mpcs programming placement exam i.
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-53113-1,mpcs 53113 natural language processing (summer 2025),mpcs-53113-1,"chaudhary, amitabh (amitabh)",electivespecialization - data analytics (da-2),"natural language processing (nlp) is the application of computational techniques, particularly from machine learning, to analyze and synthesize human language. the recent explosion in the amount of available text data has made natural language processing invaluable for businesses, social sciences, and even natural sciences.in this course we study the fundamentals of modern natural language processing, emphasizing models based on deep learning. these include language models, word embeddings, recurrent neural networks (simple rnns, lstms), context-free grammars and syntactic parsing, convolutional neural networks (cnns), and attention-based models such as the transformer, bert, and the gpt models.we use python and the deep learning framework pytorch to build models from scratch and apply them to tasks such as machine translation. we also usethe library of pre-trained models huggingface to build even more sophisticated models that can, for example, automatically generate summaries of articles.a significant component is the course project in which students build and train models to solve a real-world problem of their choice.a tentative list of topics follows.language modelsword embeddingsrecurrent neural networks (rnns), lstmsconvolutional neural networks (cnns) for nlpconditioned generation, sequence to sequence modelssytactic parsing, context free grammarsattention-based models, the transformeradvanced models: bert, gpt 1-4, google palm.coursework and evaluationhomework assignments: there are about three assignments,designed to reinforce material and test a deeper understanding of the concepts and algorithms through theoretical questions, program implementation, and analysis of empirical results. tentatively worth 40% of the grade.midterm examination: tentatively worth 20% of the grade.course project: chosen by the student, and entatively worth 40% of the grade.textbookneural network methods for natural language processing by yoav goldberg (https://doi.org/10.2200/s00762ed1v01y201703hlt037)research papers | a grade of b+ or better in the following courses:• mpcs 50103 math for computer science (or placement exam waiver)• mpcs 51042 python programminga grade of b or better in mpcs 55001 algorithmsa grade of b or better in one of the following courses:• mpcs 53110 foundations of computational data analysis• mpcs 53120 applied data analysismpcs 53111 machine learning (recommended; see below).equivalent courses or experience will be accepted with instructor permission. a prior course in machine learning would be useful but is not necessary; if you haven't taken any please contact the instructor with your prior courses and experience.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/ | a grade of b+ or better in the following courses:• mpcs 50103 math for computer science (or placement exam waiver)• mpcs 51042 python programming",programming experience in python.this course requires competency in unix and linux. please plan to attend the mpcs unix bootcamp (https://masters.cs.uchicago.edu/page/mpcs-unix-bootcamp) and/or review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.,this class is scheduled at a time that conflicts with these other classes:mpcs 50101-1 -- concepts of programmingmpcs 51400-1 -- functional programmingmpcs 56535-1 -- introduction to cryptography,ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,a grade of b+ or better in the following courses:• mpcs 50103 math for computer science (or placement exam waiver)• mpcs 51042 python programminga grade of b or better in mpcs 55001 algorithmsa grade of b or better in one of the following courses:• mpcs 53110 foundations of computational data analysis• mpcs 53120 applied data analysismpcs 53111 machine learning (recommended; see below).equivalent courses or experience will be accepted with instructor permission. a prior course in machine learning would be useful but is not necessary; if you haven't taken any please contact the instructor with your prior courses and experience.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-52060-1,mpcs 52060 parallel programming (summer 2025),mpcs-52060-1,"hückelheim, jan (jhueckelheim)",core systemselectivespecialization - high performance computing (hpc-2),"course descriptionparallel computing is found everywhere in modern computing. multi-core cpus and gpus, supercomputers, and even mobile devices such as smartphones all provide ways to efficiently utilize parallel processing on these architectures and devices. the goal of this course is to provide an introduction to the foundations of parallel programming and to consider the performance gains and trade-offs involved in implementing and designing parallel computing systems. specifically, this course will place an emphasis on concepts related to parallel programming on multicore processors.course contentstopics that will be explored in the course will include (but not limited to) the following:processes and threadsshared memoryhardware mechanisms for parallel computingsynchronization and communication for parallel systemsperformance optimizationsparallel data structuresmemory consistency and hierarchies for parallel computingpatterns of parallel programmingparallel programming on gpusadditional topics dependent on student request and timecourseworkthe course will include weekly homework, two exams, and projects. the weekly assignments will contain practice problems to help enforce the concepts learned during a lecture. the projects provide the opportunity to apply the skills you learned to develop systems that can benefit from parallelization. potential project domains could include: ai and machine learning, computer graphics, cryptocurrency technologies, scientific visualization, etc.course textbook(s)this course will not have a required textbook. along with the lecture notes, students may find the following references helpful in undersntading the course material:the art of multiprocessor programmingby maurice herlihy and nir shavitadditional readings/references will be provided when necessary. | mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/ | mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.","this is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that conflicts with these other classes:mpcs 52011-1 -- introduction to computer systemsmpcs 51200-1 -- introduction to software engineering,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/summer/courses/mpcs-58020-1,mpcs 58020 time series analysis and stochastic processes (summer 2025),mpcs-58020-1,"siegel, andrew (siegela)",electivespecialization - data analytics (da-2)specialization - high performance computing (hpc-2),"stochastic processes are driven by random events. they can be used to model phenomena in a broad range of disciplines, including science/engineering (e.g. computational physics, chemistry, and biology), busi- ness/finance (e.g. investment models and operations research), and computer systems (e.g. client/server workloads and resilience modeling). in many cases relatively simple stochastic simulations can provide estimates for problems that are difficult or impossible to model with closed-form equations.in this class we focus on the rudimentary ideas and techniques that underlie stochastic time series analysis, discrete events modeling, and monte carlo simulations. course lectures will focus on the basic principles of probability theory, their efficient implementation on modern computers, and examples of their application to real world problems. upon completion of the course, students should have an adequate background to quickly learn in depth specific monte carlo approaches in their chosen field of interest.recommended textbookssheldon m. ross. simulation, 5th edition. elsevier, 2013.robert h. shumway, david s. stoffer. time series analysis and its applications, ez - third edi- tiion. free texts in statistics, 2015. available for free at http://www.stat.pitt.edu/stoffer/ tsa3/syllabusoverivew of fundamentals of probabilitycdfs, pdfs, central limit theorem (ross chapter 2).numerical sampling from discrete pdfs (ross chapter 4) and continuous pdfs (ross chapter 5).time series models (shumway chapter 1.3, chapter 3).principal component analysis and singular value decomposition.spectral analysis including fourier transforms (shumway chapter 4).issues in random number generationsimulating discrete events (ross chapter 7).monte carlo integration (ross chapter 3.2, chapters 8.1 - 8.2) with variance reduction (ross chapter 9).markov chain monte carlo: hastings-metropolis, gibbs sampler (ross chapter 10).coursework4 homework assignments (50%), 6 short quizzes (20%), two exams (30%).prequisitescourses: required: immersion programming or waiver. recommended: immersion math, basic back- ground in probability.langagues: matlab will be used for course examples. matlab, julia, idl, or python are recommended for assignments. any language is acceptable as long as you do not use high-level libraries to replace programming exercises. | in this class we focus on the rudimentary ideas and techniques that underlie stochastic time series analysis, discrete events modeling, and monte carlo simulations. course lectures will focus on the basic principles of probability theory, their efficient implementation on modern computers, and examples of their application to real world problems. upon completion of the course, students should have an adequate background to quickly learn in depth specific monte carlo approaches in their chosen field of interest.recommended textbooks | mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.mpcs 50103 math for computer science: discrete mathematics or cmsc 271 discrete mathematics or a passing score on the mpcs math placement exam.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that conflicts with these other classes:mpcs 53113-1 -- natural language processingmpcs 50101-1 -- concepts of programmingmpcs 51400-1 -- functional programmingmpcs 56535-1 -- introduction to cryptography,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer scienceundergraduate - cs minorundergraduate - cs major,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.mpcs 50103 math for computer science: discrete mathematics or cmsc 271 discrete mathematics or a passing score on the mpcs math placement exam.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-55005-1,mpcs 55005 advanced algorithms (spring 2026),mpcs-55005-1,"brady, geraldine (gb52)",core theoryelective,"advanced algorithms is a course on the design and analysis ofefficient algorithms on a series of challenging topics. this course presents many interesting and relevant algorithms and data structures and gives students the tools to recognize and rigorously solve algorithmic problems often encountered in industry and engineering.topics include:intractability. theory of np completeness. problems and reductions: hamilton cycle to traveling salesman, vertex cover to independent set to clique, sat to 3sat, 3sat to vertex cover, circuit-sat to sat.approximation algorithms. metric k-center problem, metric traveling salesman problem. set cover problem.online and streaming algorithms. online counting algorithms. potential functions. heavy-hitters algorithms. sketching algorithms. multiplicative weights algorithm.advanced data structures. skip lists, segment trees, tries, advanced hashing.string algorithms. kmp algorithm. rabin’s rolling hash fingerprinting algorithm. aho-corasick algorithm.advanced linear programming. lp duality. integer linear programming and rounding.advanced dynamic programming. knuth optimization and divide-and-conquer optimization.computational geometry. convex hull algorithms. line-segment intersection algorithm. voronoi diagrams and delaunay triangulations.optimization.engaging weekly homework assignments involve designing new algorithms in pseudocode and solving algorithmic programming problems in python. course goal is to prepare students with skills necessary to tackle algorithmic problems they are likely to encounter in industry and engineering. | advanced algorithms is a course on the design and analysis ofefficient algorithms on a series of challenging topics. this course presents many interesting and relevant algorithms and data structures and gives students the tools to recognize and rigorously solve algorithmic problems often encountered in industry and engineering.topics include: | engaging weekly homework assignments involve designing new algorithms in pseudocode and solving algorithmic programming problems in python. course goal is to prepare students with skills necessary to tackle algorithmic problems they are likely to encounter in industry and engineering.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,b+ or better in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms or instructor consent.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51045-1,mpcs 51045 advanced c++ (spring 2026),mpcs-51045-1,"spertus, michael (spertus)",electivespecialization - software engineering (se-2),"course descriptionin this continuation of the winter's c++ course, we go beyond the basics to cover the powerful and surprising techniques that make c++ a different language in the hands of an expert. if you use c++ in your daily life, you and your team will see striking benefits from understanding and using c++ at a deeper level. while the course is focused on c++, it can also be considered in many ways a course on advanced programming techniques that can be reused in any programming language to build enterprise-scale software as we build up both conceptual and practical models of advanced programming techniques.one of our main goals will be to understand holistically how the broad feature set of c++ fits together to enable powerful programming paradigms. one example we will build over the course of the quarter is how to use metaprogramming techniques to implement software engineering ""design patterns"" with the aim of making a metaprogram that simply ""executes your design documents."" while this can't be done completely, c++ usefully comes way closer than one would ever guess, and we will be forced to hone our skills and tools to the utmost to get there.course contentsas a seminar style course, many of the topics are influenced by the goals of the students, so please let me know if there is topic of interest to you. typical topics have included:topics include:•advanced concurrency techniques like futures and promises with best practices to avoid the myriad pitfalls of multi-threaded programming.•advanced template techniques like sfinae, crtp, and variadics, which we will illustrate by implementing full featured classes like tuples.•using metaprograms to implement seamlessly embedded domain specific languages and design patterns.•learning how to read and leverage the c++ standard, so you can quickly locate definitive answers to any language questions.•a tour of standard and popular libraries so you don’t have to reinvent the wheel.•creating your own stl-style iterators, so your types work seamlessly with stl algorithms•customizing i/o streams.•future directions of c++ to help you produce forward looking programs.courseworkweekly homework, and student chooses between a final exam and a final projectteaching philosophyi try to focus on teaching ""what you can't get from a textbook."" when i teach a c++ feature, i start with real-life use cases that can't be satisfactorily addressed without it, recap the discussions in the c++ committee during the design of the feature, including criticisms and alternative solutions, until we understand the actual outcome. what started out looking like an obscure feature full of mysterious technicalities and exceptions ends up being natural and ""just what you expect.""about the instructor""as the founder of boost (www.boost.org), the first and best known c++ library repository, and also as a long-time voting member of the c++ standards committee, i have come into contact with many of the notables of the c++ world. mike spertus is right up there with the best of them."" -- beman dawesmichael spertus is a distinguished engineer at symantec, where he serves as the chief architect for symantec's information security service. he is also a member of the c++ standards committee, where he has authored over 30 standard proposals. he has been involved in c/c++ languages since the 1980s, when he helped write one of the first commercial ms-dos c compiler for the ibm pc-at. | in this continuation of the winter's c++ course, we go beyond the basics to cover the powerful and surprising techniques that make c++ a different language in the hands of an expert. if you use c++ in your daily life, you and your team will see striking benefits from understanding and using c++ at a deeper level. while the course is focused on c++, it can also be considered in many ways a course on advanced programming techniques that can be reused in any programming language to build enterprise-scale software as we build up both conceptual and practical models of advanced programming techniques. | one of our main goals will be to understand holistically how the broad feature set of c++ fits together to enable powerful programming paradigms. one example we will build over the course of the quarter is how to use metaprogramming techniques to implement software engineering ""design patterns"" with the aim of making a metaprogram that simply ""executes your design documents."" while this can't be done completely, c++ usefully comes way closer than one would ever guess, and we will be forced to hone our skills and tools to the utmost to get there.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,mpcs 51044 c/c++ for advanced programmers or instructor consent.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52018-1,mpcs 52018 advanced computer architecture (spring 2026),mpcs-52018-1,"siegel, andrew (siegela)",core systemselectivespecialization - high performance computing (hpc-2),"this course focuses on computer achitecture from the perspective of ahigh performance programmer. it is aimed at students looking todemistify the process of coding, profiling, and optimizing algorithms,with a particular focus on systems geared toward performance intensivecomputing: clusters, multicore cpus, gpus, risc-v, arm, tpus, etc. thefundamental principles of computer architecture will be covered indepth, but an equal emphasis will be given to hands-on experience inlearning how measure, tune, and report performance on common hpcresources. while a key outcome of the course is the ability to writemore efficient code, the more enduring goal is to educate students to""see their code"" from the hardware's perspective, broadening anddeepening their understanding of programming with potential benefitsacross a broad range of disciplines.topics include:-history of hpc architectures-efficient programming for cache-based serial processors-mimd and cache coherency-efficient programming for multicore processors-simd and vector instructions-gpu memory and cores-tpus, matrix engines, systolic arrays-arm-risc-vstudents who have taken mpcs 52010 computer archtiecture can not take this course. | this course focuses on computer achitecture from the perspective of ahigh performance programmer. it is aimed at students looking todemistify the process of coding, profiling, and optimizing algorithms,with a particular focus on systems geared toward performance intensivecomputing: clusters, multicore cpus, gpus, risc-v, arm, tpus, etc. thefundamental principles of computer architecture will be covered indepth, but an equal emphasis will be given to hands-on experience inlearning how measure, tune, and report performance on common hpcresources. while a key outcome of the course is the ability to writemore efficient code, the more enduring goal is to educate students to""see their code"" from the hardware's perspective, broadening anddeepening their understanding of programming with potential benefitsacross a broad range of disciplines.topics include:-history of hpc architectures-efficient programming for cache-based serial processors-mimd and cache coherency-efficient programming for multicore processors-simd and vector instructions-gpu memory and cores-tpus, matrix engines, systolic arrays-arm | required: b+ or higher in core programming. assignments in this class can be done in any programming language. some assignments will involve manipulating basic snippets of c code, so some basic knowledge of c is assumed (however, students do not need to be proficient in c to take this class).this is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.","mpcs 52011 introduction to computer systems recommended.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"required: b+ or higher in core programming. assignments in this class can be done in any programming language. some assignments will involve manipulating basic snippets of c code, so some basic knowledge of c is assumed (however, students do not need to be proficient in c to take this class).this is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course."
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52015-1,mpcs 52015 advanced computer systems (spring 2026),mpcs-52015-1,"kimpe, dries (dries)",core systemselectivespecialization - high performance computing (hpc-2),"this class will use the book computer systems: a programmer'sperspective (3rd edition), randal e. bryant, david r. o'hallaron (required).this course focuses on studying modern computer systems from the point of view of a programmer, with an emphasis on topics which help you improve the performance, correctness or utility of user-level programs.as such, this is intended to be a practical, hands-on study of contemporary computer systems. we will focus on the x86-64 architecture (as implemented by intel/amd 64 bit processors).topics:- representing and manipulating information: unsigned and two's complement representation, ieee floating point and corresponding arithmetic.- machine level representation of programs: x86-64 assembly, control instructions, translation of basic c control constructs (such as loops and switch statements), a study of common code security vulnerabilities (such as buffer overflows).- processor architecture: study of a pipelined out of order processor.- code optimization- memory hierarchy: persistent storage(magnetic spinning disks, ssd), ram and rom, and caches.- virtual memorythis is a hands on course; there will be multiple labs requiring you to program in c.labs include:- data lab: learn how to efficiently perform arithmetic operations without doing arithmetic- bomb lab: reverse engineer (disassemble) a binary program to discover the secret keys- attack lab: perform a buffer overflow exploit in order to bypass authentication.and more.the information above is the intended content of the course and subject to change. | this class will use the book computer systems: a programmer'sperspective (3rd edition), randal e. bryant, david r. o'hallaron (required).this course focuses on studying modern computer systems from the point of view of a programmer, with an emphasis on topics which help you improve the performance, correctness or utility of user-level programs.as such, this is intended to be a practical, hands-on study of contemporary computer systems. we will focus on the x86-64 architecture (as implemented by intel/amd 64 bit processors).topics:- representing and manipulating information: unsigned and two's complement representation, ieee floating point and corresponding arithmetic.- machine level representation of programs: x86-64 assembly, control instructions, translation of basic c control constructs (such as loops and switch statements), a study of common code security vulnerabilities (such as buffer overflows).- processor architecture: study of a pipelined out of order processor.- code optimization- memory hierarchy: persistent storage(magnetic spinning disks, ssd), ram and rom, and caches.- virtual memorythis is a hands on course; there will be multiple labs requiring you to program in c. | - data lab: learn how to efficiently perform arithmetic operations without doing arithmetic","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)masters program in computer science,mpcs 51040 c programming or mpcs 51100 advanced programming.this course requires a working knowledge of c programming for assignments. completion of mpcs mpcs 51040 c programming or mpcs 51100 advanced programming or the mpcs c programming bootcamp is required. mpcs 51044 c/c++ for advanced programmers will not provide enough background for the course without also attending the c bootcamp.this is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51032-1,mpcs 51032 advanced ios application development (spring 2026),mpcs-51032-1,"binkowski, thomas (abinkowski)",specialization - application development (app-2)elective,"course descriptionadvances in mobile technologies are changing the way that individuals and businesses use computing devices. this course will explore real-world issues with developing robust, high-performance ios applications for iphone, ipod touch, ipad, watch and tv. the course will consist of lectures, hands-on coding exercises and discussion. weekly programming assignments will be used to create a portfolio of applications using advanced ios frameworks.throughout the course, students will design and develop an application as a final project. students may opt to work in collaboration with local companies or emerging start-ups for their project. these opportunities will be discussed during the first week of class and may vary by quarter.course contentsthis course will explore real-world issues with developing robust, high-performance ios applications for iphone, ipod touch, ipad, watch and tv. advanced topics in ios development such as accessibility, performance, debugging, localization, and image processing will be addressed. ios's game development framework, spritekit, watchos, and tvos will also be explored in assignments. the course will use swift for all assignments, although topics in objective-c will be discussed.courseworkstudents will complete weekly programming assignments during the first 7 weeks of class. at that time, they will submit a proposal for their final project, an application of their own design. students may opt to work in collaboration with local companies or emerging start-ups for their project. during the final weeks, students will be expected to complete the work on their final projects. there will be no written exam for the course. the final exam class time will be used for students to conduct a formal presentation and live demonstration of their final projects to the class.each student will also be required to present a case study featuring a open source ios framework or library. the studies will describe and review their utility and implementation details of the source code. these case studies are designed to broaden students exposure to best practices in ios development.course textbooknone required.requirementsthis course requires access to an intel-based apple macintosh computer capable of running xcode 7 (mac os x mavericks or later). access to an ios device (ipod touch, iphone, or ipad) is recommended for developing and testing applications. | advances in mobile technologies are changing the way that individuals and businesses use computing devices. this course will explore real-world issues with developing robust, high-performance ios applications for iphone, ipod touch, ipad, watch and tv. the course will consist of lectures, hands-on coding exercises and discussion. weekly programming assignments will be used to create a portfolio of applications using advanced ios frameworks. | throughout the course, students will design and develop an application as a final project. students may opt to work in collaboration with local companies or emerging start-ups for their project. these opportunities will be discussed during the first week of class and may vary by quarter.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,mpcs 51030 ios application development
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52083-1,mpcs 52083 advanced topics in cloud computing (spring 2026),mpcs-52083-1,"vasiliadis, vasilios (vas)",elective,"cloud infrastructure greatly simplifies the development of highly scalable applications, but operating these applications reliably and securely at scale introduces additional challenges. in this class we will explore approaches for meeting these challenges and develop an understanding of enabling technologies.the class comprises three parts. the first part focuses on preparing an application for production operations and automating deployment of the application and its runtime infrastructure. the second part introduces security considerations and adds monitoring to the runtime environment. the third part explores ways to address some of the challenges faced by applications that deal with streaming data.additional information on topics, assignments, and grading is available athttps://www.atmpcs.org | cloud infrastructure greatly simplifies the development of highly scalable applications, but operating these applications reliably and securely at scale introduces additional challenges. in this class we will explore approaches for meeting these challenges and develop an understanding of enabling technologies. | the class comprises three parts. the first part focuses on preparing an application for production operations and automating deployment of the application and its runtime infrastructure. the second part introduces security considerations and adds monitoring to the runtime environment. the third part explores ways to address some of the challenges faced by applications that deal with streaming data.","familiarity with shell scripting and data serialization/declarative languages such as yaml and json. no application-specific knowledge is assumed; we will provide introductory readings for each topic, but those with experience in the application areas covered may find the material easier to understand.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,b+ or above in mpcs 51083 cloud computingmpcs 52553 web development (recommended)mpcs 52040 distributed systems (recommended)
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51235-1,mpcs 51235 advanced user interface and user experience design (spring 2026),mpcs-51235-1,"marques, andre (andremar)",electivespecialization - application development (app-2),"advanced ui ux design builds upon the skills and concepts learned in ui ux design. students will create end-to-end integrated experiences (e.g. phone, watch, web, tv); high fidelity interactive prototypes with motion; custom ui pattern libraries; interfaces for vehicles, connected devices, or wearables; and take on real projects of increased complexity for on-campus clients or local institutions, requiring research and iterative prototyping. | advanced ui ux design builds upon the skills and concepts learned in ui ux design. students will create end-to-end integrated experiences (e.g. phone, watch, web, tv); high fidelity interactive prototypes with motion; custom ui pattern libraries; interfaces for vehicles, connected devices, or wearables; and take on real projects of increased complexity for on-campus clients or local institutions, requiring research and iterative prototyping. | mpcs 51230 user interface and user experience design","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,mpcs 51230 user interface and user experience design
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-55001-1,mpcs 55001 algorithms (spring 2026),mpcs-55001-1,"agarwal, ishan (ishanagarwal)",core theory,"syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class. there may be small changes in this iteration of the class.course description:this course is an introduction to the fundamental techniques used to design algorithms for a wide range of classic problems. you will learn how to use these basic heuristics to design algorithms to solve these classic problems efficiently, as well as variants of these problems that may arise in various applications. through this process you will gain familarity with the most important and common algorithms which we will study as examples that make use of several basic algorithm design techniques. you will also learn to think about the time and space complexity of algorithms and will learn how to reason about asymptotic complexity. we will not only see how to design algorithms, but how to reason about them and prove that they work, as well as prove guarantees about their runtime.learning objectives:to provide students with understanding of, and practice in usingthe most fundamental design tools in an algorithmist's toolkit(greedy, divide and conquer, dynamic programming, using randomization, how to think about algorithms on graphs, reductions, etc.)to provide students familiarity withthe most commonly used fundamental algorithms(searching, sorting, median finding, and some of the most common example applications of all the techniques mentioned above. also fundamental graph algorithms like bfs, dfs, shortest path finding, minimum spanning tree computation, etc)to give students an understanding oftime and space complexity of algorithms. specifically: how to calculate the asymptotic runtime of an algorithm.to enable students toreason about algorithms and their run time. specifically, how to prove the correctness of, as well as runtime guarantees about, the algorithms that we study in this class as well as novel algorithms that you might encounter.to provide students experience not only in designing algorithms, but also inexpressing these algorithms in plain english/ easy to read pseudocode, at an appropriate level of detail.course contents:this list of topics is tentative and it is quite possible that we will cover only a subset of these. please check the syllabus for a detailed course schedule.algorithms, pseudocode and runtime:what is an algorithm? how to express algorithms in pseudocode/ regular english with an appropriate level of detail. how to reason about the correctness of algorithms as well as their run time.recursion:the fundamental idea of recursive agorithms. some examples such as the tower of hanoi problem. examples of the divide and conquer heuristic (merge sort, quick sort, median finding in linear time, finding the closest pair of points in the plane, karatsuba's algorithms for multiplication).asymptotic complexity:big-o, omega and theta. solving recurrences by substitution (induction). recursion trees. the master theorem.dynamic programming:examples: rod cutting problems, longest common subsequence, knapsack.greedy algorithms:examples: interval scheduling, huffman codesa brief introduction to randomized algorithms and approximation algorithms:basic notions and some introductory examples. the notion of expected run time, high probability bounds and approximation ratios.graph algorithms:breadth first search, depth first search, directed acyclic graphs and topological sort. decomposing any graph into a directed acyclic graph of its strongly connected components. minimum spanning trees. prim's and kruskal's algorithm for computing minimum spanning trees. shortest path finding: dijkstra's, bellman-ford and floyd-warshall algorithms. depending on time: max flow min cut theorem and computing matchings in graphs.algorithmic complexity:computability, complexity, complexity classes. p and np. reductions both as a tool for proving hardness but also as an invaluable algorithm design tool.special topics depending on time: possible topics include computation with privacy (cryptography, e.g. secure multi-party computation) or designing algorithms when agents may have selfish motives to act in their own best interest (algorithmic game theory and mechanism design).course activities:classes:classes will typically consist of a lecture on the topic interspersed with problem solving/ related activities.office hours:regular office hours will be held by the course instructor as well as tas. attendance is optional but highly reccomended.problem solving sessions:regular problem solving sessions will be held for the purpose of giving the students guided problem solving practice. attendance is optional but highly reccomended.course materials:the class is intended to be self contained. complete lecture notes will be provided for all the lectures. all problems in the problem sets will also be stated in full.the course textbook isintroduction to algorithms (third edition) by t. h. cormen, c. e. leiserson, r. l. rivest, and c. stein (isbn 9780262-033848).jeff erickson's textbook, which is availablehere, is also an excellent resource that is available for free online.evaluation:the course grade will be based on weekly homeworks, a midterm and a final exam. homework will be focussed on written exercises where you must design an algorithm to solve a problem, express the algorithm clearly, prove it's correctness and then prove a suitable bound on it's asymptotic time complexity. there may be occasional programming exercises.we will adopt a specifications grading framework: that is you will be provided detailed instructions for each task on the homework, as well as an opportunity to resubmit your homework after receiving feedback. the homework will be graded qualitatively. the final letter grade will depend upon how many of the homework problems you satisfactorily complete (including after the opportunity to revise your work) and the exam score (which will take into account both midterm and final scores). more details can be found on the syllabus.prerequisites:the main prerequistite is some mathematical maturity (in particular a good understanding of the material covered in the discrete mathematics course). no knowledge of algorithms is assumed. some basic programming experience (in any modern programming language) may be useful for the programming exercises. | syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class. there may be small changes in this iteration of the class.course description: | this course is an introduction to the fundamental techniques used to design algorithms for a wide range of classic problems. you will learn how to use these basic heuristics to design algorithms to solve these classic problems efficiently, as well as variants of these problems that may arise in various applications. through this process you will gain familarity with the most important and common algorithms which we will study as examples that make use of several basic algorithm design techniques. you will also learn to think about the time and space complexity of algorithms and will learn how to reason about asymptotic complexity. we will not only see how to design algorithms, but how to reason about them and prove that they work, as well as prove guarantees about their runtime.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),mpcs 50103 discrete math (immersion math) or a passing score on the mpcs math placement exam. core programming (completed or concurrently taking) or a core waiver for programming.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-53120-1,mpcs 53120 applied data analysis (spring 2026),mpcs-53120-1,"singh sahota, davender (dsahota)",electivespecialization - high performance computing (hpc-2),"this course provides a self-contained introduction to computational data analysis from an applied perspective. it is intended as a standalone course for students who are not pursuing the full data analysis sequence in the mpcs.as such, students who have taken mpcs 53110 foundations of computational data analysis and received a grade of b or higher should take mpcs 53111 machine learning. students that have taken or are currently enrolled in mpcs 53111 machine learning cannot register for this class.the course will cover topics in basic probability theory, statistical inference, and basic machine learning models typically used in data analysis. each topic will be accompanied by example illustrations using python. many of the topics covered form the basis of almost all algorithms and machine learning methods used in data analysis. as an applied course, the emphasis will be on the use of these tools to solve problems.textbook:an introduction to statistical learningoptional:the elements of statistical learning;python for data analysis: data wrangling with pandas, numpy, and ipython;deep learning with pythoncourse contents:elementary probability and statisticsprobability theoryrandom variablesdistributions and densitiessoftware platformsvariables, objects, and functions in pythonworking with data framesdata pre-processing and visualizationlinear models/statistical inferenceleast-squares regressionlogistic regressionhypothesis testingmodel assessment and selectionmachine learning modelsperceptron classifierneural networksdecision trees/random forestssupport vector machinesclusteringunsupervised clusteringrecommender systemsintroduction to deep learningcomputer visionnatural language processingevaluation:homework assignments (12-14)course project | this course provides a self-contained introduction to computational data analysis from an applied perspective. it is intended as a standalone course for students who are not pursuing the full data analysis sequence in the mpcs.as such, students who have taken mpcs 53110 foundations of computational data analysis and received a grade of b or higher should take mpcs 53111 machine learning. students that have taken or are currently enrolled in mpcs 53111 machine learning cannot register for this class. | the course will cover topics in basic probability theory, statistical inference, and basic machine learning models typically used in data analysis. each topic will be accompanied by example illustrations using python. many of the topics covered form the basis of almost all algorithms and machine learning methods used in data analysis. as an applied course, the emphasis will be on the use of these tools to solve problems.textbook:an introduction to statistical learning","knowledge of python is required for this class.this course requires competency in unix, linux, and github. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed or core waiver for programming. mpcs 50103 discrete mathematics completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51220-1,mpcs 51220 applied software engineering (spring 2026),mpcs-51220-1,—,electivespecialization - software engineering (se-2),"in this course, we will explore practical techniques to solving modern software challenges.there's some flexibility in the syllabus, but planned topics include:code qualitymanaging complexitytest-driven developmentdomain-driven designarchitectural design patternssource control techniques for small teams with gitsecurity and cryptography essentialscontinuous integration & deploymentapis and api managementcourse work and grading30% -- individual homework40% -- group homework/project15% -- course engagement15% -- exams (midterm, final)required textbooksto be announced. | in this course, we will explore practical techniques to solving modern software challenges.there's some flexibility in the syllabus, but planned topics include: | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51083-1,mpcs 51083 cloud computing (spring 2026),mpcs-51083-1,—,electivespecialization - application development (app-2),"cloud computing is being widely adopted by enterprises of all sizes due to the low initial investment required, attractive operating costs, and elastic capacity that can best serve the highly variable demands of modern applications. software engineers must be familiar with cloud computing technologies since many new applications they develop will be deployed “in the cloud”, and existing applications will often require integration with cloud-hosted services to take advantage of new capabilities.this course provides an introduction to cloud computing with specific consideration for application development in two contexts: highly scalable (or so-called “web-scale”) applications, and enterprise applications in a hybrid environment comprising both on-premises and cloud infrastructure. we will focus primarily on infrastructure and platform services, and will introduce software-as-a-service from the perspective of a consuming application. the course will emphasize practical applications of cloud computing technologies, with sufficient exploration of their theoretical underpinnings to inform architectural, design, and implementation decisions. we will use commercial cloud offerings provided by amazon web services to build and deploy ""real” cloud-hosted applications. | cloud computing is being widely adopted by enterprises of all sizes due to the low initial investment required, attractive operating costs, and elastic capacity that can best serve the highly variable demands of modern applications. software engineers must be familiar with cloud computing technologies since many new applications they develop will be deployed “in the cloud”, and existing applications will often require integration with cloud-hosted services to take advantage of new capabilities.this course provides an introduction to cloud computing with specific consideration for application development in two contexts: highly scalable (or so-called “web-scale”) applications, and enterprise applications in a hybrid environment comprising both on-premises and cloud infrastructure. we will focus primarily on infrastructure and platform services, and will introduce software-as-a-service from the perspective of a consuming application. the course will emphasize practical applications of cloud computing technologies, with sufficient exploration of their theoretical underpinnings to inform architectural, design, and implementation decisions. we will use commercial cloud offerings provided by amazon web services to build and deploy ""real” cloud-hosted applications. | core programmingmpcs 52553 web development (not required, but strongly recommended)","this course assumes no prior knowledge of cloud computing. programming assignments require familiarity with python and use of linux commands, as well as simple shell scripts. we will use the boto library to access amazon web services, and most assignments, including the capstone project, will make use of flask, a python-based micro-framework for web applications. a brief overview of boto, the web framework, as well as a list of reference materials will be provided; additional concepts will be introduced as they are needed to complete assignments. knowledge of web application development is not required, but students with little or no web development experience may find some assignments particularly challenging. ideally, students should understand the fundamentals of web apis in general, and the rest approach in particular. an understanding of database concepts, such as referential integrity and acid properties, is also useful.note: students in past courses have struggled to keep up with homework assignments due to limited experience with python and knowledge of the linux command line. see the notes on this page for more detail on expected knowledge: http://home.uchicago.edu/vas/#prerequisites. if you have doubts about your proficiency in these areas please talk with the instructor before signing up for the course.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"core programmingmpcs 52553 web development (not required, but strongly recommended)"
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-53001-1,mpcs 53001 databases (spring 2026),mpcs-53001-1,—,core systemselective,"course description:this course starts by introducing the fundamental concepts associated with the design and the work of database systems, including 1) the main steps to design a database, the essential properties for the work of a database, a discussion on data storage, and the different data models utilized in such steps; 2) the entity-relationship (er) model for an initial design to relational databases and the relational model to describe such design with structures; 3) the normalization forms for an optimized design; 4) the relational algebra to design, build, and optimize queries to the database; and 5) the different categories of data and an overview on the other database designs and paradigms with a comparison between sql and nosql databases.the course then focuses on three main types of databases: 1) sql-based, where we learn about relational databases (using mysql rdbms), and the structured query language (sql) to build relational databases and to store, manipulate, and retrieve data; 2) nosql-based, where we learn about document-based databases (using mongodb) and the mongodb query language (mql); and 3) nosql-based, where we learn about graph-based databases (using neo4j) and the graph query language (neo4j's cypher).the students, in the final project, will design and implement a database for a system/scenario of their choice, then develop a user interface (e.g., web-based) using a programming language (e.g., java, python) of their choice that connects and interacts with the created database to execute user interactions through database supported queries.course contents:an introduction:essential definitionsdatabase propertiesdata modelsentity-relationship (er) modelrelational modelnormalization and schema refinementrelational algebra:operators to build queriesquery processing and optimizationstructured query language (sql):essential commands, constraints, and operatorsjoin operator, aggregate functions, and nested queries.interfacing java/python programming languages with sqlcategories of data and properties of big datasql/nosql: other types of databasesmongodb: an example of document-based nosql databasesneo4j: an example of graph-based nosql databasescoursework:assignments [homeworks] (65%)midterm (10%)group-based final project [multi-parts] (25%)class participation [bonus points] (5%)recommended (optional) textbooksdatabase systems: a practical approach to design, implementation, and management author: thomas connelly and carolyn begg, 6th edition, isbn-13: 9780132943260database management systems author: raghu ramakrishnan and johannes gehrke. 3rd edition. | this course starts by introducing the fundamental concepts associated with the design and the work of database systems, including 1) the main steps to design a database, the essential properties for the work of a database, a discussion on data storage, and the different data models utilized in such steps; 2) the entity-relationship (er) model for an initial design to relational databases and the relational model to describe such design with structures; 3) the normalization forms for an optimized design; 4) the relational algebra to design, build, and optimize queries to the database; and 5) the different categories of data and an overview on the other database designs and paradigms with a comparison between sql and nosql databases. | the course then focuses on three main types of databases: 1) sql-based, where we learn about relational databases (using mysql rdbms), and the structured query language (sql) to build relational databases and to store, manipulate, and retrieve data; 2) nosql-based, where we learn about document-based databases (using mongodb) and the mongodb query language (mql); and 3) nosql-based, where we learn about graph-based databases (using neo4j) and the graph query language (neo4j's cypher).","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programmingthis course can not be taken if you are taking or have already completed mpcs 53020 foundations of database systems. there is significant overlap between the two courses.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52040-1,mpcs 52040 distributed systems (spring 2026),mpcs-52040-1,"skluzacek, tyler (skluzacek)",core systemselective,"course descriptionthis course focuses on the theory and practice of distributed systems. modern applications and services are increasingly distributed due to growing data sizes, plateauing sequential processing power, and the enormous number of connected devices. virtually all web, mobile, and even pc applications now rely on networked services, calling out to backend servers to perform various functions, and many individual applications are implemented as a collection of cooperating processes or services. for example, distributed systems are used in massively multiplayer online games, cloud services, e-commerce and banking systems, peer-to-peer networks, social network, self-driving cars, telecommunication systems, and distributed databases and file systems.in this course we will explore the need for distributed systems, understand characteristics of distributed systems, investigate where distributed systems are used, review the unique challenges of distributed systems, analyze solutions for common distributed systems problems, and gain practical knowledge of the systems and algorithms for building real distributed systems.course contentsthe course will cover the following topics:·distributed architectures·processes and threads·networking and communication mechanisms·naming and mapping·synchronization·distributed time and ordering·consistency·fault tolerance·distributed consensus·distributed data·data intensive computingcourseworkthe course will include weekly homework, two exams, and one project.the weekly assignments will include a mix of practice problems and programming assignments designed to reinforce materials covered in lectures.the project will be a 4-week team project that provides the opportunity to apply skills learned in lectures to develop a distributed system.the final grade will be determined as follows:·homework assignments: 20%·project: 35%·midterm exam: 10%·final exam: 35%textbookthe course will use the following textbook:maarten van steen and andrew tanenbaum, distributed systems 4th edition | course descriptionthis course focuses on the theory and practice of distributed systems. modern applications and services are increasingly distributed due to growing data sizes, plateauing sequential processing power, and the enormous number of connected devices. virtually all web, mobile, and even pc applications now rely on networked services, calling out to backend servers to perform various functions, and many individual applications are implemented as a collection of cooperating processes or services. for example, distributed systems are used in massively multiplayer online games, cloud services, e-commerce and banking systems, peer-to-peer networks, social network, self-driving cars, telecommunication systems, and distributed databases and file systems.in this course we will explore the need for distributed systems, understand characteristics of distributed systems, investigate where distributed systems are used, review the unique challenges of distributed systems, analyze solutions for common distributed systems problems, and gain practical knowledge of the systems and algorithms for building real distributed systems.course contentsthe course will cover the following topics:·distributed architectures·processes and threads·networking and communication mechanisms·naming and mapping·synchronization·distributed time and ordering·consistency·fault tolerance·distributed consensus·distributed data·data intensive computingcourseworkthe course will include weekly homework, two exams, and one project.the weekly assignments will include a mix of practice problems and programming assignments designed to reinforce materials covered in lectures.the project will be a 4-week team project that provides the opportunity to apply skills learned in lectures to develop a distributed system.the final grade will be determined as follows:·homework assignments: 20%·project: 35%·midterm exam: 10%·final exam: 35%textbookthe course will use the following textbook: | core programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-53110-1,mpcs 53110 foundations of computational data analysis (spring 2026),mpcs-53110-1,"chaudhary, amitabh (amitabh)",electivespecialization - data analytics (da-1),"foundations of computational data analysis covers mathematical prerequisites for the data analytics specialization courses in machine learning, and large-scale data analytics (mpcs 53111 and 53112): basic statistics and linear algebra. topics in statistics include discrete and continuous random variables, discrete and continuous probability distributions, variance, covariance, correlation, sampling and distribution of the mean and standard deviation of a sample, central limit theorem, confidence intervals, maximum likelihood estimators, and hypothesis testing. topics in linear algebra include gaussian elimination, matrix transpose and matrix inverse, eigenvectors and eigenvalues, and singular value decompositions. in some of the exercises we'll use python to compute and/or visualize data. | foundations of computational data analysis covers mathematical prerequisites for the data analytics specialization courses in machine learning, and large-scale data analytics (mpcs 53111 and 53112): basic statistics and linear algebra. topics in statistics include discrete and continuous random variables, discrete and continuous probability distributions, variance, covariance, correlation, sampling and distribution of the mean and standard deviation of a sample, central limit theorem, confidence intervals, maximum likelihood estimators, and hypothesis testing. topics in linear algebra include gaussian elimination, matrix transpose and matrix inverse, eigenvectors and eigenvalues, and singular value decompositions. in some of the exercises we'll use python to compute and/or visualize data. | b+ or above in mpcs mpcs core programming class or a core waiver for programming. 51042 python programming or mpcs 51046 intermediate python programming recommended; all other mpcs core programming classes allowed with b+ or above and prior knowledge of python.b or above in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms. cannot be taken concurrently with mpcs 55001 algorithms.students that have taken cmsc 25300/35300 can waive mpcs 53110 and do not need to take the exam. students that have taken cmsc 25400/35400 are not eligible to take mpcs 53110.","univariate calculus and basic multivariate calculus (double integrals, partial derivatives).this is a mpcs elective class. mpcs students must have completed three core classes, or be concurrently registered for the third core class, before taking any elective courses.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,b+ or above in mpcs mpcs core programming class or a core waiver for programming. 51042 python programming or mpcs 51046 intermediate python programming recommended; all other mpcs core programming classes allowed with b+ or above and prior knowledge of python.b or above in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms. cannot be taken concurrently with mpcs 55001 algorithms.students that have taken cmsc 25300/35300 can waive mpcs 53110 and do not need to take the exam. students that have taken cmsc 25400/35400 are not eligible to take mpcs 53110.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52072-1,mpcs 52072 gpu programming (spring 2026),mpcs-52072-1,"kenneth samuels, lamont (lamonts)",core systemselectivespecialization - high performance computing (hpc-2),"this course provides an introduction to programming for graphics processing units (gpus), primarily focusing on both the theoretical aspects and practical implementations for programming on them. with the increasing demand for high-performance computing, understanding how to leverage gpus is becoming essential for various fields including machine learning, scientific computing, and computer graphics. students will learn the fundamental principles of gpu architecture, which includes gpu hardware structure, memory hierarchy, and execution model. students will gain proficiency in writing gpu programs by using industry-standard frameworks such as cuda and opencl. by the end of this course, students will know how to proficiently use gpu resources to accelerate the performance of a wide range of applications that require their computational power. | core programming; knowledge of c programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course. | this is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming; knowledge of c programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51260-1,mpcs 51260 human-computer interaction (spring 2026),mpcs-51260-1,"wozniak, katie (fxx6927)",specialization - application development (app-2)elective,"instructor: kathryn wozniak (she/her/hers)email: k.wozniak@uchicago.eduoffice hours: before/after class and by appointment (please email me to schedule)prerequisites: core programmingcourse website: canvasdescriptionthis course explores the cognitive psychology and physiology behind humans’ interactions with their environment and how this translates to “good design” of computer-based systems, interfaces, and machines. emphasis is placed on the value of intentionally observing and analyzing the reciprocal relationship between humans and the design of systems in various contexts from a designer or engineer’s perspective. from a practical standpoint, the course addresses the role human-computer interaction (hci) plays in enhancing the day-to-day human experience and the value of a product to society, while increasing the bottom line for stakeholders. topics include perception, memory, attention, mental models, accessibility, user/interaction research methods, interface design principles, and design communication strategies.learning objectivesat the end of this class you will be able to:understand aspects of cognitive psychology and human factors engineering that apply to human-computer interaction (hci)identify components and principles of “good” (and bad) interaction designcritically analyze and evaluate human-computer interaction through empirical research methodsdesign mockups, prototypes, or revisions of interactive systems by applying hci principlesdevelop strategies for communicating design, usability, and interactivitycourse componentsclass attendanceweekly attendance is required. failure to attend class on a regular basis could result in a failing grade in the course. if time of the class sessions will not work for you to attend, you should not take this class. if you miss more than two class sessions during the quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.participation: discussion, peer review, hot topicssharing ideas, insights, and questions in response to the readings, lectures, and demos throughout the course is welcomed and highly encouraged in class and in the discussion channel. additionally, you are required to find and read at least two articles beyond the course readings on an hci “hot topic” and share a summary and reflection on those articles by the end of the course. you will also be expected to share your work and provideconstructive feedbackon others’ work throughout the course through an informal peer review process guided by the professor.lectures & demoslectures and demos will prepare you for assignments each week. lectures will cover relevant topics as listed in the schedule and will include interactive and conversational activities. demos will provide hands-on demonstrations in class on how to use design tools.quizzesweekly quizzes, aka “knowledge checks,” will help you to check your comprehension of theories, principles, and applications covered in the readings and lectures.projectfour assignments throughout the course (interaction analysis/heuristic review and report, website/system/program/app mockup and prototype, design evaluation and report, re/design and demo) build up to one culminating final report and presentation, which will demonstrate your ability to apply the course principles and topics to an authentic human-computer interaction scenario of your choice. you will identify and work with a team of 2-4 classmates for the project (all group members must collaborate on all assignments); one team member should notify the professor via email of your team’s members and team name by week 2. everyone will receive feedback from the professor and fellow students on each assignment along the way so that they may improve their deliverables for the final report and presentation.assessmentgrade25% class participation & peer review (exit tickets)10% quizzes65% project assignments (10% analysis, 10% mockup/prototype, 10% evaluation, 10% redesign, 25% final report and presentation)late assignmentsyou can submit up to 2 late quizzes and 1 late assignment within 3 days (72 hours) of the original deadline without penalty. otherwise, the penalty is 5 points per day late. requests for longer extensions should be submitted to the professor within 24 hrs of the original deadline with an explanation and proposed deadline for the late work. failure to submit assignments and quizzes on time could result in a failing grade in the course. if you miss more than three deadlines during the quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.academic honestyhttps://studentmanual.uchicago.edu/academic-policies/academic-honesty-plagiarism/toolswe will discuss a variety of tools for creating mockups and prototypes and analyzing user interactions. some are free for educational use and some have a free trial. you are not required to purchase any of these nor will we go into great depth on the features of each. however, you will be required to use at least one of these tools for the course project, so exploration and self-directed learning is encouraged. additional resources and links to online tutorials will be provided on canvas.mockup and prototyping tools: balsamiq, sketch, figma, invisionuser interaction/testing tools: morae, userzoom, tobii, gazereadingsrequired:boehm-davis, d. a., durso, f. t., & lee, j. d. (2015).apa handbook of human systems integration. washington, dc: american psychological association.goodman, e. & kuniavsky, m. (2012). observing the user experience : a practitioner’s guide to user research: vol. 2nd ed. morgan kaufmann.johnson, j. (2020).designing with the mind in mind: simple guide to understanding user interface design guidelines(third edition.). cambridge, ma: morgan kaufmann.additional readings will be assigned weekly and will either be available as links or pdfs on canvas. readings will support topics covered in class.optional:norman, d. a. (2013).the design of everyday things(revised and expanded edition.). new york, new york: basic books.course content & scheduleslight modifications to schedule and assignments may occur as the quarter progresses.week 1: introduction to hcilecture: what makes a chair good for sitting? humans, environments, interactionsclass activities: introductions, personal audit of interactions against universal design principlesdue end of week 1:week 1 readingsquiz 1form teams of 2-4 for course projectweek 2: hci research methods part 1lecture: methods for observing hci in the wildclass activities: demo - interaction observation, usability heuristic reviewdue end of week 2:week 2 readingsquiz 2confirm project team member names and team name on canvasbegin work on assignment 1week 3: cognition overviewlecture: the magical flawed brain meets the beautiful flawed interfaceclass activities: demo - usability heuristic reviewdue end of week 3:week 3 readingsquiz 3submit assignment 1: heuristic evaluation report or focus group reportweek 4: perception and accessibilitylecture: sense and sensibility: engineering experiences for the 5 sensesclass activities: peer review assignment 1, case studies – siemens vr, disney worlddue end of week 4:week 4 readingsquiz 4submit assignment 2: design mockup sketchweek 5: memory and attentionlecture: “squirrel!” - distractions, addictions, and our mental modelsclass activities: case study – social media of your choice; demo – mockup and prototype toolsdue end of week 5:week 5 readingsquiz 5submit assignment 3: prototype draftweek 6: hci research methods: part 2lecture: usability testing: from the wild to the labclass activities: peer review assignment 2; demo of usability testing tools/processdue end of week 6:week 6 readingsquiz 6submit assignment 4: complete prototype + brief reportweek 7: communicating with stakeholders about hci, part 1lecture: tufte, personas, and why we like storiesclass activities: teamwork/lab timedue end of week 8:week 8 readingsquiz 8begin work on assignment 5: evaluation (user testing) + reportweek 8: communicating with stakeholders about hci, part 2lecture: ted talks, pecha kucha, and crucial conversationsclass activities: peer review assignment 3due end of week 8:week 8 readingsquiz 8submit assignment 5: evaluation (user testing) + reportweek 9: errors and error recovery, bringing it togetherlecture: my recovery journey with recommender systems since 2001class activities: case studies – netflix, stitch fixinformal presentations on course projectdue end of week 9:week 9 readingsquiz 9submit assignment 6: final project prototype, report, and presentationhot topics in hci, acm sigchi (discussion) | instructor: kathryn wozniak (she/her/hers)email: k.wozniak@uchicago.eduoffice hours: before/after class and by appointment (please email me to schedule)prerequisites: core programmingcourse website: canvas | this course explores the cognitive psychology and physiology behind humans’ interactions with their environment and how this translates to “good design” of computer-based systems, interfaces, and machines. emphasis is placed on the value of intentionally observing and analyzing the reciprocal relationship between humans and the design of systems in various contexts from a designer or engineer’s perspective. from a practical standpoint, the course addresses the role human-computer interaction (hci) plays in enhancing the day-to-day human experience and the value of a product to society, while increasing the bottom line for stakeholders. topics include perception, memory, attention, mental models, accessibility, user/interaction research methods, interface design principles, and design communication strategies.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-56511-1,mpcs 56511 introduction to computer security (spring 2026),mpcs-56511-1,"rossell, shelley (shelley)",core systemselective,"descriptionthis course introduces security principles and practices. topics will range from encryption to network, endpoint, and application threats and controls. the course will emphasize both offense (i.e., attacker mindset) and defense (the importance of implementing both technical and non-technical controls).topics● threat landscape● encryption● authentication and access control● endpoint security● network security● web and application security● risk management● monitoring and vulnerability management● incident responsecoursework● rerequired readings from freely available sources● labs and other assignments● quizzes● research paper● discussion homework | this course introduces security principles and practices. topics will range from encryption to network, endpoint, and application threats and controls. the course will emphasize both offense (i.e., attacker mindset) and defense (the importance of implementing both technical and non-technical controls). | ● rerequired readings from freely available sources","familiarity with linux command linefamiliarity with tcp/ip and network routing recommendedstudents must be able to run the labs -- either on their own machine (virtual machine) or via a cloud-based option that requires installing an sdk on the local machine. installation will be reviewed on week 1 - nothing to do in advance. this does not cost.this course requires basic competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),core programming (completed or concurrently enrolled)
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-53111-1,mpcs 53111 machine learning (spring 2026),mpcs-53111-1,"chaudhary, amitabh (amitabh)",electivespecialization - data analytics (da-1)specialization - high performance computing (hpc-2),"this course introduces the fundamental concepts and techniques in data mining, machine learning, and statistical modeling, and the practical know-how to apply them to real-world data through python-based software. the course examines in detail topics in both supervised and unsupervised learning. these include linear and logistic regression and regularization; classification using decision trees, nearest neighbors, naive bayes, boosting, random trees, and artificial/convolutional neural networks; clustering using k-means and expectation-maximization; and dimensionality reduction through pca and svd. students use python and python libraries such as numpy, scipy, matplotlib, and pandas for for implementing algorithms and analyzing data.apart from lectures, we conduct optional but strongly recommended problem sessions. during these the tas present homework solutions, and other optional material. these are the only source for homework solutions; in particular, we do not publish any solutions. recording or streaming the sessions are also not planned. in spring, 2019, the problem sessions are most likely to be held on sunday afternoons; but they may be moved to saturdays based on ta availability. | this course introduces the fundamental concepts and techniques in data mining, machine learning, and statistical modeling, and the practical know-how to apply them to real-world data through python-based software. the course examines in detail topics in both supervised and unsupervised learning. these include linear and logistic regression and regularization; classification using decision trees, nearest neighbors, naive bayes, boosting, random trees, and artificial/convolutional neural networks; clustering using k-means and expectation-maximization; and dimensionality reduction through pca and svd. students use python and python libraries such as numpy, scipy, matplotlib, and pandas for for implementing algorithms and analyzing data.apart from lectures, we conduct optional but strongly recommended problem sessions. during these the tas present homework solutions, and other optional material. these are the only source for homework solutions; in particular, we do not publish any solutions. recording or streaming the sessions are also not planned. in spring, 2019, the problem sessions are most likely to be held on sunday afternoons; but they may be moved to saturdays based on ta availability. | b+ or above in mpcs mpcs core programming class or a core waiver for programming. 51042 python programming or mpcs 51046 intermediate python programming recommended; all other mpcs core programming classes allowed with b+ or above and prior knowledge of python.b or above in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms.c+ or above in mpcs 53110 foundations of computational data analysis or a pass on the data analysis placement exam. if you earn lower than a b in mpcs 53110, you should reach out to the instructor to discuss if it is advisable to take mpcs 53111.students that have taken cmsc 25400/35400 are not eligible to take mpcs 53111.","univariate calculus and basic multivariate calculus (double integrals, partial derivatives, integration-by-parts, taylor series).this course assumes both mathematical maturity and programming fluency. in particular, students are expected to code complicated machine learning algorithms from scratch (without a template) and debug them on their own.non-mpcs students must complete the above prerequisites to be eligible to take this class.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"b+ or above in mpcs mpcs core programming class or a core waiver for programming. 51042 python programming or mpcs 51046 intermediate python programming recommended; all other mpcs core programming classes allowed with b+ or above and prior knowledge of python.b or above in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms.c+ or above in mpcs 53110 foundations of computational data analysis or a pass on the data analysis placement exam. if you earn lower than a b in mpcs 53110, you should reach out to the instructor to discuss if it is advisable to take mpcs 53111.students that have taken cmsc 25400/35400 are not eligible to take mpcs 53111."
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51050-1,"mpcs 51050 oo architecture: patterns, technologies, implementations (spring 2026)",mpcs-51050-1,"shacklette, mark (jmshackl)",specialization - software engineering (se-1)specialization - software engineering (se-2)elective,"course descriptionthis course gives hands-on experience in architecture and design and the communication of such designs in the form of patterns. there are no formal prerequisites except solid familiarity with java and optionally familiarity with c++.the course is designed to give students a fundamental introduction to design and architectural patterns as they are implemented in large scale system architectures currently used in industry. students will be encouraged to explore the various implementation possibilities afforded by these patterns. trade-offs in terms of performance, development time, maintenance impact, etc. will also be discussed. students will gain exposure to several industry-leading tools including apache activemq and servicemix.specific learning objectives include:recognize and define design and architectural patterns in current common industry usecreate code implementations of these patternsbe able to discuss implementation trade-offs of certain patterns with respect to othersprovide exposure to several industry-standard pattern implementationsunderstand and be able to implement common code refactoringscourse contentsthis course has two different foci: design patterns and architectural patterns.after a brief review of the fundamentals of object orientation, including inheritance and polymorphism, the first focus on design patterns concentrates on several different design patterns or styles, including model-view-controller, factories, template methods, adapters, visitor, iterator, singleton, composite, etc. historical anticedents of patterns will be reviewed in order to give students a fundamental context in such concepts. students will work on labs that will give them an opportunity to build software (in java and optionally c++) that implement these various patterns.the second focus is on a selected architectural pattern metaphor, and this year's focus will be on enterprise integration patterns. patterns to be covered include pipes and filters, message queues, message broker, message bus, message channel, message router, among others. concepts in canonical data models will also be covered. fundamentals including pub/sub and point-to-point models are covered including message routing, translation, filtering. apache activemq and servicemix esb will form the basis for the implementations.labs will be designed to reinforce lectures and to help students implement each pattern covered. students will be able to choose which language (java or c++) in which they wish to work for a given design patterns. all students will work in java for integration pattern implementatons as java is assumed by activemq and servicemix.courseworkthere will be 6 laboratory assignments, one every week for the weeks 3 through 8. (the last 3 weeks will be devoted to the course project deliverable):lab1: introductory design pattern implementations (week 3)lab2: intermediate design pattern implementations (week 4)lab3: advanced design pattern implementations (week 5)lab4: introduction to messaging & activemq/servicemq environment setup (week 6)lab5: fundamental messaging pattern implementations (week 7)lab6: advanced messaging pattern implementations (week 8)there will be a final exam covering the major topics of the course presented in lectures, talks, and reading.students will work on a course project. each student will develop in code a system based on messaging and selected design patterns.course textbookdesign patterns, gamma, et. al., addison wesley, 1995, isbn: 0201633612object oriented analysis and design, 3rd ed., grady booch, addison wesley, 2007, isbn: 020189551xenterprise integration patterns, hohpe & woolf, addison wesley, 2004, isbn: 0321200683 | this course gives hands-on experience in architecture and design and the communication of such designs in the form of patterns. there are no formal prerequisites except solid familiarity with java and optionally familiarity with c++. | the course is designed to give students a fundamental introduction to design and architectural patterns as they are implemented in large scale system architectures currently used in industry. students will be encouraged to explore the various implementation possibilities afforded by these patterns. trade-offs in terms of performance, development time, maintenance impact, etc. will also be discussed. students will gain exposure to several industry-leading tools including apache activemq and servicemix.","knowledge of java is required as you will be actively coding in java for our second focus: integration patterns and implementations. in addition, knowledge of c++ is optional.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52030-1,mpcs 52030 operating systems (spring 2026),mpcs-52030-1,"nicholson, anthony (ajn)",core systemselective,"this course provides an introduction to fundamental concepts in operating systems, including processes and threads, interprocess communication and synchronization, memory management, segmentation, paging, linking and loading, scheduling, file systems, and input/output. this course revolves around the implementation of an x86 operating system kernel, divided into four separate projects, which accounts for the majority of the grade. students will develop these projects in pairs. to successfully complete these projects, students must understand fundamental concepts in operating system design and implementation, which are provided through the lectures. there will also be a midterm and a final.the projects use the pintos instructional kernel, which already implements some of the low-level functionality of the kernel, allowing the students to concentrate on implementing higher-level operating system functionality, such as thread management, memory management, etc.while still allowing them to peek under the hood.the project is divided into four parts:threads: students are given a minimally functional thread system, which they will extend to gain a better understanding of synchronization problems.user programs: pintos already supports loading and running user programs, but no i/o or interactivity is possible. students will enable programs to interact with the os via system calls.virtual memory: pintos is limited by the machine’s main memory size. in this project, students will remove this limitation by implementing a virtual memory management system.file systems: students will improve pintos’ basic file system.the project involves large amounts of low-level c programming, and students are assumed to already be comfortable with c programming. | student must meet one of the following requirements:- b+ or higher in mpcs 51040 - c programming- b+ or higher in mpcs 51100 - advanced programming- a- or higher in mpcs 51044 - c++ for advanced programming (students who have only taken this class should review c before taking os)students must have a b+ or higher in mpcs 52011 introduction to computer systems or mpcs 51082 introduction to unix systems. | student must meet one of the following requirements:- b+ or higher in mpcs 51040 - c programming- b+ or higher in mpcs 51100 - advanced programming- a- or higher in mpcs 51044 - c++ for advanced programming (students who have only taken this class should review c before taking os)","not approved for capp or macss students.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,student must meet one of the following requirements:- b+ or higher in mpcs 51040 - c programming- b+ or higher in mpcs 51100 - advanced programming- a- or higher in mpcs 51044 - c++ for advanced programming (students who have only taken this class should review c before taking os)students must have a b+ or higher in mpcs 52011 introduction to computer systems or mpcs 51082 introduction to unix systems.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52060-1,mpcs 52060 parallel programming (spring 2026),mpcs-52060-1,"hückelheim, jan (jhueckelheim)",core systemselectivespecialization - high performance computing (hpc-2),"course descriptionparallel computing is found everywhere in modern computing. multi-core cpus and gpus, supercomputers, and even mobile devices such as smartphones all provide ways to efficiently utilize parallel processing on these architectures and devices. the goal of this course is to provide an introduction to the foundations of parallel programming and to consider the performance gains and trade-offs involved in implementing and designing parallel computing systems. specifically, this course will place an emphasis on concepts related to parallel programming on multicore processors.course contentstopics that will be explored in the course will include (but not limited to) the following:processes and threadsshared memoryhardware mechanisms for parallel computingsynchronization and communication for parallel systemsperformance optimizationsparallel data structuresmemory consistency and hierarchies for parallel computingpatterns of parallel programmingparallel programming on gpusadditional topics dependent on student request and timecourseworkthe course will include weekly homework, two exams, and projects. the weekly assignments will contain practice problems to help enforce the concepts learned during a lecture. the projects provide the opportunity to apply the skills you learned to develop systems that can benefit from parallelization. potential project domains could include: ai and machine learning, computer graphics, cryptocurrency technologies, scientific visualization, etc.course textbook(s)this course will not have a required textbook. along with the lecture notes, students may find the following references helpful in undersntading the course material:the art of multiprocessor programmingby maurice herlihy and nir shavitadditional readings/references will be provided when necessary. | core programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course. | this is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.","familiarity with c, java, and/or python.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51240-1,mpcs 51240 product management (spring 2026),mpcs-51240-1,"almhana, rafi (ralmhana)",electivespecialization - software engineering (se-2),"course overview [watch video]product management is a cross-disciplinary endeavor that sits at the intersection of software engineering, marketing, and the user experience. product managers are expected to create products in support of business objectives, ensuring that products deliver value to customers and are feasible to build within varying sets of constraints. in this course, we will introduce the role of the product manager and demonstrate the challenges faced by product managers. we will explore approaches for managing the tension that exists between software development and product delivery using the minimum viable product and the product roadmap as critical tools. | this course assumes no prior knowledge of product management concepts or specific technologies. however, you may find some of the material easier to put into perspective if you're familiar with software design patterns, or have taken one of the other software engineering courses offered in the mpcs.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/ | this course assumes no prior knowledge of product management concepts or specific technologies. however, you may find some of the material easier to put into perspective if you're familiar with software design patterns, or have taken one of the other software engineering courses offered in the mpcs.","this course assumes no prior knowledge of product management concepts or specific technologies. however, you may find some of the material easier to put into perspective if you're familiar with software design patterns, or have taken one of the other software engineering courses offered in the mpcs.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-56540-1,mpcs 56540 software quality assurance (spring 2026),mpcs-56540-1,"almhana, rafi (ralmhana)",specialization - software engineering (se-2)elective,"course overview [watch video]description:this course introduces techniques and standards for achieving and ensuring high quality in computer software. it includes a discussion of software quality and metrics that can be used to assess it; the activities that are required to establish an effective quality assurance approach including a variety of relevant standards, and the process related issues that must be implemented to achieve continuous quality improvements.learning objectives:list and define the key stages of the software development lifecycle.explain the importance of each stage in software engineering processes.compare and contrast different software development models, like waterfall and agile.implement a basic quality control checklist for a simple software project.critique a software project's adherence to quality standards.identify different types of software testing methodologies.explain the purpose of unit testing in the context of software quality.write unit tests for simple functions or methods in a given programming language.develop a test plan that includes a variety of test cases for a given software module.automate a simple test case using a given tool or framework.create automated test scripts using selenium or playwright for basic web application scenarios.develop a defect management strategy that prioritizes issues based on severity and impact.outline:software engineering and the quality contextsoftware quality assurance and testingthe elements of sqathe sqa planquality metricstesting fundamentalssoftware management and planningproject monitoring & measurementrisk analysis and managementformal technical reviewswhite-box testingblack-box testingtesting strategythe use of software engineering testing toolsassessment:individual assignmentscourse projectclass participation / quizzestools:project planning and defect tracking tools such as jira, trello, etc.automation frameworks such as mocha, jenkins, selenium, cucumber, etc.chart and diagram tools such as draw.io | this course introduces techniques and standards for achieving and ensuring high quality in computer software. it includes a discussion of software quality and metrics that can be used to assess it; the activities that are required to establish an effective quality assurance approach including a variety of relevant standards, and the process related issues that must be implemented to achieve continuous quality improvements. | students should know at least one common programming language, such as javascript, python, java, or c++. familiarity with software development tools such as version control is expected.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","students should know at least one common programming language, such as javascript, python, java, or c++. familiarity with software development tools such as version control is expected.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-53810-1,mpcs 53810 topics in algorithmic game theory (spring 2026),mpcs-53810-1,"agarwal, ishan (ishanagarwal)",core theoryelective,"syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class. there may be small changes in this iteration of the class.premise of the class:what is algorithmic game theory?‘intersection of game theory and computer science’: analyzing/ designingalgorithms in strategic environments(where agents are strategic about what inputs they give the algorithm; they may lie for their own benefit!)analysis:given the currently implemented algorithms (mechanisms),analyze participating agents’ incentives/ behaviour.design:design algorithms (mechanisms) thatalign participants incentives with ‘overall welfare’and also have good algorithmic properties. algorithmic mechanism design.learning goals:be able to usefundamental game theoretic conceptsto analyze how a ‘system’/‘mechanism’ can incentivize participants to behave a certain way.learn how to think about/ manage what the ‘system’ (mechanism) you are designing incentivizes participants to do.aligning individual incentives with the ‘overall good’. examples: classical/ more modern mechanisms.gain exposure to the wideinterplaybetweengame theoryandother computer-science topics: online algorithms, learning, optimization, cryptography, networks, routing, etc.buildwidely useful skills:critical thinkingand analysis/ independently reviewing literature, doing aproject, andpresentingyour work and ideas to others.coursework:in class ‘games’ and their analysis/ other activities.4 written homeworks.2 mini projects.afinal projectand associatedwrite-up + presentation.some possible topics/ applications:prisoner’s dilemmasecond price/ google ad auctionsevolutionary game theoryvoting and social dynamicsmatchings: kidney exchange, ubergame theory on the blockchainsome more broad topics:equilibria, social welfare, fairness, competition, bargaining, online decision making, learning and game theory, mechanisms with and without money, economies and markets, reputation systems, incentives in peer to peer networks….many many other possibilities.things to be aware of:1)prerequisites:discrete math + basic algorithms + a tiny bit of calculus/ 'continuous' math.don’t need to know any game theory.2) this is atheory class: you should be comfortable with formal and mathematical writing/ reasoning.3) probably asmall class: lots ofdiscussions/class participation.4)mini-projects/ final project.(project could be mathematical/ theory focussed, or a case study or numerical/ qualitative experiments.)5) you will read papers/ do simulations/ case studies/ present your work.6)specifications grading: not exam focussed, qualitative evaluation/resubmissions/ continuous feedback. based on understanding and applying the course materials + developing other skills (projects/ presentations).to learn more:while we will not necessarilly completely follow just one textbook. howevertim roughgarden's : twenty lectures on algorithmic game theoryis an excellent book that we will use.you can look at chapter 1 of an early draft that is freely available onlinehere.while the set of topics we cover will be different from the exact set of material in this book, chapter 1 (it's just ~ 5 pages long), should give you some sense of the flavour of the course and the kind of things we will care about and study in this class.contact:if you are interested in the class and have any questions, or are unsure about meeting the prerequisites, please feel free to email me.email:ishanagarwal@uchicago.edu | syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class. there may be small changes in this iteration of the class.premise of the class: | what is algorithmic game theory?‘intersection of game theory and computer science’: analyzing/ designingalgorithms in strategic environments(where agents are strategic about what inputs they give the algorithm; they may lie for their own benefit!)","familiarity with discrete math, basic algorithms, and calculus. prior knowledge of game theory is not required.students should be comfortable with formal and mathematical writing/reasoning.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,b+ or higher in mpcs 50103 discrete math (immersion math) or a passing score on the mathematics placement exam.b+ or higher in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-51215-1,mpcs 51215 topics in software: making an impact (spring 2026),mpcs-51215-1,—,specialization - software engineering (se-2)elective,"tech work hasenormousimpact; our decisions can bypass regulations, affect whole populations, and influence the environment. when we don’t recognize that leverage, we push things to production with massive unconsidered repercussions.to find fulfilling roles for ourselves and have positively impactful careers, we need skills and techniques to invest in, understand, and manage the power at our fingertips.learn how to:reinforce your personal leverage as a trusted teammate to achieve the roles, opportunities, and impact that you’d like to have with your careerrecognize and estimate the impact of engineering choices on people’s privacy, physical safety, data ownership, and the environmentuse historical product outcomes to support an inclusive and impact-aware approach to choosing product goals, target customers, and production timelinesaddress objections with fellow engineers, product managers, and executives to enable change in software productsovercome logistical hurdles like brittle, convoluted code bases, bugs of unknown origin, and repositories that no one understandsanticipate and mitigate the risks associated with implementing software solutionsthe class is broken into the following key segments:tools for creating change:thespecificskills that an individual engineer can use to deliver impactful results. those include designing, socializing, and executing large technical changes, understanding complicated code bases, analyzing risks in a software system, debugging, and overcoming objections from collaborators outside the engineering team.general principles of impact:frameworks to help engineers understand what sorts of changes they can make. these include frameworks for understanding and setting product direction, considering the ethics of team and career choices, and understanding tech industry revenue and spending models.specific examples of impact:case studies and discussions about the role that technical products play in the landscape of data privacy, data ownership, physical safety, and the climate crisis.in this course, we will take a student-centered learning approach: we will follow the learning goals and broad structure described above, but the exact topics we will cover will be determined collaboratively between the instructor, course staff, and students. once the topics have been selected, students will demonstrate their learning on these topics through writing assignments, discussion participation, and coding projects in python. | tech work hasenormousimpact; our decisions can bypass regulations, affect whole populations, and influence the environment. when we don’t recognize that leverage, we push things to production with massive unconsidered repercussions. | to find fulfilling roles for ourselves and have positively impactful careers, we need skills and techniques to invest in, understand, and manage the power at our fingertips.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52553-1,mpcs 52553 web development (spring 2026),mpcs-52553-1,—,electivespecialization - application development (app-1),"course descriptionthis course is intended to prepare students with a general programming background to work on teams producing modern web applications. students will learn a strong foundation of core web technologies and protocols, an overview of the major design patterns in the history of web development, and a detailed introduction to the current industry standard. we will have an emphasis on learning from publicly-available documentation so that students are equipped to learn new techniques and frameworks in this rapidly-evolving field.specifically, the course will cover content layout and styling with html and css, dynamically generating page content on the webserver, interacting with databases, interacting with remote resources using http and rest, client-side interactivity with modern javascript, and the creation of single-page applications.this course uses agile software techniques to build real, working software each week. we will work as closely as possible on how software is developed in the industry, and all work is asynchronous, open-note, and open-internet, with collaboration, encouraged.course contentsfundamentals of html5, css3, and javascript/es6 for front-end programmingvisual design and responsive web designclient/server communicationbuilding web applicationssingle-page application developmentserver-side page renderingdatabase-driven application developmentcontent management systemsrest api developmentnetwork attacks & web app securitydebugging tools and techniquestentative weekly course scheduleweek 1 (exercise #1):web foundationshypertext markup language (html)week 2 (exercise #2):url and linkscascading style sheets (css)week 3 (exercise #3):javascript basicsjavascript programmingweek 4 (exercise #4):document object model (dom)dom - eventsasynchronous functions, promisesweek 5 (exercise #5):intro to front end programmingintroduction to reactjsintroduction to angularsingle page applicationsweek 6 (exercise #6):responsive web designbuilding web applicationsclient/server communicationweek 7 (exercise #7):web servers / intro to the lamp stacknode.js/expressjsapache/phpweek 8 (exercise #8):storage tiercookies and sessioninput and validationweek 9 (exercise #9):web servicesrest api developmentsoap apixmlweek 10:web app securitynetwork attackslarge scale applicationscloud hostingdata centersexercises:students will be expected to complete:7-9 programming exercises due the day before class1 final project due by the end of finals weekreferencesmdn web docs:https://developer.mozilla.org/en-us/php documentation:https://www.php.net/docs.phpsqlite documentation:https://www.sqlite.org/docs.htmlflask documentation:https://flask.palletsprojects.com/en/2.0.x/react documentation:https://reactjs.org/docs/getting-started.htmlangular documentationhttps://angular.io/startnodejs documentationhttps://nodejs.org/en/docs/guides/getting-started-guide/expressjs documentationhttps://expressjs.com/en/starter/installing.htmltypescript documentationhttps://www.typescriptlang.org/docs/mongodbhttps://docs.mongodb.com/w3schools documentationhttps://www.w3schools.com/ | course descriptionthis course is intended to prepare students with a general programming background to work on teams producing modern web applications. students will learn a strong foundation of core web technologies and protocols, an overview of the major design patterns in the history of web development, and a detailed introduction to the current industry standard. we will have an emphasis on learning from publicly-available documentation so that students are equipped to learn new techniques and frameworks in this rapidly-evolving field.specifically, the course will cover content layout and styling with html and css, dynamically generating page content on the webserver, interacting with databases, interacting with remote resources using http and rest, client-side interactivity with modern javascript, and the creation of single-page applications.this course uses agile software techniques to build real, working software each week. we will work as closely as possible on how software is developed in the industry, and all work is asynchronous, open-note, and open-internet, with collaboration, encouraged. | students must be fluent in at least one programming language, preferably an object-oriented language.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","students must be fluent in at least one programming language, preferably an object-oriented language.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/spring/courses/mpcs-52553-2,mpcs 52553 web development (spring 2026),mpcs-52553-2,"cohen, jeffrey (jeffcohen)",electivespecialization - application development (app-1),"course descriptionimportant: this section is somewhat different than other sections of mpcs 52553 in 2025, with less emphasis on back-end development. we will focus a bit more on front-end architecture, user experience, and the underlying http protocols.this course is intended to prepare students with a general programming background to work on teams producing modern web applications. students will learn a strong foundation of core web technologies and protocols, an overview of the major design patterns in the history of web development, and a detailed introduction to the current industry standard. we will have an emphasis on learning from publicly-available documentation so that students are equipped to learn new techniques and frameworks in this rapidly-evolving field.specifically, the course will cover content layout and styling with html and css, asynchronous programming models, constraints of single-threaded event-driven programming, interacting with remote resources using http and rest, client-side interactivity with modern javascript, and the creation of single-page applications with javascript frameworks like react.this course uses agile software techniques to build real, working software each week. we will work as closely as possible on how software is developed in the industry. all homework and quizzes are asynchronous, open-note/open-internet, but must comply with the mpcs honor code.note: this section is in-person, and attendance is paramount. lectures are generally not available via zoom or recording. students who must miss a class due to illness are encouraged to catch up on material from classmates.textbooksthere are no required textbooks, but i do recommendhttps://store.wizardzines.com/products/http-learn-your-browsers-languagefor $12. all other reference material is freely available online.course outlinefundamentals of html5, css3, and javascript/es6 for front-end programmingvisual design and responsive web designbuilding web applicationsevent-driven paradigmsasynchronous programmingsingle-page application development with reactserver-side page rendering with pythondebugging tools and techniquestentative weekly course scheduleweek 1:web foundationshypertext markup language (html)week 2:url and linkscascading style sheets (css)responsive web designweek 3:javascript basicsjavascript programmingweek 4:document object model (dom)dom - eventsformshttp mechanics and api callsweek 5:holding state in js applicationshttp is stateless!cookiesweek 6:es7 classesreactjs part 1week 7:reactjs, part 2holding state in react applicationsconcepts of state vs representationjsx language detailsweek 8:storage tiercookies and sessioninput and validationweek 9:full-stack live demo with ruby on railsthe future of web developmentcourse work:students will be expected to complete:4 programming exercises due the day before class5 online/async quizzesreferencesmdn web docs:https://developer.mozilla.org/en-us/php documentation:https://www.php.net/docs.phpsqlite documentation:https://www.sqlite.org/docs.htmlflask documentation:https://flask.palletsprojects.com/en/2.0.x/react documentation:https://reactjs.org/docs/getting-started.htmlnodejs documentationhttps://nodejs.org/en/docs/guides/getting-started-guide/w3schools documentationhttps://www.w3schools.com/ | important: this section is somewhat different than other sections of mpcs 52553 in 2025, with less emphasis on back-end development. we will focus a bit more on front-end architecture, user experience, and the underlying http protocols. | this course is intended to prepare students with a general programming background to work on teams producing modern web applications. students will learn a strong foundation of core web technologies and protocols, an overview of the major design patterns in the history of web development, and a detailed introduction to the current industry standard. we will have an emphasis on learning from publicly-available documentation so that students are equipped to learn new techniques and frameworks in this rapidly-evolving field.specifically, the course will cover content layout and styling with html and css, asynchronous programming models, constraints of single-threaded event-driven programming, interacting with remote resources using http and rest, client-side interactivity with modern javascript, and the creation of single-page applications with javascript frameworks like react.this course uses agile software techniques to build real, working software each week. we will work as closely as possible on how software is developed in the industry. all homework and quizzes are asynchronous, open-note/open-internet, but must comply with the mpcs honor code.","students must be fluent in at least one programming language, preferably an object-oriented language.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-55001-1,mpcs 55001 algorithms (winter 2026),mpcs-55001-1,"brady, geraldine (gb52)",core theory,"course descriptionthe focus of this course is on the design and analysis of efficient algorithms, through the study of various algorithmic problems in different topics. weekly homework assignments in theory and programming develop strong problem-solving skills. in addition to solving interesting homework problems employing various algorithmic techniques, students learn to implement their algorithmic ideas in python in solving a programming problem each week. at the end of the course, the theory of np-completeness is introduced, and some of the many interesting and important problems for which there are no known efficient algorithms are presented. the course goal is to teach students the skills to design new algorithms and to understand both mathematical and applied aspects of algorithm efficiency and correctness. hands-on work in algorithm design and original homework problems written specially for this course are student favorites.course contenttopics include design techniques: divide-and-conquer; randomization; dynamic programming; some common data structures used to speed up the the performance of many algorithms: hash tables, heaps, and binary search trees; a series of interesting graph problems on graph search, shortest paths; minimum spanning trees, and network flow; and finally an introduction to linear programming, an algorithmic technique which is widely used in optimization and in industry applications of algorithms. the course concludes by introducing the theory of np-completeness and presenting some np-complete problems and interesting reduction techniques used in their study.courseworklectures and class discussion: students are responsible for all material presented in lectures/class meetings.homework: all students are required to submit weekly homework to pass the course. weekly homework assignments will be posted after class and are due the day before class on the following week. theory homework must be submitted electronically in latex. homework will include a weekly programming assignment in python.exams: midterm exam (week 5) and final exam (week 10). there will be no make-up exams.quizzes: weekly quizzes will be given at the beginning of class, starting with week 2.course gradethe course grade is based on homework and exams:homework assignments: 12%quizzes: 8%midterm exam: 30%final exam: 50%textbooksintroduction to algorithms(third edition) by t. h. cormen, c. e. leiserson, r. l. rivest, and c. stein (isbn 978-0-262-03384-8);algorithmsby s. dasgupta, c.h. papadimitriou, and u. v. vaziran (isn 978-0073523408);algorithm designby j. kleinberg and e. tardos (isbn 0-321-29535-8). | the focus of this course is on the design and analysis of efficient algorithms, through the study of various algorithmic problems in different topics. weekly homework assignments in theory and programming develop strong problem-solving skills. in addition to solving interesting homework problems employing various algorithmic techniques, students learn to implement their algorithmic ideas in python in solving a programming problem each week. at the end of the course, the theory of np-completeness is introduced, and some of the many interesting and important problems for which there are no known efficient algorithms are presented. the course goal is to teach students the skills to design new algorithms and to understand both mathematical and applied aspects of algorithm efficiency and correctness. hands-on work in algorithm design and original homework problems written specially for this course are student favorites. | course contenttopics include design techniques: divide-and-conquer; randomization; dynamic programming; some common data structures used to speed up the the performance of many algorithms: hash tables, heaps, and binary search trees; a series of interesting graph problems on graph search, shortest paths; minimum spanning trees, and network flow; and finally an introduction to linear programming, an algorithmic technique which is widely used in optimization and in industry applications of algorithms. the course concludes by introducing the theory of np-completeness and presenting some np-complete problems and interesting reduction techniques used in their study.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),mpcs 50103 discrete math (immersion math) or a passing score on the mpcs math placement exam. core programming (completed or concurrently taking) or a core waiver for programming.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-55001-2,mpcs 55001 algorithms (winter 2026),mpcs-55001-2,"agarwal, ishan (ishanagarwal)",core theory,"course overview [watch video]syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class. there may be small changes in this iteration of the class.course description:this course is an introduction to the fundamental techniques used to design algorithms for a wide range of classic problems. you will learn how to use these basic heuristics to design algorithms to solve these classic problems efficiently, as well as variants of these problems that may arise in various applications. through this process you will gain familarity with the most important and common algorithms which we will study as examples that make use of several basic algorithm design techniques. you will also learn to think about the time and space complexity of algorithms and will learn how to reason about asymptotic complexity. we will not only see how to design algorithms, but how to reason about them and prove that they work, as well as prove guarantees about their runtime.learning objectives:to provide students with understanding of, and practice in usingthe most fundamental design tools in an algorithmist's toolkit(greedy, divide and conquer, dynamic programming, using randomization, how to think about algorithms on graphs, reductions, etc.)to provide students familiarity withthe most commonly used fundamental algorithms(searching, sorting, median finding, and some of the most common example applications of all the techniques mentioned above. also fundamental graph algorithms like bfs, dfs, shortest path finding, minimum spanning tree computation, etc)to give students an understanding oftime and space complexity of algorithms. specifically: how to calculate the asymptotic runtime of an algorithm.to enable students toreason about algorithms and their run time. specifically, how to prove the correctness of, as well as runtime guarantees about, the algorithms that we study in this class as well as novel algorithms that you might encounter.to provide students experience not only in designing algorithms, but also inexpressing these algorithms in plain english/ easy to read pseudocode, at an appropriate level of detail.course contents:this list of topics is tentative and it is quite possible that we will cover only a subset of these. please check the syllabus for a detailed course schedule.algorithms, pseudocode and runtime:what is an algorithm? how to express algorithms in pseudocode/ regular english with an appropriate level of detail. how to reason about the correctness of algorithms as well as their run time.recursion:the fundamental idea of recursive agorithms. some examples such as the tower of hanoi problem. examples of the divide and conquer heuristic (merge sort, quick sort, median finding in linear time, finding the closest pair of points in the plane, karatsuba's algorithms for multiplication).asymptotic complexity:big-o, omega and theta. solving recurrences by substitution (induction). recursion trees. the master theorem.dynamic programming:examples: rod cutting problems, longest common subsequence, knapsack.greedy algorithms:examples: interval scheduling, huffman codesa brief introduction to randomized algorithms and approximation algorithms:basic notions and some introductory examples. the notion of expected run time, high probability bounds and approximation ratios.graph algorithms:breadth first search, depth first search, directed acyclic graphs and topological sort. decomposing any graph into a directed acyclic graph of its strongly connected components. minimum spanning trees. prim's and kruskal's algorithm for computing minimum spanning trees. shortest path finding: dijkstra's, bellman-ford and floyd-warshall algorithms. depending on time: max flow min cut theorem and computing matchings in graphs.algorithmic complexity:computability, complexity, complexity classes. p and np. reductions both as a tool for proving hardness but also as an invaluable algorithm design tool.special topics depending on time: possible topics include computation with privacy (cryptography, e.g. secure multi-party computation) or designing algorithms when agents may have selfish motives to act in their own best interest (algorithmic game theory and mechanism design).course activities:classes:classes will typically consist of a lecture on the topic interspersed with problem solving/ related activities.office hours:regular office hours will be held by the course instructor as well as tas. attendance is optional but highly reccomended.problem solving sessions:regular problem solving sessions will be held for the purpose of giving the students guided problem solving practice. attendance is optional but highly reccomended.course materials:the class is intended to be self contained. complete lecture notes will be provided for all the lectures. all problems in the problem sets will also be stated in full.the course textbook isintroduction to algorithms (third edition) by t. h. cormen, c. e. leiserson, r. l. rivest, and c. stein (isbn 9780262-033848).jeff erickson's textbook, which is availablehere, is also an excellent resource that is available for free online.evaluation:the course grade will be based on weekly homeworks, a midterm and a final exam. homework will be focussed on written exercises where you must design an algorithm to solve a problem, express the algorithm clearly, prove it's correctness and then prove a suitable bound on it's asymptotic time complexity. there may be occasional programming exercises.we will adopt a specifications grading framework: that is you will be provided detailed instructions for each task on the homework, as well as an opportunity to resubmit your homework after receiving feedback. the homework will be graded qualitatively. the final letter grade will depend upon how many of the homework problems you satisfactorily complete (including after the opportunity to revise your work) and the exam score (which will take into account both midterm and final scores). more details can be found on the syllabus.prerequisites:the main prerequistite is some mathematical maturity (in particular a good understanding of the material covered in the discrete mathematics course). no knowledge of algorithms is assumed. some basic programming experience (in any modern programming language) may be useful for the programming exercises. | course overview [watch video]syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class. there may be small changes in this iteration of the class.course description: | this course is an introduction to the fundamental techniques used to design algorithms for a wide range of classic problems. you will learn how to use these basic heuristics to design algorithms to solve these classic problems efficiently, as well as variants of these problems that may arise in various applications. through this process you will gain familarity with the most important and common algorithms which we will study as examples that make use of several basic algorithm design techniques. you will also learn to think about the time and space complexity of algorithms and will learn how to reason about asymptotic complexity. we will not only see how to design algorithms, but how to reason about them and prove that they work, as well as prove guarantees about their runtime.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),mpcs 50103 discrete math (immersion math) or a passing score on the mpcs math placement exam. core programming (completed or concurrently taking) or a core waiver for programming.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-53120-1,mpcs 53120 applied data analysis (winter 2026),mpcs-53120-1,"singh sahota, davender (dsahota)",electivespecialization - high performance computing (hpc-2),"this course provides a self-contained introduction to computational data analysis from an applied perspective. it is intended as a standalone course for students who are not pursuing the full data analysis sequence in the mpcs.as such, students who have taken mpcs 53110 foundations of computational data analysis and received a grade of b or higher should take mpcs 53111 machine learning. students that have taken or are currently enrolled in mpcs 53111 machine learning cannot register for this class.the course will cover topics in basic probability theory, statistical inference, and basic machine learning models typically used in data analysis. each topic will be accompanied by example illustrations using python. many of the topics covered form the basis of almost all algorithms and machine learning methods used in data analysis. as an applied course, the emphasis will be on the use of these tools to solve problems.textbook:an introduction to statistical learningoptional:the elements of statistical learning;python for data analysis: data wrangling with pandas, numpy, and ipython;deep learning with pythoncourse contents:elementary probability and statisticsprobability theoryrandom variablesdistributions and densitiessoftware platformsvariables, objects, and functions in pythonworking with data framesdata pre-processing and visualizationlinear models/statistical inferenceleast-squares regressionlogistic regressionhypothesis testingmodel assessment and selectionmachine learning modelsperceptron classifierneural networksdecision trees/random forestssupport vector machinesclusteringunsupervised clusteringrecommender systemsintroduction to deep learningcomputer visionnatural language processingevaluation:homework assignments (12-14)course project | this course provides a self-contained introduction to computational data analysis from an applied perspective. it is intended as a standalone course for students who are not pursuing the full data analysis sequence in the mpcs.as such, students who have taken mpcs 53110 foundations of computational data analysis and received a grade of b or higher should take mpcs 53111 machine learning. students that have taken or are currently enrolled in mpcs 53111 machine learning cannot register for this class. | the course will cover topics in basic probability theory, statistical inference, and basic machine learning models typically used in data analysis. each topic will be accompanied by example illustrations using python. many of the topics covered form the basis of almost all algorithms and machine learning methods used in data analysis. as an applied course, the emphasis will be on the use of these tools to solve problems.textbook:an introduction to statistical learning","knowledge of python is required for this class.this course requires competency in unix, linux, and github. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed or core waiver for programming. mpcs 50103 discrete mathematics completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51044-1,mpcs 51044 c/c++ for advanced programmers (winter 2026),mpcs-51044-1,"spertus, michael (spertus)",elective,"course descriptionthis course covers the major features of c++ in an accelerated fashion suitable both for experienced c++ programmers and programmers who are new to c++ as described in the prerequisites below. the course teaches how to get the most out of the current c++20 language, which ""feels like a new language."" it also discusses how to workaround in older versions of c++.a dominant theme of the course is how to use the unique features of c++ to operate at a high-level of abstraction to support powerful design idioms and improve maintainability while also achieving the kind of performance and low-level control usually associated with lower-level languages such as c and even assembler language.course contents•great ideas of c++ (overview)•classes and object-orientation•classes and object-orientation (cont), c++ libraries (including boost)•overloading, memory management, and their associated (far from obvious) consequences and idioms•low-level and performance programming•templates, specialization, and concepts•concurrency in c++, including cache-conscious programming•concurrency in c++ (cont)•type traits and introduction to metaprogramming•overview of c++ best practicescourseworkweekly programming assignments make up 2/3 of the grade. the student can choose between taking a final or writing an independent project for the remaining 1/3 of the grade.course textbookno textbooks required, but please download a copy of the c++ standard fromhttp://wg21.link/std. a list of useful books and websites will be made available.about the instructor""as the founder of boost (www.boost.org), the first and best known c++ library repository, and also as a long-time voting member of the c++ standards committee, i have come into contact with many of the notables of the c++ world. mike spertus is right up there with the best of them."" -- beman dawesmichael spertus is a senior principal engineer for dev tools at amazon and was previously a fellow at symantec. he is also a member of the c++ standards committee, where he has authored over 30 standard proposals. he has been involved in c/c++ languages since the 1980s, when he helped write one of the first commercial ms-dos c compiler for the ibm pc-at. | this course covers the major features of c++ in an accelerated fashion suitable both for experienced c++ programmers and programmers who are new to c++ as described in the prerequisites below. the course teaches how to get the most out of the current c++20 language, which ""feels like a new language."" it also discusses how to workaround in older versions of c++. | a dominant theme of the course is how to use the unique features of c++ to operate at a high-level of abstraction to support powerful design idioms and improve maintainability while also achieving the kind of performance and low-level control usually associated with lower-level languages such as c and even assembler language.","students are not required to know c++ in order to take this class. this class is geared for programmers in all languages, even those experienced in c++.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51083-1,mpcs 51083 cloud computing (winter 2026),mpcs-51083-1,"vasiliadis, vasilios (vas)",electivespecialization - application development (app-2),"cloud computing is being widely adopted by enterprises of all sizes due to the low initial investment required, attractive operating costs, and elastic capacity that can best serve the highly variable demands of modern applications. software engineers must be familiar with cloud computing technologies since many new applications they develop will be deployed “in the cloud”, and existing applications will often require integration with cloud-hosted services to take advantage of new capabilities.this course provides an introduction to cloud computing with specific consideration for application development in two contexts: highly scalable (or so-called “web-scale”) applications, and enterprise applications in a hybrid environment comprising both on-premises and cloud infrastructure. we will focus primarily on infrastructure and platform services, and will introduce software-as-a-service from the perspective of a consuming application. the course will emphasize practical applications of cloud computing technologies, with sufficient exploration of their theoretical underpinnings to inform architectural, design, and implementation decisions. we will use commercial cloud offerings provided by amazon web services to build and deploy ""real” cloud-hosted applications.please refer to the course website abovefor details on course content and logistics. | cloud computing is being widely adopted by enterprises of all sizes due to the low initial investment required, attractive operating costs, and elastic capacity that can best serve the highly variable demands of modern applications. software engineers must be familiar with cloud computing technologies since many new applications they develop will be deployed “in the cloud”, and existing applications will often require integration with cloud-hosted services to take advantage of new capabilities.this course provides an introduction to cloud computing with specific consideration for application development in two contexts: highly scalable (or so-called “web-scale”) applications, and enterprise applications in a hybrid environment comprising both on-premises and cloud infrastructure. we will focus primarily on infrastructure and platform services, and will introduce software-as-a-service from the perspective of a consuming application. the course will emphasize practical applications of cloud computing technologies, with sufficient exploration of their theoretical underpinnings to inform architectural, design, and implementation decisions. we will use commercial cloud offerings provided by amazon web services to build and deploy ""real” cloud-hosted applications.please refer to the course website abovefor details on course content and logistics. | core programming completed.mpcs 52553 web development (not required, but strongly recommended)","this course assumes no prior knowledge of cloud computing. programming assignments require familiarity with python and use of linux commands, as well as simple shell scripts. we will use the boto3 library to access amazon web services, and most assignments, including the capstone project, will make use of flask, a python-based micro-framework for web applications. a brief overview of boto3 and the web framework will be provided; additional concepts will be introduced as they are needed to complete assignments. knowledge of web application development is not required, but students with no web development experience will find some assignments very challenging. ideally, students should understand the fundamentals of web apis in general, and the rest approach in particular. an understanding of database concepts, such as referential integrity and acid properties, is also useful.note: students in past courses have struggled to keep up with homework assignments due to limited experience with python and knowledge of the linux command line. see the notes on this page for more detail on expected knowledge: http://home.uchicago.edu/vas/#prerequisites. if you have doubts about your proficiency in these areas please talk with the instructor before signing up for the course.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"core programming completed.mpcs 52553 web development (not required, but strongly recommended)"
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51300-1,mpcs 51300 compilers (winter 2026),mpcs-51300-1,"kenneth samuels, lamont (lamonts)",core systemselective,"course descriptionat a high level, students should come out of the class with an understanding of:parts of compiler technology that are useful in general (i.e., scanning/regexes/parsing) and algorithmic ideas that come up in other contexts (e.g., graph algorithms - dominance and coloring, for example - and lattice algorithms).why some aspects of optimization are hard, both in terms of algorithmic complexity and practical concerns (e.g., supporting separate compilation), and how choices made about the language semantics can make this harder or easier.how compile time vs. expected performance gain affects the design of compilers, especially jit compilers.course organizationthis course meets once a week for lectures and once a week for an optional ta session. even if not recorded, attendance in class is strongly encouraged. most of the coursework revolves around 4 homework assignments, as the primary focus will be for students to code. there will be one presentation (week 6) and one final exam (week 11). the course calendar, including the contents of each lecture and programming assignment due dates, is shown at the end of this page.bookkeith cooper and linda torczon. “engineering a compiler.” elsevier, 2011.gradingthe final grade will be based on the following:exercises: 15%programming assignments: 50%midterm exam (project presentation): 10%final exam: 25%exercisesthree individual exercises will be assigned during the quarter. they will constitute 15% of the course grade.compiler programming projectwe will assign six programming assignments over the course of the term. you can choose to work on the programming assignment alone, however, it is strongly recommended to work by group of 2 people. you will need to inform us of your choice by week 2. the goal of this assignment will be to make you create your own compiler.the assignments will be interconnected; they will guide you to the creation of your own compiler. they will constitute 50% of the course grade.the assignments will be due on weeks 3, 5, 7, 8, 9, and 10.week 6: a presentation of your work on your own compiler. this presentation will not be longer than 10 minutes the grade of this presentation will constitute 10% of the course grade.late submissionprorated points will be applied according to the number of late days.1 day late: 75% of the grade will be considered.2 days late: 50% of the grade will be considered.3 days late: 25% of the grade will be considered.after 3 days, no assignment will be accepted.examwe will be giving a final exam during at week 11. the final exam is worth 25% of the grade.the final exam will be an open-book written exam on the whole content of the class.the questions of this exam will be on the content of the lecture and the compiler project.course contentsweek 1: general introduction to compiler structurewhat is a compiler (e.g., gcc, msvc)? how does source code get transformed into instructions that a processor or virtual machine can execute? we'll cover the basics of compiler structure and review relevant aspects of computer architecture.week 2: lexical analysis and parsingwe'll cover how a textual programming language is processed and introduce tools that make this job easier.week 3: intermediate representationswe'll cover control flow, dominance, intermediate representations, and related topics to understand how a program is represented inside of the compiler.week 4: llvmwe'll discuss llvm in particular to give you enough practical background to use llvm to create a compiler.week 5: pointers and optimizationswe'll discuss pointers and data-flow/lattice algorithms, plus function inlining and peephole optimizations.week 6: mid-term presentationsall members of the class will present their current work. as time allows, we'll cover exception handling and co-routines.week 7: loop optimizations and morewe'll continue discussing peephole optimizations and discuss the topic of undefined behavior. we'll then talk about loop optimizations.week 8: lower-level thingswe'll discuss vectorization, instruction selection, and register allocation.week 9: virtual machineswe'll discuss virtual machines, garbage collection, and related topics. essentially, you'll learn how the javascript engine inside your web browser works.week 10: debuggingwe'll discuss debugging technology, including instrumentation-based debugging (e.g., llvm sanitizers). we'll also review for the final exam.week 11: final examgrading group (% of the whole grade)95-100: a90-95: a-85-90: b+80-85: b75-80: b-70-75: c+< 70: dealt on a case-by-case basis | at a high level, students should come out of the class with an understanding of: | this course meets once a week for lectures and once a week for an optional ta session. even if not recorded, attendance in class is strongly encouraged. most of the coursework revolves around 4 homework assignments, as the primary focus will be for students to code. there will be one presentation (week 6) and one final exam (week 11). the course calendar, including the contents of each lecture and programming assignment due dates, is shown at the end of this page.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-53001-1,mpcs 53001 databases (winter 2026),mpcs-53001-1,"almhana, rafi (ralmhana)",core systemselective,"course overview [watch video]course descriptionin this course students will learn database design and development and will build a simple but complete web application powered by a relational database.we start by gathering requirements and showing how to model a relational database using an entity-relationship diagram (erd). concepts covered include entity sets and relationships, using keys as a unique identifier for each object in an entity set, one-one, many-one, and many-many relationships as well as translational rules from conceptual modeling (erd) to relational table definitions. we will examine the relational model and functional dependencies along with their application to the methods for improving database design: normal forms and normalization.after designing and modeling their database, students will learn the universal language of relational databases: sql (structured query language). we will first introduce relational algebra, the theoretical foundation of sql and then examine in detail the two main aspects of sql: data definition language (ddl) and data manipulation language (dml). concepts covered include subqueries, aggregation, various types of joins, functions, triggers and stored procedures. students will then learn about web connectivity, as they build a simple front-end for their application in order to interact with their database online. finally, we will provide an overview of related topics such as data warehousing, big data, nosql and newsql databases.students will gain significant experience with writing and reading sql queries and understanding the design and function of relational databases throughout the course in the detailed in-class discussions, online homework, midterm and the real-world individual project.course contents• requirements gatheringentity-relationship model and designdatabase designrelational modelfunctional dependenciesnormal forms and normalizationrelational algebrasql: schema definition, simple queriessubqueries, aggregation, modificationsjoins, views, indexing, constraintstransactions, acid propertiesauthorizationtriggersfunctions/stored proceduresdatabase connectivitybasic web programmingdata warehousing overviewbig data/nosql overviewcourseworkhomework (weekly) (~15%)multi-part project (weekly) (~50%)midterm (~30%)class participation (~5%)recommended textbooksdatabase system concepts seventh editionhttps://www.db-book.com/db7/index.html | in this course students will learn database design and development and will build a simple but complete web application powered by a relational database.we start by gathering requirements and showing how to model a relational database using an entity-relationship diagram (erd). concepts covered include entity sets and relationships, using keys as a unique identifier for each object in an entity set, one-one, many-one, and many-many relationships as well as translational rules from conceptual modeling (erd) to relational table definitions. we will examine the relational model and functional dependencies along with their application to the methods for improving database design: normal forms and normalization. | after designing and modeling their database, students will learn the universal language of relational databases: sql (structured query language). we will first introduce relational algebra, the theoretical foundation of sql and then examine in detail the two main aspects of sql: data definition language (ddl) and data manipulation language (dml). concepts covered include subqueries, aggregation, various types of joins, functions, triggers and stored procedures. students will then learn about web connectivity, as they build a simple front-end for their application in order to interact with their database online. finally, we will provide an overview of related topics such as data warehousing, big data, nosql and newsql databases.students will gain significant experience with writing and reading sql queries and understanding the design and function of relational databases throughout the course in the detailed in-class discussions, online homework, midterm and the real-world individual project.",this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation. continuing students who previously attended the mpcs unix bootcamp have covered the required material. continuing students who did not attend the mpcs unix bootcamp may review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.,this class is scheduled at a time that does not conflict with any other classes this quarter.,bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (new) placement: pass imasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced),core programmingthis course can not be taken if you are taking or have already completed mpcs 53020 foundations of database systems. there is significant overlap between the two courses.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-52040-1,mpcs 52040 distributed systems (winter 2026),mpcs-52040-1,—,core systemselective,"course descriptionthis course focuses on the theory and practice of distributed systems. modern applications and services are increasingly distributed due to growing data sizes, plateauing sequential processing power, and the enormous number of connected devices. virtually all web, mobile, and even pc applications now rely on networked services, calling out to backend servers to perform various functions, and many individual applications are implemented as a collection of cooperating processes or services. for example, distributed systems are used in massively multiplayer online games, cloud services, e-commerce and banking systems, peer-to-peer networks, social network, self-driving cars, telecommunication systems, and distributed databases and file systems.in this course we will explore the need for distributed systems, understand characteristics of distributed systems, investigate where distributed systems are used, review the unique challenges of distributed systems, analyze solutions for common distributed systems problems, and gain practical knowledge of the systems and algorithms for building real distributed systems.course contentsthe course will cover the following topics:·distributed architectures·processes and threads·networking and communication mechanisms·naming and mapping·synchronization·distributed time and ordering·consistency·fault tolerance·distributed consensus·distributed data·data intensive computingcourseworkthe course will include weekly homework, two exams, and one project.the weekly assignments will include a mix of practice problems and programming assignments designed to reinforce materials covered in lectures.the project will be a 4-week team project that provides the opportunity to apply skills learned in lectures to develop a distributed system.the final grade will be determined as follows:·homework assignments: 20%·project: 35%·midterm exam: 10%·final exam: 35%textbookthe course will use the following textbook:maarten van steen and andrew tanenbaum, distributed systems 3rdedition | course descriptionthis course focuses on the theory and practice of distributed systems. modern applications and services are increasingly distributed due to growing data sizes, plateauing sequential processing power, and the enormous number of connected devices. virtually all web, mobile, and even pc applications now rely on networked services, calling out to backend servers to perform various functions, and many individual applications are implemented as a collection of cooperating processes or services. for example, distributed systems are used in massively multiplayer online games, cloud services, e-commerce and banking systems, peer-to-peer networks, social network, self-driving cars, telecommunication systems, and distributed databases and file systems.in this course we will explore the need for distributed systems, understand characteristics of distributed systems, investigate where distributed systems are used, review the unique challenges of distributed systems, analyze solutions for common distributed systems problems, and gain practical knowledge of the systems and algorithms for building real distributed systems.course contentsthe course will cover the following topics:·distributed architectures·processes and threads·networking and communication mechanisms·naming and mapping·synchronization·distributed time and ordering·consistency·fault tolerance·distributed consensus·distributed data·data intensive computingcourseworkthe course will include weekly homework, two exams, and one project.the weekly assignments will include a mix of practice problems and programming assignments designed to reinforce materials covered in lectures.the project will be a 4-week team project that provides the opportunity to apply skills learned in lectures to develop a distributed system.the final grade will be determined as follows:·homework assignments: 20%·project: 35%·midterm exam: 10%·final exam: 35%textbookthe course will use the following textbook: | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51250-1,mpcs 51250 entrepreneurship in technology (winter 2026),mpcs-51250-1,—,elective,"many of the most successful companies have been created by technologists, but many technologists fail to consider entrepreneurship as a viable career pathway because it is difficult to gain exposure to entrepreneurship. students in this class will experience, firsthand, new product development based on an idea conceived of by your group. your group will nurture your idea by clearly defining your product, obtaining market feedback, building an initial proof-of-concept, and pitching to investors. while there is no requirement that your product become a new technology venture, this class is meant to serve as a launchpad for the first three months of a startup for those interested in pursuing their ideas further. the fundamental belief, however, is that the entrepreneurial experience provided in this class can support you whether you develop new products in your large corporate enterprise or do pursue entrepreneurship in a startup of your own, and all students are encouraged to consider this course no matter your career trajectory or level of technical proficiency.the class is broken into the following key segments:weeks 1 - 4:product definition and market feedbackweeks 5 - 7:minimum viable product (mvp) developmentweeks 8 - 10:product demo and investor pitchthe mvp component of the course is flexible. students have run the gamut from building algorithms in excel to building a mobile app from scratch to advance their idea forward. the class is generally graded on how much you grow the product and your own understanding of it in the quarter. complex technology projects are not discouraged or encouraged, rather, the focus is simply on growth and using some element of technology and feedback from the marketplace to advance your idea forward. | many of the most successful companies have been created by technologists, but many technologists fail to consider entrepreneurship as a viable career pathway because it is difficult to gain exposure to entrepreneurship. students in this class will experience, firsthand, new product development based on an idea conceived of by your group. your group will nurture your idea by clearly defining your product, obtaining market feedback, building an initial proof-of-concept, and pitching to investors. while there is no requirement that your product become a new technology venture, this class is meant to serve as a launchpad for the first three months of a startup for those interested in pursuing their ideas further. the fundamental belief, however, is that the entrepreneurial experience provided in this class can support you whether you develop new products in your large corporate enterprise or do pursue entrepreneurship in a startup of your own, and all students are encouraged to consider this course no matter your career trajectory or level of technical proficiency. | the class is broken into the following key segments:","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-53110-1,mpcs 53110 foundations of computational data analysis (winter 2026),mpcs-53110-1,"chaudhary, amitabh (amitabh)",electivespecialization - data analytics (da-1),"foundations of computational data analysis covers mathematical prerequisites for the data analytics specialization courses in machine learning, and large-scale data analytics (mpcs 53111 and 53112): basic statistics and linear algebra. topics in statistics include discrete and continuous random variables, discrete and continuous probability distributions, variance, covariance, correlation, sampling and distribution of the mean and standard deviation of a sample, central limit theorem, confidence intervals, maximum likelihood estimators, and hypothesis testing. topics in linear algebra include gaussian elimination, matrix transpose and matrix inverse, eigenvectors and eigenvalues, and singular value decompositions. in some of the exercises we'll use python to compute and/or visualize data. | foundations of computational data analysis covers mathematical prerequisites for the data analytics specialization courses in machine learning, and large-scale data analytics (mpcs 53111 and 53112): basic statistics and linear algebra. topics in statistics include discrete and continuous random variables, discrete and continuous probability distributions, variance, covariance, correlation, sampling and distribution of the mean and standard deviation of a sample, central limit theorem, confidence intervals, maximum likelihood estimators, and hypothesis testing. topics in linear algebra include gaussian elimination, matrix transpose and matrix inverse, eigenvectors and eigenvalues, and singular value decompositions. in some of the exercises we'll use python to compute and/or visualize data. | b+ or above in mpcs core programming class or a core waiver for programming. 51042 python programming or mpcs 51046 intermediate python programming recommended; all other mpcs core programming classes allowed with b+ or above and prior knowledge of python.b or above in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms. cannot be taken concurrently with mpcs 55001 algorithms.students that have taken cmsc 25300/35300 can waive mpcs 53110 and do not need to take the exam. students that have taken cmsc 25400/35400 are not eligible to take mpcs 53110.","univariate calculus and basic multivariate calculus (double integrals, partial derivatives).students who have taken cmsc 25300/25400 are not eligible to take this class.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,b+ or above in mpcs core programming class or a core waiver for programming. 51042 python programming or mpcs 51046 intermediate python programming recommended; all other mpcs core programming classes allowed with b+ or above and prior knowledge of python.b or above in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms. cannot be taken concurrently with mpcs 55001 algorithms.students that have taken cmsc 25300/35300 can waive mpcs 53110 and do not need to take the exam. students that have taken cmsc 25400/35400 are not eligible to take mpcs 53110.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51400-1,mpcs 51400 functional programming (winter 2026),mpcs-51400-1,—,core systemselective,"course descriptionthis course will provide an introduction to software development in the functional paradigm, with a focus on pure, statically-typed functional programming. the functional paradigm isn't a language or technology--it's an entire school of thought on what a computer program is and how to write one. it has a long history, based on a model of computation developed by the mathematician alonzo church in the 30s. the functional paradigm contrasts with the imperative paradigm, which most of today's existing software is written in. but although the functional paradigm has yet to go fully mainstream, the imperative world has been taking most of its bleeding-edge ideas about software design from the functional world, particularly in recent years. and to all appearances, that trend is on the rise, with expansive new purely functional software and tooling currently under development at companies like facebook, google, microsoft, github, and countless others. in addition, the library ecosystem for languages such as haskell and ocaml has become sufficiently rich and extensive that an increasing proportion of today's successful software companies (including jane street capital and input-output) have been able to develop their entire code base purely functionally.there are a lot of ways to characterize the difference between programming in the functional style and programming in the imperative style. but just to whet your appetite, the language we will be working with has the following distinctive features:+ every data structure is immutable+ there is no shared state between functions+ every expression must be well-typed at compile time+ types can be inferred, and therefore need not be declared+ data modeling is done using algebraic data types+ functions can be made general-purpose with polymorphic types+ interfaces are built using ad-hoc polymorphism, a.k.a. 'type classes'the language of this course is haskell. haskell is arguably the main agenda-setter for the functional paradigm, and it is also somewhat challenging to learn outside of a class. at least in the opinion of this instructor, knowing your way around haskell puts you in an excellent position to get going with other functional languages. that said, although we will spend a lot of time becoming intimately acquainted with haskell, the main goal of this class is to focus on big-picture concepts that can be readily ported to other languages and technologies--in some cases including languages with limited support for the functional style. the functional style offers a wide array of data structures, patterns, and techniques that are nearly indispensable for writing clean, modular, maintainable, bug-free code that runs blazingly fast. these are all methods that any software developer can benefit from having in their personal toolkit.course contentthe week-by-week breakdown of topics will be as follows:week 1: haskell basics, linked lists, recursionweek 2: point-free, lazy evaluation, algebraic datatypesweek 3: type classes, basic io, maybe and eitherweek 4: functors, intro to applicatives and monadsweek 5: more monads, a little more ioweek 6: midterm exam, the state monadweek 7: intro to applicative parsingweek 8: monad transformersweek 9: lazy evaluation, conclusion, final projectcourseworkwork for the course consists of short weekly readings, weekly code exercises, a midterm exam, and a final project. the weekly exercises are intended to be challenging but hopefully also fun. they will not presuppose any prior familiarity with functional programming. the bulk of the final project is written piecemeal every week as part of the homework, with the final two weeks set aside for finalizing it.course textbooksthe main text for this class is the homework assignments, which are intended to be read week by week, like a textbook. however, we will also be reading the first half offinding success (and failure) in haskell, by julie moronuki and chris martin, which can be purchased here:https://leanpub.com/finding-success-in-haskellmoronuki and martin's book is simply incredible, and highly recommended for anyone who would like to get started with haskell.we won't be using any general textbook in this class, but if you are looking for a general-purpose haskell book to use for reference, graham hutton'sprogramming in haskell(second edition) is excellent:http://www.cs.nott.ac.uk/~pszgmh/pih.html | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/ | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-57200-1,mpcs 57200 generative ai (winter 2026),mpcs-57200-1,"spertus, michael (spertus)",electivespecialization - data analytics (da-2),"overviewrecent generative ai systems such as chatgpt, dall-e, and github copilot have shown its applicability to a wide range of problem domains, and it is quickly becoming a valuable tool in the software developer's toolbox.this course will provide an experienced software developer with no experience in machine learning witha conceptual understanding of the basic concepts of generative aihow to build generative ai systems to generate output targeting their domain of interesthow to deploy and integrate generative ai models into production applicationsconceptshistory of generative aineural network conceptsthe fundamental equations of deep learningactivation functionstraining with gradient descentkey mathematical concepts like cross-entropy, softmax, and perplexity and their role in deep learning generative aiscaling lawsgenerative ai conceptsencoder/decoder architectures as basis for generative aithe role of the latent spacegenerative adversarial netstransformer architectures and attentionlarge language modelscustomizing generative aiwhile most engineers will not build their own production models from scratch (which typically costs tens of millions of dollars), they will need to customize them for their applicationenhanced pre-trainingfine-tuningprompt engineering and few-shot learningstrengths and weaknesses: llms are not a silver bulletcan llms reason?responsible aiincorporating generative ai into applicationsmodel deploymentlangchainthinking beyond chatbots: non-generative uses of generative ailabsgenerating text programmatically with an llmimage generation with the fashion mnist databasewith an auto-encoderimprove with a variational autoencoderaging and de-aging facesbuilding and training a very simple llm from scratchfine-tuning a modelprompt engineering playgroundresponsible ai labsgenerative adversarial netslangchaindeploying a trained model for use in productionrecommended textwhile we don't closely follow any textbook, a number of the labs and explanations follow david foster's excellent o'reilly book generative deep learning, 2nd edition (if you purchase this, make sure you get the 2nd edition). we will also look at a variety of seminal and topical papers. | recent generative ai systems such as chatgpt, dall-e, and github copilot have shown its applicability to a wide range of problem domains, and it is quickly becoming a valuable tool in the software developer's toolbox. | this course will provide an experienced software developer with no experience in machine learning with","the main prerequisite is a basic familiarity with python. we do not assume any background in machine learning or statistics.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed in any language with a b+ or better.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51087-1,mpcs 51087 high performance computing (winter 2026),mpcs-51087-1,"siegel, andrew (siegela)",electivespecialization - high performance computing (hpc-1),"course descriptionparallel programming is ubiquitous in both the largest compute clusters and the smallest, low-power embedded devices. though this has been the status quo for many years, achieving optimal parallel performance can still be a challenging, multi-disciplinary effort.in this course, we will focus on compute-intensive (rather than data-intensive) parallel programming, representative of numerical applications. computer architecture and systems will be a pervasive theme, and we will discuss how parallel apis map to the underlying hardware.we will implement and optimize c/c++ applications on large-scale, multicore cpu and gpu compute clusters. we learn widely-used parallel programming apis (openmp, cuda, and mpi) and use them to solve problems in linear algebra, monte carlo simulations, discretized partial differential equations, and machine learning.the majority of coding assignments can be completed in either c or c++. certain applications will require coding portions in pure c; however, in these cases, we will cover the requisite information for those with previous exposure to only c++. previous or concurrent courses in systems and architecture can be helpful, but no prerequisite knowledge of systems/architectures is assumed.topics:overview of cpu and gpu architecturesinstruction setsfunctional unitsmemory hierarchiesperformance metricslatency and bandwidthroofline modelingsingle-core optimizationcompiler-assisted vectorization (data-level parallelism)design patterns for cache-based optimizationmulti-threaded cpu programmingworksharing, synchronization, and atomic operationsmemory access patterns, including non-uniform memory accessthe openmp apigpu programmingthread-mapping for optimal vectorization and memory accesstask-scheduling for latency reductionthe cuda and openmp offload apisdistributed parallelismsynchronous and asynchronous communication patternsdata decompositionhybrid models for distributed multi-threaded and gpu programmingthe mpi apithroughout the course, will draw on examples from linear algebra, monte carlo simulations, discretized partial differential equations, and machine learning.courseworkthe coursework consists of several multi-week projects, with milestones due in interim weeks.grading is as follows:assignments: 50%in-class midterm: 25%in-class final: 25%the mid-term and final exams will closely align with the projects, encouraging you to engage deeply with the core concepts by working through them manually, rather than relying on code generators or tools that bypass direct interaction.textbookswe will draw on material from the following texts. none are required, but they can be helpful resources throughout your career.mattson, he, and koniges.the openmp common core. (https://mitpress.mit.edu/books/openmp-common-core)kirk and hwu.programming massively parallel processors: a hands-on approach, 3rdedition. (https://www.elsevier.com/books/programming-massively-parallel-processors/kirk/978-0-12-811986-0)gropp, lusk, and skjellum.using mpi: portable parallel programming with the message-passing interface, 3rdedition. (https://mitpress.mit.edu/books/using-mpi-third-edition) | course descriptionparallel programming is ubiquitous in both the largest compute clusters and the smallest, low-power embedded devices. though this has been the status quo for many years, achieving optimal parallel performance can still be a challenging, multi-disciplinary effort. | in this course, we will focus on compute-intensive (rather than data-intensive) parallel programming, representative of numerical applications. computer architecture and systems will be a pervasive theme, and we will discuss how parallel apis map to the underlying hardware.","familiarity with c or c++.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,mpcs 51040 - c programming or mpcs 51100 advanced programming or instructor consent.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51260-1,mpcs 51260 human-computer interaction (winter 2026),mpcs-51260-1,"wozniak, katie (fxx6927)",specialization - application development (app-2)elective,"instructor: kathryn wozniak (she/her/hers)email: k.wozniak@uchicago.eduoffice hours: before/after class and by appointment (please email me to schedule)prerequisites: core programmingcourse website: canvasdescriptionthis course explores the cognitive psychology and physiology behind humans’ interactions with their environment and how this translates to “good design” of computer-based systems, interfaces, and machines. emphasis is placed on the value of intentionally observing and analyzing the reciprocal relationship between humans and the design of systems in various contexts from a designer or engineer’s perspective. from a practical standpoint, the course addresses the role human-computer interaction (hci) plays in enhancing the day-to-day human experience and the value of a product to society, while increasing the bottom line for stakeholders. topics include perception, memory, attention, mental models, accessibility, user/interaction research methods, interface design principles, and design communication strategies.learning objectivesat the end of this class you will be able to:understand aspects of cognitive psychology and human factors engineering that apply to human-computer interaction (hci)identify components and principles of “good” (and bad) interaction designcritically analyze and evaluate human-computer interaction through empirical research methodsdesign mockups, prototypes, or revisions of interactive systems by applying hci principlesdevelop strategies for communicating design, usability, and interactivitycourse componentsclass attendanceweekly attendance is required. failure to attend class on a regular basis could result in a failing grade in the course. if time of the class sessions will not work for you to attend, you should not take this class. if you miss more than two class sessions during the quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.participation: discussion, peer review, hot topicssharing ideas, insights, and questions in response to the readings, lectures, and demos throughout the course is welcomed and highly encouraged in class and in the discussion channel. additionally, you are required to find and read at least two articles beyond the course readings on an hci “hot topic” and share a summary and reflection on those articles by the end of the course. you will also be expected to share your work and provideconstructive feedbackon others’ work throughout the course through an informal peer review process guided by the professor.lectures & demoslectures and demos will prepare you for assignments each week. lectures will cover relevant topics as listed in the schedule and will include interactive and conversational activities. demos will provide hands-on demonstrations in class on how to use design tools.quizzesweekly quizzes, aka “knowledge checks,” will help you to check your comprehension of theories, principles, and applications covered in the readings and lectures.projectfour assignments throughout the course (interaction analysis/heuristic review and report, website/system/program/app mockup and prototype, design evaluation and report, re/design and demo) build up to one culminating final report and presentation, which will demonstrate your ability to apply the course principles and topics to an authentic human-computer interaction scenario of your choice. you will identify and work with a team of 2-4 classmates for the project (all group members must collaborate on all assignments); one team member should notify the professor via email of your team’s members and team name by week 2. everyone will receive feedback from the professor and fellow students on each assignment along the way so that they may improve their deliverables for the final report and presentation.assessmentgrade25% class participation & peer review (exit tickets)10% quizzes65% project assignments (10% analysis, 10% mockup/prototype, 10% evaluation, 10% redesign, 25% final report and presentation)late assignmentsyou can submit up to 2 late quizzes and 1 late assignment within 3 days (72 hours) of the original deadline without penalty. otherwise, the penalty is 5 points per day late. requests for longer extensions should be submitted to the professor within 24 hrs of the original deadline with an explanation and proposed deadline for the late work. failure to submit assignments and quizzes on time could result in a failing grade in the course. if you miss more than three deadlines during the quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.academic honestyhttps://studentmanual.uchicago.edu/academic-policies/academic-honesty-plagiarism/toolswe will discuss a variety of tools for creating mockups and prototypes and analyzing user interactions. some are free for educational use and some have a free trial. you are not required to purchase any of these nor will we go into great depth on the features of each. however, you will be required to use at least one of these tools for the course project, so exploration and self-directed learning is encouraged. additional resources and links to online tutorials will be provided on canvas.mockup and prototyping tools: balsamiq, sketch, figma, invisionuser interaction/testing tools: morae, userzoom, tobii, gazereadingsrequired:boehm-davis, d. a., durso, f. t., & lee, j. d. (2015).apa handbook of human systems integration. washington, dc: american psychological association.goodman, e. & kuniavsky, m. (2012). observing the user experience : a practitioner’s guide to user research: vol. 2nd ed. morgan kaufmann.johnson, j. (2020).designing with the mind in mind: simple guide to understanding user interface design guidelines(third edition.). cambridge, ma: morgan kaufmann.additional readings will be assigned weekly and will either be available as links or pdfs on canvas. readings will support topics covered in class.optional:norman, d. a. (2013).the design of everyday things(revised and expanded edition.). new york, new york: basic books.course content & scheduleslight modifications to schedule and assignments may occur as the quarter progresses.week 1: introduction to hcilecture: what makes a chair good for sitting? humans, environments, interactionsclass activities: introductions, personal audit of interactions against universal design principlesdue end of week 1:week 1 readingsquiz 1form teams of 2-4 for course projectweek 2: hci research methods part 1lecture: methods for observing hci in the wildclass activities: demo - interaction observation, usability heuristic reviewdue end of week 2:week 2 readingsquiz 2confirm project team member names and team name on canvasbegin work on assignment 1week 3: cognition overviewlecture: the magical flawed brain meets the beautiful flawed interfaceclass activities: demo - usability heuristic reviewdue end of week 3:week 3 readingsquiz 3submit assignment 1: heuristic evaluation report or focus group reportweek 4: perception and accessibilitylecture: sense and sensibility: engineering experiences for the 5 sensesclass activities: peer review assignment 1, case studies – siemens vr, disney worlddue end of week 4:week 4 readingsquiz 4submit assignment 2: design mockup sketchweek 5: memory and attentionlecture: “squirrel!” - distractions, addictions, and our mental modelsclass activities: case study – social media of your choice; demo – mockup and prototype toolsdue end of week 5:week 5 readingsquiz 5submit assignment 3: prototype draftweek 6: hci research methods: part 2lecture: usability testing: from the wild to the labclass activities: peer review assignment 2; demo of usability testing tools/processdue end of week 6:week 6 readingsquiz 6submit assignment 4: complete prototype + brief reportweek 7: communicating with stakeholders about hci, part 1lecture: tufte, personas, and why we like storiesclass activities: teamwork/lab timedue end of week 8:week 8 readingsquiz 8begin work on assignment 5: evaluation (user testing) + reportweek 8: communicating with stakeholders about hci, part 2lecture: ted talks, pecha kucha, and crucial conversationsclass activities: peer review assignment 3due end of week 8:week 8 readingsquiz 8submit assignment 5: evaluation (user testing) + reportweek 9: errors and error recovery, bringing it togetherlecture: my recovery journey with recommender systems since 2001class activities: case studies – netflix, stitch fixinformal presentations on course projectdue end of week 9:week 9 readingsquiz 9submit assignment 6: final project prototype, report, and presentationhot topics in hci, acm sigchi (discussion) | instructor: kathryn wozniak (she/her/hers)email: k.wozniak@uchicago.eduoffice hours: before/after class and by appointment (please email me to schedule)prerequisites: core programmingcourse website: canvas | this course explores the cognitive psychology and physiology behind humans’ interactions with their environment and how this translates to “good design” of computer-based systems, interfaces, and machines. emphasis is placed on the value of intentionally observing and analyzing the reciprocal relationship between humans and the design of systems in various contexts from a designer or engineer’s perspective. from a practical standpoint, the course addresses the role human-computer interaction (hci) plays in enhancing the day-to-day human experience and the value of a product to society, while increasing the bottom line for stakeholders. topics include perception, memory, attention, mental models, accessibility, user/interaction research methods, interface design principles, and design communication strategies.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-56600-1,mpcs 56600 introduction to blockchain (winter 2026),mpcs-56600-1,"shacklette, mark (jmshackl)",elective,"*please note: this is the syllabus from the 2023/24 academic year and subject to change.*this course is a comprehensive technical introduction to relevant topics in the wider ecosystem surrounding blockchain. our technological focus will include substantive topics in fundamental problems that blockchain is attempting to solve (and is generating), including algorithms, cryptography, security and trust, autopoietic peer-to-peer networking, distributed ledgers, double spending, proof of work and ownership issues, decentralized applications, smart contracts, and supporting technologies. with that said, this is not a course in economics or monetary theory, trading cryptocurrencies, nor is it a course on regulatory or legal issues surrounding blockchain, although we will touch on many of these topics throughout the course. we will also cover broader applications of blockchain technology beyond cryptocurrencies and icos including use cases from finance, insurance, science, healthcare, pharmaceuticals.we will cover cryptocurrencies and bitcoin and mining as well as ethereum initially as our introduction to the problem space, but will quickly move on to building our own blockchain application. students may leverage a number of technologies including containerization (docker), as well as the mean stack or ruby on rails for the more ambitious. students may work in whatever languages they know best and make the most sense in context. these may include java/javascript, c++, python, ruby, c#, and others.laboratories will be offered each week to reinforce a fundamental understanding of the core topics.a final student project will be delivered by teams of students targeting a specific blockchain use case of the team's choice (teams will be given options). | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/ | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer scienceundergraduate - cs minorundergraduate - cs major,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-56511-1,mpcs 56511 introduction to computer security (winter 2026),mpcs-56511-1,"rossell, shelley (shelley)",core systemselective,"descriptionthis course introduces security principles and practices. topics will range from encryption to network, endpoint, and application threats and controls. the course will emphasize both offense (i.e., attacker mindset) and defense (the importance of implementing both technical and non-technical controls).topics● threat landscape● encryption● authentication and access control● endpoint security● network security● web and application security● risk management● monitoring and vulnerability management● incident responsecoursework● rerequired readings from freely available sources● labs and other assignments● quizzes● research paper● discussion homework | this course introduces security principles and practices. topics will range from encryption to network, endpoint, and application threats and controls. the course will emphasize both offense (i.e., attacker mindset) and defense (the importance of implementing both technical and non-technical controls). | ● rerequired readings from freely available sources","familiarity with linux command linefamiliarity with tcp/ip and network routing recommendedstudents must be able to run the labs -- either on their own machine (virtual machine) or via a cloud-based option that requires installing an sdk on the local machine. installation will be reviewed on week 1 - nothing to do in advance. this does not cost.this course requires basic competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),core programming (completed or concurrently enrolled)
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-52011-1,mpcs 52011 introduction to computer systems (winter 2026),mpcs-52011-1,—,core systemselective,"course descriptionthis course is all about constructing your own knowledge of computer systems by building a general-purpose computer system from the ground up. the objective is to integrate key ideas from algorithms, computer architecture, operating systems, compilers, and software engineering into one unified framework. along the way, we'll explore ideas and techniques used in the design of modern hardware and software systems, and discuss major trade-offs and future trends. throughout this journey, you'll gain lots of cross-section views of the field of computer science, from the bare-bone details of switching circuits to the high-level abstraction of object-based software design. by the end of the course, you will have written a computer game in an object-oriented programming language; compiled that program into machine language using the compiler, the virtual machine language translator, and the assembler that you wrote; and run your program on (virtual) hardware that you designed.course contents and courseworkweek 1 (chapters 1-2 of the text)topics: boolean logic, combinatorical chip design, karnaugh maps, hardware description languagecoursework: use a hardware description language to build a basic chip set.week 2 (chapter 3 of the text)topics: sequential chip design, binary arithmeticcoursework: use a hardware description language to build a sequential chip set and the alu, cpu, memory for a computer.week 3 (chapters 4-5 of the text)topics: machine language, computer architecturecoursework: write and run programs in assembly language; use a hardware description language to build a working computer.week 4 (chapter 6 of the text)topics: assemblerscoursework: test 1 (in class). design, implement, test, and debug an assembler, using a programming language of your choice.week 5 (chapter 7 of the text)topics: virtual machine paradigm, stack arithmeticcoursework: design, implement, test, and debug a virtual machine translator for stack arithmetic and memory access commands, using a programming language of your choice.week 6 (chapter 8 of the text)topics: virtual machine language program controlcoursework: add function definition, and function call and return commands to the virtual machine translator.week 7 (chapter 9 of the text) (chapter 10 of the text)topics: overview of high-level object-oriented programming languagescoursework: test 2 (in class). write a small sample program in the high-level object-oriented programming language used in this course.week 8 (chapter 10 of the text)topics: compilers, syntax analysiscoursework: design, implement, test, and debug a tokenizer for an object-oriented language compiler, using a programming language of your choice.week 9 (chapters 11-12 of the text)topics: compilers, code generation, operating systemscoursework: design, implement, test, and debug a code generator for an object-oriented language compiler, using a programming language of your choice.week 10examtextbookthe elements of computing systems, second edition: building a modern computer from first principlesby nisan and schocken | this course is all about constructing your own knowledge of computer systems by building a general-purpose computer system from the ground up. the objective is to integrate key ideas from algorithms, computer architecture, operating systems, compilers, and software engineering into one unified framework. along the way, we'll explore ideas and techniques used in the design of modern hardware and software systems, and discuss major trade-offs and future trends. throughout this journey, you'll gain lots of cross-section views of the field of computer science, from the bare-bone details of switching circuits to the high-level abstraction of object-based software design. by the end of the course, you will have written a computer game in an object-oriented programming language; compiled that program into machine language using the compiler, the virtual machine language translator, and the assembler that you wrote; and run your program on (virtual) hardware that you designed. | course contents and courseworkweek 1 (chapters 1-2 of the text)","this is mostly a hands-on course, evolving around building a series of hardware and software modules. you can use any programming language you like to implement the software modules (popular choices are c, c++, java, and python), but you must be comfortable designing, writing, and debugging programs on your own; the guidance given in this course centers around what to program rather than how to program it.this class may be too advanced for students who have just taken mpcs 50101 concepts of programming. if you have an interest in this class, the recommendation is to take mpcs 51082 introduction to unix systems along with core programming before taking mpcs 52011.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),core programming (completed or concurrently enrolled)
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-56550-1,mpcs 56550 introduction to devops (winter 2026),mpcs-56550-1,"almhana, rafi (ralmhana)",elective,"this course provides an in-depth introduction to devops principles, practices, and tools for modern software development and operations. students will learn how to integrate development (dev) and operations (ops) to enhance software delivery, automation, and scalability. the course covers continuous integration (ci), continuous deployment (cd), infrastructure as code (iac), monitoring, cloud-native applications, and security. by the end of this course, students will have hands-on experience with tools like docker, kubernetes, terraform, jenkins, github actions, prometheus, and aws/azure/gcp.learning objectivesby the end of this course, students will be able to:understand the core principles of devops and its impact on software development and operations.implement version control and collaboration workflows using git and github/gitlab.create and manage ci/cd pipelines with jenkins, github actions, or gitlab ci.use containerization technologies like docker and container orchestration with kubernetes.apply infrastructure as code (iac) using terraform or ansible.monitor applications and infrastructure using prometheus, grafana, and elk stack.implement cloud-based devops solutions using aws, azure, or gcp.enhance security practices within devops, including secrets management, vulnerability scanning, and compliance.understand site reliability engineering (sre) principles and incident response best practices.implement a real-world devops project integrating multiple devops tools and concepts.course outlinemodule 1: introduction to devops & culturewhat is devops?devops vs. traditional itdevops lifecycledevops principlesmodule 2: version control & git workflowsgit basics and branching strategiesgithub/gitlab workflows (forking, branching, merging, pull requests)managing repositories with gitmodule 3: continuous integration & continuous deployment (ci/cd)what is ci/cd?setting up jenkins, github actions, gitlab ci/cdbuilding ci/cd pipelinesdeployment strategiesmodule 4: containerization & orchestrationintroduction to docker and containerizationbuilding and managing docker containersintroduction to kuberneteskubernetes architecture & deployment strategiesmodule 5: infrastructure as code (iac)what is iac and why it matters?introduction to terraform, ansible, and cloudformationprovisioning infrastructure with terraformmanaging configurations with ansiblemodule 6: cloud computing & devopsdevops in the cloud (aws, azure, gcp)cloud-native devops toolsserverless computing basicsmodule 7: monitoring & loggingobservability and logging in devopsintroduction to prometheus, grafana, elk stack (elasticsearch, logstash, kibana)setting up monitoring and alertsmodule 8: security & compliance in devopsdevsecops and security best practicessecrets management (vault, aws secrets manager)vulnerability scanning (trivy, sonarqube)compliance and auditing in devopsmodule 9: site reliability engineering (sre) & incident managementintroduction to sre principleserror budgets and slis/slos/slasincident response and on-call strategieschaos engineering basicsgrading & assessmentassignments40%topic presentation10%final project40%participation & engagement10%tools & technologiesversion control: git, github/gitlabci/cd: jenkins, github actions, gitlab ci/cdcontainerization: docker, kubernetesinfrastructure as code (iac): terraform, ansiblecloud services: aws, azure, gcpmonitoring & logging: prometheus, grafana, elk stacksecurity: hashicorp vault, trivy, sonarqube | this course provides an in-depth introduction to devops principles, practices, and tools for modern software development and operations. students will learn how to integrate development (dev) and operations (ops) to enhance software delivery, automation, and scalability. the course covers continuous integration (ci), continuous deployment (cd), infrastructure as code (iac), monitoring, cloud-native applications, and security. by the end of this course, students will have hands-on experience with tools like docker, kubernetes, terraform, jenkins, github actions, prometheus, and aws/azure/gcp. | by the end of this course, students will be able to:","• basic knowledge of linux/unix systems• familiarity with git version control• knowledge of scripting languages (python, bash, etc.)this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that does not conflict with any other classes this quarter.,,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51200-1,mpcs 51200 introduction to software engineering (winter 2026),mpcs-51200-1,—,electivespecialization - software engineering (se-1)specialization - software engineering (se-2),"course descriptionwriting first-class software requires top-notch architecture, design and coding skills, but successful software project execution--from identifying the need to providing support--depends on many factors besides technical prowess. this course surveys the key practices and processes that help ensure successful projects. it provides an introduction to central activities of software engineering other than just coding, such as planning, requirements, testing and management. it balances this discussion of typical engineering activities against the development process models in which they take place -- specifically, it addresses the tension between traditional plan-driven approaches and adaptive agile techniques. by examining the underlying principles of major development models, it shows how those principles address (or fail to address) the various problems encountered by project teams. students who complete this course will gain a solid understanding of both plan-driven and agile software development principles and how to negotiate between them in different contexts.the project planning topic of the course begins with project inception and interpretation of the business case and proceeds through project deployment and support. the chief emphasis is on understanding the many interrelated dimensions of a project. it addresses the bread-and-butter planning topics, such as estimation and scheduling, and surveys the dominant models for these tasks. it explains the key metrics necessarily for successful project control and the means of collecting and interpreting them. significant time is spent on the topic of risk and risk management. the requirements topic introduces a structured framework for thinking about software requirements. it teaches not only how to elicit and capture requirements (an art in itself), but also how to assign appropriate attributes to requirements to enable effective prioritization, management, and validation. the quality topic discusses practices that have been shown to reduce software defects. it examines requirements validation and the traceability of project decisions from user needs, through requirements, to design decisions, implementation, and testing. it shows how key architectural decisions affect product quality, and offers guidelines to determine which decisions must be made up front and which are better deferred. formal quality verification processes, such as reviews and inspections are explained, as are best practices for designing and administering tests. finally, change control and configuration management practices are reviewed.course contents•lean software development principles•the seven wastes of software development•agile methods: scrum, xp, kanban, feature-driven development•estimation of size and effort•requirements management, elicitation, analysis, specification, verification and validation•software testing (dynamic)•software inspection•iterative and incrementation strategies•risk management•software capability maturity•software project metrics•change management•software development life cycles•when -- and when not -- to use various approaches and techniques•software process management and improvement•transforming software organizationscourseworkyou will apply the course material to an ongoing case study, developing work products such as plands, requirements and analysis models.you will regularly be expected to hand in answers (usually brief) to a few questions about the material covered. for example, you might be given a few scenarios and asked to select the appropriate software development lifecycle for each and write a sentence or three justifying your choice.you should expect frequent quizzes, none of which will be worth very many points. the scope of the course is broad, and the quizzes help ensure that we stay aligned. if the quizzes prove unnecessary, we'll stop having them.the course has a midterm and final. a study guide will be provided for each. the final is cumulative, but weighted toward the latter half of the course.finally, you'll be expected to choose a topic, such as an agile development practice, and prepare a written overview in which you explain it and discuss its strengths, limitations and applicability. if the class size permits, you'll present a summary of your report to the class. topics will be selected early in the quarter, and presented toward the end.course textbooks•lean software development: an agile toolkit. mary poppendieck and tom poppendieck (2003)•quality software project management. robert t. futrell, donald f. shafer and linda isabell shafer (2002)•swebok v3.0 | writing first-class software requires top-notch architecture, design and coding skills, but successful software project execution--from identifying the need to providing support--depends on many factors besides technical prowess. this course surveys the key practices and processes that help ensure successful projects. it provides an introduction to central activities of software engineering other than just coding, such as planning, requirements, testing and management. it balances this discussion of typical engineering activities against the development process models in which they take place -- specifically, it addresses the tension between traditional plan-driven approaches and adaptive agile techniques. by examining the underlying principles of major development models, it shows how those principles address (or fail to address) the various problems encountered by project teams. students who complete this course will gain a solid understanding of both plan-driven and agile software development principles and how to negotiate between them in different contexts. | the project planning topic of the course begins with project inception and interpretation of the business case and proceeds through project deployment and support. the chief emphasis is on understanding the many interrelated dimensions of a project. it addresses the bread-and-butter planning topics, such as estimation and scheduling, and surveys the dominant models for these tasks. it explains the key metrics necessarily for successful project control and the means of collecting and interpreting them. significant time is spent on the topic of risk and risk management. the requirements topic introduces a structured framework for thinking about software requirements. it teaches not only how to elicit and capture requirements (an art in itself), but also how to assign appropriate attributes to requirements to enable effective prioritization, management, and validation. the quality topic discusses practices that have been shown to reduce software defects. it examines requirements validation and the traceability of project decisions from user needs, through requirements, to design decisions, implementation, and testing. it shows how key architectural decisions affect product quality, and offers guidelines to determine which decisions must be made up front and which are better deferred. formal quality verification processes, such as reviews and inspections are explained, as are best practices for designing and administering tests. finally, change control and configuration management practices are reviewed.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"mpcs students: core programming completed (mpcs 51036, or 51040, or 51042, or 51046, or 51100) or core programming waiver.non-mpcs students: must have completed cmsc 14200, capp 30122 or macs 30122 or mpcs programming placement exam i.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/"
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51082-1,mpcs 51082 introduction to unix systems (winter 2026),mpcs-51082-1,"kenneth samuels, lamont (lamonts)",core systemselective,"course descriptionthis course aims to introduce to the fundamental concepts, principles, and abstractions that underlie the design and architecture of unix systems. students will learn how a unix system works from the hardware level all the way up to the application level. the course will also focus on teaching students develop a command of the unix shell environment by ensuring a basic understanding of unix commands and utilities, and networking capabilities.students will also be able to learn about the fundamentals of systems programming in unix.after taking this course, students will develop a more-depth understanding of unix and be able to use this knowledge to better implement programs on a unix operating systems such as linux or os x.course contenttopics that will be explored in the course will include (but not limited to) the following:brief history of unix and linuxunix system architectureinteracting with a unix shellbasics of how hardware interacts with a unix operating systemunix operating system and processesshell scriptingapplication development for systems programmingunix network utilities | this course aims to introduce to the fundamental concepts, principles, and abstractions that underlie the design and architecture of unix systems. students will learn how a unix system works from the hardware level all the way up to the application level. the course will also focus on teaching students develop a command of the unix shell environment by ensuring a basic understanding of unix commands and utilities, and networking capabilities.students will also be able to learn about the fundamentals of systems programming in unix. | after taking this course, students will develop a more-depth understanding of unix and be able to use this knowledge to better implement programs on a unix operating systems such as linux or os x.","this class is intended as an entry level systems class to prepare students without a strong cs background to take more advanced systems classes. you are not eligible to take this class if you have already taken functional programming, distributed systems, advanced computer architecture, compilers, operating systems, parallel programming, foundations of computer networks, foundations of database systems or any cmsc systems class.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),core programming (completed or concurrently enrolled)
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51030-1,mpcs 51030 ios application development (winter 2026),mpcs-51030-1,"binkowski, thomas (abinkowski)",electivespecialization - application development (app-1),"course descriptionadvances in mobile technologies are changing the way that individuals and businesses use computing devices. this course will instruct students on the fundamentals of mobile application development using apple's ios sdk. an introduction to the swift programming language, including object-oriented design and the model-view-controller pattern, will be covered. using ios apis and tools, such as xcode, interface builder and instruments, students will be able to create fully-featured ipod touch, iphone, and ipad applications. opportunities to create applications using watchos or tvos are possible for the final project. user interface and application design considerations specific to mobile technologies will also be explored.the course will consist of lectures, hands-on coding exercises and discussion. weekly programming assignments will culminate into the development of a fully functioning ios application. as a final project, each student will design and implement an application of their choice to be presented in class.each student will also be required to present a case study featuring an app from the apple’s app store. the studies will include a technical decomposition of the implementation (i.e. features, functionality, design, etc.) and a market analysis (i.e. competition, pricing, positioning, etc.) for the app. these case studies are designed to encourage students to gain an appreciation for the decisions companies and developers face when entering the app market.course contentsthe course will focus on apple’s most recent developer tools (xcode), languages (objective-c, swift) and technologies (ios11 sdk).courseworkstudents will complete a weekly programming assignments during the first six weeks of class. at that time, they will submit a proposal for their final project, an application of their own design. during the final four weeks, students will be expected to complete the work on their final projects. there will be no written exam for the course. the final exam class time will be used for students to conduct a formal presentation and live demonstration of their final projects to the class.throughout the quarter, each student will also be required to present a case study of application currently in apple’s app store. presentation assignments will be scheduled during week 2.course textbooknone required. | course descriptionadvances in mobile technologies are changing the way that individuals and businesses use computing devices. this course will instruct students on the fundamentals of mobile application development using apple's ios sdk. an introduction to the swift programming language, including object-oriented design and the model-view-controller pattern, will be covered. using ios apis and tools, such as xcode, interface builder and instruments, students will be able to create fully-featured ipod touch, iphone, and ipad applications. opportunities to create applications using watchos or tvos are possible for the final project. user interface and application design considerations specific to mobile technologies will also be explored.the course will consist of lectures, hands-on coding exercises and discussion. weekly programming assignments will culminate into the development of a fully functioning ios application. as a final project, each student will design and implement an application of their choice to be presented in class.each student will also be required to present a case study featuring an app from the apple’s app store. the studies will include a technical decomposition of the implementation (i.e. features, functionality, design, etc.) and a market analysis (i.e. competition, pricing, positioning, etc.) for the app. these case studies are designed to encourage students to gain an appreciation for the decisions companies and developers face when entering the app market. | course contentsthe course will focus on apple’s most recent developer tools (xcode), languages (objective-c, swift) and technologies (ios11 sdk).","knowledge of at least one programming language (e.g. python, c/c++, c#, java, or objective-c) and familiarity with object oriented design or consent of the instructor. students should sign up of a free apple developer account before the first class.this course requires access to an m series or intel-based apple macintosh computer running the latest version of mac os x. access to an ios device (ipod touch, iphone, or ipad) is recommended for developing and testing applications.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-50103-1,mpcs 50103 mathematics for computer science: discrete mathematics (winter 2026),mpcs-50103-1,"agarwal, ishan (ishanagarwal)",immersion math,"course overview [watch video]syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class.course description:this course is an introduction to ideas and techniques from discrete mathematics that are commonly used in computer science. it emphasizes mathematical proof and problem solving, employed on a variety of useful and interesting topics: combinatorics, discrete probability, graphs, and basic number theory.on completion of the course, students will be practiced in using mathematical concepts and techniques to solve problems, and in expressing mathematical notions precisely. they will be able to use ideas and techniques from discrete mathematics in subsequent courses in computer science, in particular courses in the design and analysis of algorithms, networks, numerical methods, software engineering, data analysis, and machine learning.course contents:mathematical reasoning and proofs:an introduction to mathematical reasoning, common logical fallacies, mathematical proofs and various proof techniques including, most importantly, mathematical induction.combinatorics:counting, permutations, combinations, binomial theorem, pigeon hole principle, inclusion-exclusion principle, bijective counting, recurrences.number theory:divisibility, euclid's division algorithm, prime numbers, modular arithmetic, fermat's little theorem.discrete probability:conditional probability, independence, bayes rule, random variables, expected value, linearity of expectation, variance, markov's inequality, the probabilistic method as a proof technique.graphs:directed and undirected graphs, various representations of graphs, graph isomorphism, , graph colouring, paths, connectivity, eulerian and hamiltonian paths, trees, bipartite graphs, matchings.course activities:classes:classes will typically consist of a lecture on the topic interspersed with problem solving/ related activities.office hours:regular office hours will be held by the course instructor as well as tas. attendance is optional but highly reccomended.problem solving sessions:regular problem solving sessions will be held for the purpose of giving the students guided problem solving practice. attendance is optional but highly reccomended.course materials:the course textbook is: discrete mathematics and its applications (7th edition) (mcgraw-hill) by kenneth h. rosen (isbn 978-0073383095).the mit open courseware textbook for their mathematics for computer science course is also a good resource:mit ocw textbook.the class is intended to be self contained. complete lecture notes will be provided for all the lectures. all problems in the problem sets will also be stated in full.evaluation:the course grade will be based on homework, quizzes, a midterm and a final exam.homework: there will be weekly homework to be submitted online. you will have a homework score out of 100%quizzes (30%): there will be two pre-announced in class quizzes.midterm (25%)final (45%)the quizzes/ exams will be closed-book/notes.you will thus have a homework score out of 100% and an exam score out of 100% and these will be combined as per the table in the syllabus document.prerequisites:pre-calculus (especially familiarity with exponentials and logarithms) is a prerequisite. high school level familiarity with sets and functions, as well as common mathematical notation, will be assumed. | course overview [watch video]syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class. | this course is an introduction to ideas and techniques from discrete mathematics that are commonly used in computer science. it emphasizes mathematical proof and problem solving, employed on a variety of useful and interesting topics: combinatorics, discrete probability, graphs, and basic number theory.",course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/,this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),"mpcs 50101 concepts of programming (completed or concurrently taking), or a pass on mpcs programming placement exam i, or a core waiver for programming."
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-54001-1,mpcs 54001 networks (winter 2026),mpcs-54001-1,"nicholson, anthony (ajn)",core systemselective,"course descriptionthis course focuses on the history, theory, and implementation of computer networks. it is intended as an introductory survey course where we will go broad on a wide array of fundamentals.our primary focus will be the internet and mobile phone networks, using others (e.g. the legacy wired telephony network) as counterpoints where illustrative. we'll explore the whole stack,from low-level technologies (e.g., ethernet, wi-fi) to high-level applications (e.g., web, email). by the end of this course, you should have a better understanding of the underlying network protocols used by the computers, smart phones, and other network-enabled devices that you depend on every day.course scopehistory + purpose of data networksapplication layer (http, email, multimedia)transport layer (tcp, udp, quic), flow+congestion controlnetwork layer (ipv4 / ipv6), routinglink layer (ethernet, wifi, mobile phone networks)wireless + mobile computing complicationsnetwork security, distributed systems introductioncourseworkweekly assignments, midterm and final. the exams will be in class, the assignments will be more in-depth to be completed at home.course textbookcomputer networks: a systems approach, peterson + davie, version 6.2.available free online. | this course focuses on the history, theory, and implementation of computer networks. it is intended as an introductory survey course where we will go broad on a wide array of fundamentals. | our primary focus will be the internet and mobile phone networks, using others (e.g. the legacy wired telephony network) as counterpoints where illustrative. we'll explore the whole stack,from low-level technologies (e.g., ethernet, wi-fi) to high-level applications (e.g., web, email). by the end of this course, you should have a better understanding of the underlying network protocols used by the computers, smart phones, and other network-enabled devices that you depend on every day.","familiarity with python or java a plus but not required.experience with concurrent programming (threads, synchronization)this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),core programming (completed or currently enrolled)
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-52060-1,mpcs 52060 parallel programming (winter 2026),mpcs-52060-1,"hückelheim, jan (jhueckelheim)",core systemselectivespecialization - high performance computing (hpc-2),"course descriptionparallel computing is found everywhere in modern computing. multi-core cpus and gpus, supercomputers, and even mobile devices such as smartphones all provide ways to efficiently utilize parallel processing on these architectures and devices. the goal of this course is to provide an introduction to the foundations of parallel programming and to consider the performance gains and trade-offs involved in implementing and designing parallel computing systems. specifically, this course will place an emphasis on concepts related to parallel programming on multicore processors.course contentstopics that will be explored in the course will include (but not limited to) the following:processes and threadsshared memoryhardware mechanisms for parallel computingsynchronization and communication for parallel systemsperformance optimizationsparallel data structuresmemory consistency and hierarchies for parallel computingpatterns of parallel programmingparallel programming on gpusadditional topics dependent on student request and timecourseworkthe course will include weekly homework, two exams, and projects. the weekly assignments will contain practice problems to help enforce the concepts learned during a lecture. the projects provide the opportunity to apply the skills you learned to develop systems that can benefit from parallelization. potential project domains could include: ai and machine learning, computer graphics, cryptocurrency technologies, scientific visualization, etc.course textbook(s)this course will not have a required textbook. along with the lecture notes, students may find the following references helpful in undersntading the course material:the art of multiprocessor programmingby maurice herlihy and nir shavitadditional readings/references will be provided when necessary. | core programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course. | this is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.","familiarity with c, java, and/or python.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51042-1,mpcs 51042 python programming (winter 2026),mpcs-51042-1,"skluzacek, tyler (skluzacek)",core programming,"descriptionpython is a general-purpose programming language that is used in many application areas, including webdevelopment, scientific computing, graphical user interfaces, systems programming, gaming, rapid prototyping,data mining, and more. this course provides a thorough overview of the python 3 language with an emphasison writing idiomatic code in python and object-oriented design patterns and is suitable for students with someprior programming experience. we will develop an understanding of the core features of the languages and gainexposure to commonly used standard-library and third-party modules.course formatweekly classes will provide lectures with interactive notebooks to help you follow along and practice concepts.the first several weeks will include a programming assignment expanding on the topics covered in class. the hands on programming portion will culminate in a larger multi-part project.there will also be in-person quizzes and a final exam to help you evaluate your mastery of concepts covered in this class.you arestrongly encouragedto bring a laptop to class to follow along with examples interactively.course overviewpython basics: types, variable, operations, control flow, iterationfunctions, recursion, generators and scopeclasses, objects, oop programmingdecorators and dynamic attributesthe python data modeldata structures in python (lists, stacks, hash tables, queues, trees)an overview of modules and the python standard library & ecosystem.an introduction to scientific computing and data manipulation (pandas, numpy, etc)textbookswhile there are no required textbooks for this course, the following books may be useful for reference:python distilled (1st edition)learning python (5th edition), by mark lutzfluent python (2nd edition), by luciano ramalho (1st edition ok) | textbookswhile there are no required textbooks for this course, the following books may be useful for reference: | must have completed mpcs immersion programming (mpcs 50101 concepts of programming) or must receive a pass on the mpcs programming placement exam i. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.","this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation.capp, macss and msme students interested in taking this class should talk with their program's advisor.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (new) placement: pass ims in computational analysis in public policy (new) placement: pass i + ii (w/ advanced)ms in computational analysis in public policy (new) placement: pass i + iimasters program in computer science (new) placement: pass imasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced),must have completed mpcs immersion programming (mpcs 50101 concepts of programming) or must receive a pass on the mpcs programming placement exam i. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-51230-1,mpcs 51230 user interface and user experience design (winter 2026),mpcs-51230-1,"marques, andre (andremar)",electivespecialization - software engineering (se-2)specialization - application development (app-2),"overviewinstructor: andré marques (he/him/his)email: andre.marques@uchicago.eduprerequisites: core programmingcourse website: google classroomoffice hours: tbdta: tbdta email: tbdgrader: tbdemail: tbddescriptionwhether you’re ordering a burrito, boarding a plane, chatting with friends, booking your next workout, or reading this sentence—you’re likely using software with a user interface.this course will teach you how to create useful and engaging user interfaces.we will cover different methods of approaching design problems, how to conduct research to understand users, create prototypes, discuss, present, and assess design.learning objectivesat the end of this class you will be able to:implement design processes within various contexts: personal projects, startups, and structured software development teams.understand the needs of users and identify meaningful problems to address in order to create positive experiences.create prototypes of any fidelity using contemporary design tools for web, mobile, and design systems.articulate design decisions and provide constructive feedback.course componentsin-person classtuesdays 5:30pm - 8:30pm central.lectures & demoslectures and democs will cover topics and techniques that will prepare you for each week’s assignment.student interviewsyou will interview your classmates for a variety of design activities.critiqueswe will collaborate as a class and in small groups to assess design decisions made on assignments. you will be asked to informally present your designs to peers. i will provide you with structure and guidance throughout this process.participationthis course will be offered in person; lectures will not be recorded. the expectation is that students will attend class in-person each week. due to the nature of this course, attendance is essential and required. failure to attend class on a regular basis could result in a failing grade in the course. if the class schedule doesn’t work for you, you should not take this class. if you miss more than two class sessions during the autumn quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.assessmentgrade25% participation75% assignmentslate assignmentsyou can submit up to 2 late assignments, however you must contact me within 24hrs of the original deadline to coordinate an extension. failure to submit assignments on time could result in a failing grade in the course. if you miss more than two deadlines during the autumn quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.academic honestyhttps://studentmanual.uchicago.edu/academic-policies/academic-honesty-plagiarism/topicsthinkingapproaching a design problem. knowing where and how to start will set you in the right direction on design projects.design processcreative problem solvingobservingfinding the right problem to solve. understanding people and their experiences will give you insight into the prototypes you should create and test.need findinghuman-centered designresearch methodspersonasuser testinguser journeysmetricsresearch synthesismakingcreating useful prototypes. design principles will guide you through the creation of visual interface and user workflow decisions to address the needs of your users successfully.accessibilityprinciples, patterns, & techniquesuser goals & user flowsinformation architecturevisual design (layout, typography, icons)paper prototypeslow fidelity prototypeshigh fidelity prototypesiterative designdesign managementevaluatingcommunicating design decisions and providing feedback. design is often a team effort, so we will learn how to successfully work in a design environment with others.presentationscritiquestoolsnotebook: observations and low fidelity paper prototypes. not required for assignment deliverables but useful for exploring ideas.figma: medium & high fidelity prototypes.○ figma is an online user interface design tool that is free for educational use. we will create and share user interfaces with this tool.invision: interactive prototypes.○ invision is an online product design tool that is free for educational use. we will create interactive prototypes with this tool.readingsthis class has no textbook.readings may be assigned weekly and will either be available as links or pdfs on our class website. readings will support topics covered in class. | whether you’re ordering a burrito, boarding a plane, chatting with friends, booking your next workout, or reading this sentence—you’re likely using software with a user interface. | this course will teach you how to create useful and engaging user interfaces.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/winter/courses/mpcs-52553-1,mpcs 52553 web development (winter 2026),mpcs-52553-1,—,electivespecialization - application development (app-1),"course descriptionthis course is intended to prepare students with a general programming background to work on teams producing modern web applications. students will learn a strong foundation of core web technologies and protocols, an overview of the major design patterns in the history of web development, and a detailed introduction to the current industry standard. we will have an emphasis on learning from publicly-available documentation so that students are equipped to learn new techniques and frameworks in this rapidly-evolving field.specifically, the course will cover content layout and styling with html and css, dynamically generating page content on the webserver, interacting with databases, interacting with remote resources using http and rest, client-side interactivity with modern javascript, and the creation of single-page applications.this course uses agile software techniques to build real, working software each week. we will work as closely as possible on how software is developed in the industry, and all work is asynchronous, open-note, and open-internet, with collaboration, encouraged.course contentsfundamentals of html5, css3, and javascript/es6 for front-end programmingvisual design and responsive web designclient/server communicationbuilding web applicationssingle-page application developmentserver-side page renderingdatabase-driven application developmentcontent management systemsrest api developmentnetwork attacks & web app securitydebugging tools and techniquestentative weekly course scheduleweek 1 (exercise #1):web foundationshypertext markup language (html)week 2 (exercise #2):url and linkscascading style sheets (css)week 3 (exercise #3):javascript basicsjavascript programmingweek 4 (exercise #4):document object model (dom)dom - eventsasynchronous functions, promisesweek 5 (exercise #5):intro to front end programmingintroduction to reactjsintroduction to angularsingle page applicationsweek 6 (exercise #6):responsive web designbuilding web applicationsclient/server communicationweek 7 (exercise #7):web servers / intro to the lamp stacknode.js/expressjsapache/phpweek 8 (exercise #8):storage tiercookies and sessioninput and validationweek 9 (exercise #9):web servicesrest api developmentsoap apixmlweek 10:web app securitynetwork attackslarge scale applicationscloud hostingdata centersexercises:students will be expected to complete:7-9 programming exercises due the day before class1 final project due by the end of finals weekreferencesmdn web docs:https://developer.mozilla.org/en-us/php documentation:https://www.php.net/docs.phpsqlite documentation:https://www.sqlite.org/docs.htmlflask documentation:https://flask.palletsprojects.com/en/2.0.x/react documentation:https://reactjs.org/docs/getting-started.htmlangular documentationhttps://angular.io/startnodejs documentationhttps://nodejs.org/en/docs/guides/getting-started-guide/expressjs documentationhttps://expressjs.com/en/starter/installing.htmltypescript documentationhttps://www.typescriptlang.org/docs/mongodbhttps://docs.mongodb.com/w3schools documentationhttps://www.w3schools.com/ | course descriptionthis course is intended to prepare students with a general programming background to work on teams producing modern web applications. students will learn a strong foundation of core web technologies and protocols, an overview of the major design patterns in the history of web development, and a detailed introduction to the current industry standard. we will have an emphasis on learning from publicly-available documentation so that students are equipped to learn new techniques and frameworks in this rapidly-evolving field.specifically, the course will cover content layout and styling with html and css, dynamically generating page content on the webserver, interacting with databases, interacting with remote resources using http and rest, client-side interactivity with modern javascript, and the creation of single-page applications.this course uses agile software techniques to build real, working software each week. we will work as closely as possible on how software is developed in the industry, and all work is asynchronous, open-note, and open-internet, with collaboration, encouraged. | students must be fluent in at least one programming language, preferably an object-oriented language.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","students must be fluent in at least one programming language, preferably an object-oriented language.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-53112-1,mpcs 53112 advanced data analytics (autumn 2025),mpcs-53112-1,"chaudhary, amitabh (amitabh)",electivespecialization - data analytics (da-2),"in this course we study the algorithms and the associated distributed computing systems used in analyzing massive datasets, or big data, and in large-scale machine learning. we also cover the foundations of reinforcement learning.we focus on two fundamental ideas for scaling analysis to large datasets: (i) distributed computing, and (ii) randomization. in the former, we study how to design, implement, and evaluate data analysis algorithms for the distributed computing platforms mapreduce/hadoop and spark. in the latter, we explore techniques such as locality sensitive hashing, bloom filters, and data stream mining. they are the foundation of modern data analysis in companies such as google, facebook, and netflix.reinforcement learning refers to the situation in which you want to model your environment, but you don’t have a data set for training. instead you learn by interacting with your environment. we’ll learn algorithms that, e.g., teach themselves how to play chess by simply playing the game (against another copy of themselves) millions of times! they have applications in autonomous systems, robotics, operations research, responsive website design, stock trading, etc.a major component of the course is a quarter long project in which students build a prototype system for solving a real-world data analysis problem. examples of past student projects include movie recommendation systems, text analysis to predict stock movements, a reinforcement learning system for stock trading, diagnosing eye disease from retina images, adding components to spark’s machine learning library, building a system to play the game pong using reinforcement learning, and a deep learning system for lip reading.topics(tentative list)mapreduce frameworkdesigning and analyzing mapreduce algorithmsspark frameworkspark machine learning library (mlib)locality sensitive hashing for finding similar itemsdata stream miningfinite markov decision processesreinforcement learning algorithms: sarsa, q-learning.recommendation systemsother advanced data analysis/machine learning topics based on student interestevaluationweekly readings, programming and theory assignments, class participation: 30%three quizzes: 35%project: 35%primary textbooksmining of massive datasetsby rajaraman, leskovec, and ullman; available free online.reinforcement learning: an introductionby sutton and barto; available free online. | in this course we study the algorithms and the associated distributed computing systems used in analyzing massive datasets, or big data, and in large-scale machine learning. we also cover the foundations of reinforcement learning. | we focus on two fundamental ideas for scaling analysis to large datasets: (i) distributed computing, and (ii) randomization. in the former, we study how to design, implement, and evaluate data analysis algorithms for the distributed computing platforms mapreduce/hadoop and spark. in the latter, we explore techniques such as locality sensitive hashing, bloom filters, and data stream mining. they are the foundation of modern data analysis in companies such as google, facebook, and netflix.","the course requires mathematical, algorithmic, and programming maturity. students are expected to know the following:programming in python: use of lists, dictionaries, conditionals, classes, and reading from and writing to files.data structures: such as trees, graphs, and hash tables.basic multivariate calculus: including differentiation, integration, and finding maxima and minima.basic linear algebra: vectors, matrices, and matrix multiplication.further, students should be prepared to learning new libraries, languages (e.g., scala), and programming paradigms.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that does not conflict with any other classes this quarter.,bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,mpcs 50103 math for computer sciencempcs 55001 algorithmsmpcs 51042 python programming (or programming core requirement with prior knowledge of python)mpcs 53110 foundations of computational data analysismpcs 53111 machine learningin all the above courses a grade of b+ or above is required.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51100-1,mpcs 51100 advanced programming (autumn 2025),mpcs-51100-1,"siegel, andrew (siegela)",core programming,"course descriptionmpcs 51100 - advanced programming fulfils the mpcs core programming requirement, but is intended for students who are joining the program with an existing degree in computer science, or with substantial experience in programming. this course will be taught primarily in c, including an accelerated introduction to the c language for students who have not used c before. the course will cover advanced data structures and topics in concurrent and multicore programming not covered in the java programming or c programming courses.contentsweek 1: c intensive overviewweek 2: treesweek 3: hash tablesweek 4: union findsweek 5: graphsweek 6: intro to multicore/pthreads programming modelweek 7: applications of multicore -- example problemsweek 8: alternative approaches: java task-based, openmp, etfc.week 9: building larger codes: software engineering, abstraction, development tools, compilers, etc.week 10: course projects/special topicsnote:although some of the above topics overlap with topics covered in c programming and java programming, they are covered in more depth (and at a faster pace) in this class. | mpcs 51100 - advanced programming fulfils the mpcs core programming requirement, but is intended for students who are joining the program with an existing degree in computer science, or with substantial experience in programming. this course will be taught primarily in c, including an accelerated introduction to the c language for students who have not used c before. the course will cover advanced data structures and topics in concurrent and multicore programming not covered in the java programming or c programming courses. | note:although some of the above topics overlap with topics covered in c programming and java programming, they are covered in more depth (and at a faster pace) in this class.",this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation.capp and macss students interested in taking this class should talk with their program's advisor.,this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (new) placement: pass i + ii (w/ advanced)masters program in computer science (new) placement: pass i + ii (w/ advanced),must receive a pass on the mpcs programming placement exam i and mpcs programming placement exam ii. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.mpcs students can not take this class if they have already taken a core programming class. only one core programming class will be counted towards mpcs degree requirements. this can not be counted as an elective class.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-55001-1,mpcs 55001 algorithms (autumn 2025),mpcs-55001-1,"brady, geraldine (gb52)",core theory,"course descriptionthe focus of this course is on the design and analysis of efficient algorithms, through the study of various algorithmic problems in different topics. weekly homework assignments in theory and programming develop strong problem-solving skills. in addition to solving interesting homework problems employing various algorithmic techniques, students learn to implement their algorithmic ideas in python in solving a programming problem each week. at the end of the course, the theory of np-completeness is introduced, and some of the many interesting and important problems for which there are no known efficient algorithms are presented. the course goal is to teach students the skills to design new algorithms and to understand both mathematical and applied aspects of algorithm efficiency and correctness. hands-on work in algorithm design and original homework problems written specially for this course are student favorites.course contenttopics include design techniques: divide-and-conquer; randomization; dynamic programming; some common data structures used to speed up the the performance of many algorithms: hash tables, heaps, and binary search trees; a series of interesting graph problems on graph search, shortest paths; minimum spanning trees, and network flow; and finally an introduction to linear programming, an algorithmic technique which is widely used in optimization and in industry applications of algorithms. the course concludes by introducing the theory of np-completeness and presenting some np-complete problems and interesting reduction techniques used in their study.courseworklectures and class discussion: students are responsible for all material presented in lectures/class meetings.homework: all students are required to submit weekly homework to pass the course. weekly homework assignments will be posted after class and are due the day before class on the following week. theory homework must be submitted electronically in latex. homework will include a weekly programming assignment in python.exams: midterm exam (week 5) and final exam (week 10). there will be no make-up exams.quizzes: weekly quizzes will be given at the beginning of class, starting with week 2.course gradethe course grade is based on homework and exams:homework assignments: 12%quizzes: 8%midterm exam: 30%final exam: 50%textbooksintroduction to algorithms(third edition) by t. h. cormen, c. e. leiserson, r. l. rivest, and c. stein (isbn 978-0-262-03384-8);algorithmsby s. dasgupta, c.h. papadimitriou, and u. v. vaziran (isn 978-0073523408);algorithm designby j. kleinberg and e. tardos (isbn 0-321-29535-8). | the focus of this course is on the design and analysis of efficient algorithms, through the study of various algorithmic problems in different topics. weekly homework assignments in theory and programming develop strong problem-solving skills. in addition to solving interesting homework problems employing various algorithmic techniques, students learn to implement their algorithmic ideas in python in solving a programming problem each week. at the end of the course, the theory of np-completeness is introduced, and some of the many interesting and important problems for which there are no known efficient algorithms are presented. the course goal is to teach students the skills to design new algorithms and to understand both mathematical and applied aspects of algorithm efficiency and correctness. hands-on work in algorithm design and original homework problems written specially for this course are student favorites. | course contenttopics include design techniques: divide-and-conquer; randomization; dynamic programming; some common data structures used to speed up the the performance of many algorithms: hash tables, heaps, and binary search trees; a series of interesting graph problems on graph search, shortest paths; minimum spanning trees, and network flow; and finally an introduction to linear programming, an algorithmic technique which is widely used in optimization and in industry applications of algorithms. the course concludes by introducing the theory of np-completeness and presenting some np-complete problems and interesting reduction techniques used in their study.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),mpcs 50103 discrete math (immersion math) or a passing score on the mpcs math placement exam. core programming (completed or concurrently taking) or a core waiver for programming.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-52560-1,mpcs 52560 applied financial technology (autumn 2025),mpcs-52560-1,—,elective,"applied financial technology (fintech) is an applied, survey-based course into the concepts and technology underpinning financial innovation today. themes covered include us equities and trading algorithms, bond valuation, payments apis, and asset tokenization and are based on the instructor's active and broad experience as a fintech entrepreneur and passion for finance and economics.students will be expected to do some amount of coding in python or javascript each week. work will be group-based throughout the quarter with the exception of an individual final.readings also will play a key role in understanding elements of finance which are not specifically related to technology. these foundational concepts will provide the student with a solid appreciation of sound financial innovation across time and avoid some of the trappings of speculative manias that financial innovation can produce.we will have a weekly, current topics sessions where we do a quick dive into different themes that are timely and in the news. previous discussions have included cryptocurrencies, stablecoins, inflation, interest rate changes, and more. these enable us to balance a set curriculum with some of the items that emerge unexpectedly each week and also enable us to draw on our growing knowledge of fintech.module 1: us equities tradingprogramming languages: & frameworkspythonquantconnecttopics coveredprices and technical analysisfama french factorsmodule 2: bond and mortgage-backed security valuationprogramming languages & frameworkjavascripttypescriptreactserverless cloudtopics covered include:interest ratesyield curvecashflow analysisyield-to-maturitymortgage loans, prepayments, and defaultsmodule 3: payments, identity and creditprogramming languages & framworkjavascripttypescriptreactplaid / stripe / equifax / estated / oasis parcelserverless cloudtopics covered includefintech programming workflowsconsiderations in managing sensitive datamodule 4: asset tokenizationprogramming languages & frameworkjavascripttypescripthedera hashgraphtopics covered includefungible tokensnon-fungible tokenstokenizationdefi ecosystems | applied financial technology (fintech) is an applied, survey-based course into the concepts and technology underpinning financial innovation today. themes covered include us equities and trading algorithms, bond valuation, payments apis, and asset tokenization and are based on the instructor's active and broad experience as a fintech entrepreneur and passion for finance and economics. | students will be expected to do some amount of coding in python or javascript each week. work will be group-based throughout the quarter with the exception of an individual final.","interest in finance. some experience with python and/or javascript will be helpful but not required.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-53014-1,mpcs 53014 big data application architecture (autumn 2025),mpcs-53014-1,"spertus, michael (spertus)",electivespecialization - data analytics (da-2),"the purpose of this class is to learn how to build applications at scale, by providing you with the techniques and tools capable of providing subsecond response times to millions of users interacting with petabytes of data.in this course, we will cover both the theory and practice of building big data application. we will not only learn how to use technologies such as hdfs, mapreduce, spark, kafka, hive, thrift, hbase, zookeeper, columnar stores, etc., but also understand why big data applications employ such a diverse array of technologies and where each one of them fits.we will demonstrate the practice of big data application architecture by implementing a running big data web application for exploring the relationship between weather and flight performance utilizing all of the weather and flight delay information in the united states over the last decade to explore the relationship between weather and flight perforrmance.to develop a sound understanding of the theory of big data, we will learn about important formulations of big data application architectures, such as nathan marz' lambda architecture, proper use of normalized and denormalized data stores within large-scale web applications, application of the cap theorem, etc. we will also continuously keep in mind important additional topics that invariably arise in real world applications of big data, such as budgeting, compliance, etc..students are required to bring a laptop to class every week.course contentsoverview of big datalambda architecturedata model/storagebatch layerserving layerspeed layertechnologies including hadoop/spark/hive/hbase and other nosql databases/thrift/zookeeper etc.scraping and cleaning datacourseworkthere will be weekly homework assignments on particular topics. at the end of the course, each student will do a big data web application on a topic of their choice that interests them. past projects have included analyzing divvy bike rental trends, looking at the effect of weather on chicago crime data, protein folding, data mining wikipedia, and more. in addition to being cool, discovering that one knows everything they need to develop a complete big data web application is a great experience.relationship to other mpcs big data coursesthis course focuses on the topic of architecting large scale big data applications. however, it only lightly touches on other big data-relevant topics like managing infrastructure in the public cloud or big data machine learning algorithms (we do discuss how to adapt traditional analytics queries to big data environments). while the course is complete on its own and will leave you in a position where you are comfortable building enterprise-grade big data web applications, regardless of what other courses you take, it also complements other big data courses. one useful way to view it would be that if you develop a powerful new big data analytic using machine learning techniques from and ml course, this course will teach you how to architect and implement a big data web application that can be used by millions of users on petabytes of data that leverages the new analytic, which can then be deployed in the public cloud using paas and iaas techniques taught in a cloud computing class. | the purpose of this class is to learn how to build applications at scale, by providing you with the techniques and tools capable of providing subsecond response times to millions of users interacting with petabytes of data.in this course, we will cover both the theory and practice of building big data application. we will not only learn how to use technologies such as hdfs, mapreduce, spark, kafka, hive, thrift, hbase, zookeeper, columnar stores, etc., but also understand why big data applications employ such a diverse array of technologies and where each one of them fits.we will demonstrate the practice of big data application architecture by implementing a running big data web application for exploring the relationship between weather and flight performance utilizing all of the weather and flight delay information in the united states over the last decade to explore the relationship between weather and flight perforrmance.to develop a sound understanding of the theory of big data, we will learn about important formulations of big data application architectures, such as nathan marz' lambda architecture, proper use of normalized and denormalized data stores within large-scale web applications, application of the cap theorem, etc. we will also continuously keep in mind important additional topics that invariably arise in real world applications of big data, such as budgeting, compliance, etc..students are required to bring a laptop to class every week. | courseworkthere will be weekly homework assignments on particular topics. at the end of the course, each student will do a big data web application on a topic of their choice that interests them. past projects have included analyzing divvy bike rental trends, looking at the effect of weather on chicago crime data, protein folding, data mining wikipedia, and more. in addition to being cool, discovering that one knows everything they need to develop a complete big data web application is a great experience.relationship to other mpcs big data coursesthis course focuses on the topic of architecting large scale big data applications. however, it only lightly touches on other big data-relevant topics like managing infrastructure in the public cloud or big data machine learning algorithms (we do discuss how to adapt traditional analytics queries to big data environments). while the course is complete on its own and will leave you in a position where you are comfortable building enterprise-grade big data web applications, regardless of what other courses you take, it also complements other big data courses. one useful way to view it would be that if you develop a powerful new big data analytic using machine learning techniques from and ml course, this course will teach you how to architect and implement a big data web application that can be used by millions of users on petabytes of data that leverages the new analytic, which can then be deployed in the public cloud using paas and iaas techniques taught in a cloud computing class.","very basic programming skills in java. basic linux it skills.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming requirement
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51083-1,mpcs 51083 cloud computing (autumn 2025),mpcs-51083-1,"vasiliadis, vasilios (vas)",electivespecialization - application development (app-2),"cloud computing is being widely adopted by enterprises of all sizes due to the low initial investment required, attractive operating costs, and elastic capacity that can best serve the highly variable demands of modern applications. software engineers must be familiar with cloud computing technologies since many new applications they develop will be deployed “in the cloud”, and existing applications will often require integration with cloud-hosted services to take advantage of new capabilities.this course provides an introduction to cloud computing with specific consideration for application development in two contexts: highly scalable (or so-called “web-scale”) applications, and enterprise applications in a hybrid environment comprising both on-premises and cloud infrastructure. we will focus primarily on infrastructure and platform services, and will introduce software-as-a-service from the perspective of a consuming application. the course will emphasize practical applications of cloud computing technologies, with sufficient exploration of their theoretical underpinnings to inform architectural, design, and implementation decisions. we will use commercial cloud offerings provided by amazon web services to build and deploy ""real” cloud-hosted applications.please refer to the course website abovefor details on course content and logistics. | cloud computing is being widely adopted by enterprises of all sizes due to the low initial investment required, attractive operating costs, and elastic capacity that can best serve the highly variable demands of modern applications. software engineers must be familiar with cloud computing technologies since many new applications they develop will be deployed “in the cloud”, and existing applications will often require integration with cloud-hosted services to take advantage of new capabilities.this course provides an introduction to cloud computing with specific consideration for application development in two contexts: highly scalable (or so-called “web-scale”) applications, and enterprise applications in a hybrid environment comprising both on-premises and cloud infrastructure. we will focus primarily on infrastructure and platform services, and will introduce software-as-a-service from the perspective of a consuming application. the course will emphasize practical applications of cloud computing technologies, with sufficient exploration of their theoretical underpinnings to inform architectural, design, and implementation decisions. we will use commercial cloud offerings provided by amazon web services to build and deploy ""real” cloud-hosted applications.please refer to the course website abovefor details on course content and logistics. | core programming completed.mpcs 52553 web development (not required, but strongly recommended)","this course assumes no prior knowledge of cloud computing. programming assignments require familiarity with python and use of linux commands, as well as simple shell scripts. we will use the boto3 library to access amazon web services, and most assignments, including the capstone project, will make use of flask, a python-based micro-framework for web applications. a brief overview of boto3 and the web framework will be provided; additional concepts will be introduced as they are needed to complete assignments. knowledge of web application development is not required, but students with no web development experience will find some assignments very challenging. ideally, students should understand the fundamentals of web apis in general, and the rest approach in particular. an understanding of database concepts, such as referential integrity and acid properties, is also useful.note: students in past courses have struggled to keep up with homework assignments due to limited experience with python and knowledge of the linux command line. see the notes on this page for more detail on expected knowledge: http://home.uchicago.edu/vas/#prerequisites. if you have doubts about your proficiency in these areas please talk with the instructor before signing up for the course.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"core programming completed.mpcs 52553 web development (not required, but strongly recommended)"
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-50101-1,mpcs 50101 concepts of programming (autumn 2025),mpcs-50101-1,"binkowski, thomas (abinkowski)",immersion programming,"course descriptionin this course students will get an introduction to the field of computer science by learning to program in python. students will write code each week, learning the essentials of how to solve real-world problems in an object-oriented programming language. we will learn about fundamental data structures and algorithms, professional coding practices, algorithm design, automated testing, and the fundamentals of object-oriented programming.in mpcs 50101, we provide an immersive introduction to programming for students who may not have prior experience. we will use the python programming language to explore general-purpose computer programming and algorithmic reasoning, in an object-oriented context.course contentduring this course, students will learn:how to construct algorithms, and express them as computer programs;how to refine and improve programs by an iterative process;the core principles of object-oriented programming;fundamental data structures: arrays, sets, maps, and trees;the basics of computational efficiency and ""big o"" notation.courseworkhomework is worth a total of 50%. there will be 9 weekly assignments. the lowest homework grade will be dropped.the midterm is worth 20% and will cover material through week 5.the final exam is worth 30%. | in this course students will get an introduction to the field of computer science by learning to program in python. students will write code each week, learning the essentials of how to solve real-world problems in an object-oriented programming language. we will learn about fundamental data structures and algorithms, professional coding practices, algorithm design, automated testing, and the fundamentals of object-oriented programming. | in mpcs 50101, we provide an immersive introduction to programming for students who may not have prior experience. we will use the python programming language to explore general-purpose computer programming and algorithmic reasoning, in an object-oriented context.","mpcs students only. note, after completing mpcs 50101 concepts of programming, students are only eligible to take to take mpcs 51036 java or mpcs 51042 python as their mpcs core programming course. if you have a background in programming and are interested in taking a more advanced core programming class in the autumn quarter, you should plan to to take the mpcs programming placement exam for proper course placement.",this class is scheduled at a time that does not conflict with any other classes this quarter.,masters program in computer sciencemasters program in computer science (immersion),
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51040-1,mpcs 51040 c programming (autumn 2025),mpcs-51040-1,—,core programming,"summarythis is an accelerated introduction to the c (not c++) programming language designed for students with prior programming experience. c is in many ways the lingua franca of computing, and a broad range of programming languages and related technologies derive from the basic principles of c memory management, control flow, and abstraction. though there are many subtleties, c is not a big language, and it is expected that students will leave the course with a relatively deep understanding of the key concepts, which will then form a solid foundation for studying higher-level technologies. at the same time, c itself remains a very practical language, particularly so in areas such as scientific programming, high-performance computing, application level library design, systems programming, network programming, multi-threaded programming, etc. students who successfully complete the course will be well prepared for subsequent mpcs courses in these areas. the course studies both fundamental and advanced c language constructs in the abstract and reinforces them through a range of exercises in the design of basic and advanced data structures, rudimentary algorithms, and api design.the course teaches focuses on c11 or iso/iec 9899:2011.course contentstutorial introduction; types, control flow, functions and program structurebuild tools, preprocessor, compiling and linking.debuggingunit testingpointers and arrayspointers and array, part ii; recursionstructures, unions, bit-fields, typedefdata structures: linked lists, stacks, queues, sets, hash tables, trees, heapsalgorithms: coding classical sorting and searching algorithms, algorithmic analysismulticore programming: threads & synhronizationcoursework8 homework assignments, each with 1 week to complete. all programming.1-2 quizzesfinal projectnotes:the information listed here is the intended course content and format. the instructor reserves the right to adjust the content and format based on class progress, experience and class preference.a version control system (git) will be used for distribution of materials and for handing in assignments.bringing a laptop to class is encouraged but not required.all assignments will be compiled and graded on the mpcs linux servers (linux.cs.uchicago.edu); basic familiarity with unix/linux is assumed.this is a mostly hands-on course.plan for a non-trivial amount of time to work on the programming homeworks.homeworks focus on gaining practical programming experience.textskernhigan and ritchie, ""c programming, second edition"" isbn: 131103628 (k&r) (optional)loudon, ""mastering algorithms with c"" isbn: 1565924533 (ma) (optional)prinz and crawford, ""c in a nutshell"" isbn: 0596006977 (cn) (optional)harbison and steele, ""c: a reference manual"" isbn: 013089592x (optional) | summarythis is an accelerated introduction to the c (not c++) programming language designed for students with prior programming experience. c is in many ways the lingua franca of computing, and a broad range of programming languages and related technologies derive from the basic principles of c memory management, control flow, and abstraction. though there are many subtleties, c is not a big language, and it is expected that students will leave the course with a relatively deep understanding of the key concepts, which will then form a solid foundation for studying higher-level technologies. at the same time, c itself remains a very practical language, particularly so in areas such as scientific programming, high-performance computing, application level library design, systems programming, network programming, multi-threaded programming, etc. students who successfully complete the course will be well prepared for subsequent mpcs courses in these areas. the course studies both fundamental and advanced c language constructs in the abstract and reinforces them through a range of exercises in the design of basic and advanced data structures, rudimentary algorithms, and api design.the course teaches focuses on c11 or iso/iec 9899:2011. | 8 homework assignments, each with 1 week to complete. all programming.","capp, macss and msme students interested in taking this class should talk with their program's advisor.this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in computational analysis in public policy (new) placement: pass i + ii (w/ advanced)ms in computational analysis in public policy (new) placement: pass i + iimasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced),must receive a pass on the mpcs programming placement exam i and mpcs programming placement exam ii. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.mpcs students can not take this class if they have already taken a core programming class. only one core programming class will be counted towards mpcs degree requirements. this can not be counted as an elective class.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-53001-1,mpcs 53001 databases (autumn 2025),mpcs-53001-1,"almhana, rafi (ralmhana)",core systemselective,"course overview [watch video]course descriptionin this course students will learn database design and development and will build a simple but complete web application powered by a relational database.we start by gathering requirements and showing how to model a relational database using an entity-relationship diagram (erd). concepts covered include entity sets and relationships, using keys as a unique identifier for each object in an entity set, one-one, many-one, and many-many relationships as well as translational rules from conceptual modeling (erd) to relational table definitions. we will examine the relational model and functional dependencies along with their application to the methods for improving database design: normal forms and normalization.after designing and modeling their database, students will learn the universal language of relational databases: sql (structured query language). we will first introduce relational algebra, the theoretical foundation of sql and then examine in detail the two main aspects of sql: data definition language (ddl) and data manipulation language (dml). concepts covered include subqueries, aggregation, various types of joins, functions, triggers and stored procedures. students will then learn about web connectivity, as they build a simple front-end for their application in order to interact with their database online. finally, we will provide an overview of related topics such as data warehousing, big data, nosql and newsql databases.students will gain significant experience with writing and reading sql queries and understanding the design and function of relational databases throughout the course in the detailed in-class discussions, online homework, midterm and the real-world individual project.course contents• requirements gatheringentity-relationship model and designdatabase designrelational modelfunctional dependenciesnormal forms and normalizationrelational algebrasql: schema definition, simple queriessubqueries, aggregation, modificationsjoins, views, indexing, constraintstransactions, acid propertiesauthorizationtriggersfunctions/stored proceduresdatabase connectivitybasic web programmingdata warehousing overviewbig data/nosql overviewcourseworkhomework (weekly) (~15%)multi-part project (weekly) (~50%)midterm (~30%)class participation (~5%)recommended textbooksdatabase system concepts seventh editionhttps://www.db-book.com/db7/index.html | in this course students will learn database design and development and will build a simple but complete web application powered by a relational database.we start by gathering requirements and showing how to model a relational database using an entity-relationship diagram (erd). concepts covered include entity sets and relationships, using keys as a unique identifier for each object in an entity set, one-one, many-one, and many-many relationships as well as translational rules from conceptual modeling (erd) to relational table definitions. we will examine the relational model and functional dependencies along with their application to the methods for improving database design: normal forms and normalization. | after designing and modeling their database, students will learn the universal language of relational databases: sql (structured query language). we will first introduce relational algebra, the theoretical foundation of sql and then examine in detail the two main aspects of sql: data definition language (ddl) and data manipulation language (dml). concepts covered include subqueries, aggregation, various types of joins, functions, triggers and stored procedures. students will then learn about web connectivity, as they build a simple front-end for their application in order to interact with their database online. finally, we will provide an overview of related topics such as data warehousing, big data, nosql and newsql databases.students will gain significant experience with writing and reading sql queries and understanding the design and function of relational databases throughout the course in the detailed in-class discussions, online homework, midterm and the real-world individual project.",this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation. continuing students who previously attended the mpcs unix bootcamp have covered the required material. continuing students who did not attend the mpcs unix bootcamp may review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.,this class is scheduled at a time that does not conflict with any other classes this quarter.,bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (new) placement: pass imasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced),core programmingthis course can not be taken if you are taking or have already completed mpcs 53020 foundations of database systems. there is significant overlap between the two courses.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-53001-2,mpcs 53001 databases (autumn 2025),mpcs-53001-2,—,core systemselective,"course description:this course introduces the fundamental concepts associated with the design and work of databases, including 1) the main steps to design a database and the entity-relationship (er) model for an initial database design; 2) the different categories of data and an overview on the other data models with a comparison between sql and nosql databases; 3) the essential properties and theories (acid, base, and cap) for the work of a database.the course focuses on three main types of databases: 1) relational sql-based, where we learn about the relational data model, the normalization forms for an optimized design, and the structured query language (sql) to build relational databases and to store, manipulate, and retrieve data (using mysql rdbms); 2) document-based nosql, where we learn about the document data model (using mongodb) and the mongodb query language (mql); and 3) graph-based nosql, where we learn about the graph data model (using neo4j) and the graph query language (neo4j's cypher).the students, in the final project, will design and implement a database for a system/scenario of their choice, then develop a user interface (e.g., web-based) using a programming language (e.g., java, python) of their choice that connects and interacts with the created database to execute user interactions through database supported queries.course contents:an introduction:entity-relationship (er) modelsql-databases:relational data model and schema refinementstructured query language (sql):essential commands, constraints, and operatorsjoin operator, aggregate functions, and nested queries.interfacing java/python programming languages with sqlnosql-databases:categories of data and properties of big datamongodb: an example of document-based nosql databasesneo4j: an example of graph-based nosql databasesfurther topicscoursework:assignments [homeworks] (65%)exam (10%)group-based final project [multi-parts] (25%)class participation [bonus points] (5%)recommended (optional) textbooksdatabase systems: a practical approach to design, implementation, and management. authors: thomas connelly and carolyn begg, 6th edition.database management systems. authors: raghu ramakrishnan and johannes gehrke. 3rd edition.mongodb: the definitive guide: powerful and scalable data storage. authors: shannon bradshaw, eoin brazil, and kristina chodorow. 3rd edition.graph databases: new opportunities for connected data. authors: ian robinson, jim webber, and emil eifrem. 2nd edition. | this course introduces the fundamental concepts associated with the design and work of databases, including 1) the main steps to design a database and the entity-relationship (er) model for an initial database design; 2) the different categories of data and an overview on the other data models with a comparison between sql and nosql databases; 3) the essential properties and theories (acid, base, and cap) for the work of a database. | the course focuses on three main types of databases: 1) relational sql-based, where we learn about the relational data model, the normalization forms for an optimized design, and the structured query language (sql) to build relational databases and to store, manipulate, and retrieve data (using mysql rdbms); 2) document-based nosql, where we learn about the document data model (using mongodb) and the mongodb query language (mql); and 3) graph-based nosql, where we learn about the graph data model (using neo4j) and the graph query language (neo4j's cypher).","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programmingthis course can not be taken if you are taking or have already completed mpcs 53020 foundations of database systems. there is significant overlap between the two courses.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-52040-1,mpcs 52040 distributed systems (autumn 2025),mpcs-52040-1,—,core systemselective,"course descriptionthis course focuses on the theory and practice of distributed systems. modern applications and services are increasingly distributed due to growing data sizes, plateauing sequential processing power, and the enormous number of connected devices. virtually all web, mobile, and even pc applications now rely on networked services, calling out to backend servers to perform various functions, and many individual applications are implemented as a collection of cooperating processes or services. for example, distributed systems are used in massively multiplayer online games, cloud services, e-commerce and banking systems, peer-to-peer networks, social network, self-driving cars, telecommunication systems, and distributed databases and file systems.in this course we will explore the need for distributed systems, understand characteristics of distributed systems, investigate where distributed systems are used, review the unique challenges of distributed systems, analyze solutions for common distributed systems problems, and gain practical knowledge of the systems and algorithms for building real distributed systems.course contentsthe course will cover the following topics:·distributed architectures·processes and threads·networking and communication mechanisms·naming and mapping·synchronization·distributed time and ordering·consistency·fault tolerance·distributed consensus·distributed data·data intensive computingcourseworkthe course will include weekly homework, two exams, and one project.the weekly assignments will include a mix of practice problems and programming assignments designed to reinforce materials covered in lectures.the project will be a 4-week team project that provides the opportunity to apply skills learned in lectures to develop a distributed system.the final grade will be determined as follows:·homework assignments: 20%·project: 35%·midterm exam: 10%·final exam: 35%textbookthe course will use the following textbook:maarten van steen and andrew tanenbaum, distributed systems 3rdedition | course descriptionthis course focuses on the theory and practice of distributed systems. modern applications and services are increasingly distributed due to growing data sizes, plateauing sequential processing power, and the enormous number of connected devices. virtually all web, mobile, and even pc applications now rely on networked services, calling out to backend servers to perform various functions, and many individual applications are implemented as a collection of cooperating processes or services. for example, distributed systems are used in massively multiplayer online games, cloud services, e-commerce and banking systems, peer-to-peer networks, social network, self-driving cars, telecommunication systems, and distributed databases and file systems.in this course we will explore the need for distributed systems, understand characteristics of distributed systems, investigate where distributed systems are used, review the unique challenges of distributed systems, analyze solutions for common distributed systems problems, and gain practical knowledge of the systems and algorithms for building real distributed systems.course contentsthe course will cover the following topics:·distributed architectures·processes and threads·networking and communication mechanisms·naming and mapping·synchronization·distributed time and ordering·consistency·fault tolerance·distributed consensus·distributed data·data intensive computingcourseworkthe course will include weekly homework, two exams, and one project.the weekly assignments will include a mix of practice problems and programming assignments designed to reinforce materials covered in lectures.the project will be a 4-week team project that provides the opportunity to apply skills learned in lectures to develop a distributed system.the final grade will be determined as follows:·homework assignments: 20%·project: 35%·midterm exam: 10%·final exam: 35%textbookthe course will use the following textbook: | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-52040-2,mpcs 52040 distributed systems (autumn 2025),mpcs-52040-2,"skluzacek, tyler (skluzacek)",core systemselective,"course descriptionthis course focuses on the theory and practice of distributed systems. modern applications and services are increasingly distributed due to growing data sizes, plateauing sequential processing power, and the enormous number of connected devices. virtually all web, mobile, and even pc applications now rely on networked services, calling out to backend servers to perform various functions, and many individual applications are implemented as a collection of cooperating processes or services. for example, distributed systems are used in massively multiplayer online games, cloud services, e-commerce and banking systems, peer-to-peer networks, social network, self-driving cars, telecommunication systems, and distributed databases and file systems.in this course we will explore the need for distributed systems, understand characteristics of distributed systems, investigate where distributed systems are used, review the unique challenges of distributed systems, analyze solutions for common distributed systems problems, and gain practical knowledge of the systems and algorithms for building real distributed systems.course contentsthe course will cover the following topics:·distributed architectures·processes and threads·networking and communication mechanisms·naming and mapping·synchronization·distributed time and ordering·consistency·fault tolerance·distributed consensus·distributed data·data intensive computingcourseworkthe course will include weekly homework, two exams, and one project.the weekly assignments will include a mix of practice problems and programming assignments designed to reinforce materials covered in lectures.the project will be a 4-week team project that provides the opportunity to apply skills learned in lectures to develop a distributed system.the final grade will be determined as follows:·homework assignments: 20%·project: 35%·midterm exam: 10%·final exam: 35%textbookthe course will use the following textbook:maarten van steen and andrew tanenbaum, distributed systems 4th edition | course descriptionthis course focuses on the theory and practice of distributed systems. modern applications and services are increasingly distributed due to growing data sizes, plateauing sequential processing power, and the enormous number of connected devices. virtually all web, mobile, and even pc applications now rely on networked services, calling out to backend servers to perform various functions, and many individual applications are implemented as a collection of cooperating processes or services. for example, distributed systems are used in massively multiplayer online games, cloud services, e-commerce and banking systems, peer-to-peer networks, social network, self-driving cars, telecommunication systems, and distributed databases and file systems.in this course we will explore the need for distributed systems, understand characteristics of distributed systems, investigate where distributed systems are used, review the unique challenges of distributed systems, analyze solutions for common distributed systems problems, and gain practical knowledge of the systems and algorithms for building real distributed systems.course contentsthe course will cover the following topics:·distributed architectures·processes and threads·networking and communication mechanisms·naming and mapping·synchronization·distributed time and ordering·consistency·fault tolerance·distributed consensus·distributed data·data intensive computingcourseworkthe course will include weekly homework, two exams, and one project.the weekly assignments will include a mix of practice problems and programming assignments designed to reinforce materials covered in lectures.the project will be a 4-week team project that provides the opportunity to apply skills learned in lectures to develop a distributed system.the final grade will be determined as follows:·homework assignments: 20%·project: 35%·midterm exam: 10%·final exam: 35%textbookthe course will use the following textbook: | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51400-1,mpcs 51400 functional programming (autumn 2025),mpcs-51400-1,—,core systemselective,"course descriptionthis course will provide an introduction to software development in the functional paradigm, with a focus on pure, statically-typed functional programming. the functional paradigm isn't a language or technology--it's an entire school of thought on what a computer program is and how to write one. it has a long history, based on a model of computation developed by the mathematician alonzo church in the 30s. the functional paradigm contrasts with the imperative paradigm, which most of today's existing software is written in. but although the functional paradigm has yet to go fully mainstream, the imperative world has been taking most of its bleeding-edge ideas about software design from the functional world, particularly in recent years. and to all appearances, that trend is on the rise, with expansive new purely functional software and tooling currently under development at companies like facebook, google, microsoft, github, and countless others. in addition, the library ecosystem for languages such as haskell and ocaml has become sufficiently rich and extensive that an increasing proportion of today's successful software companies (including jane street capital and input-output) have been able to develop their entire code base purely functionally.there are a lot of ways to characterize the difference between programming in the functional style and programming in the imperative style. but just to whet your appetite, the language we will be working with has the following distinctive features:+ every data structure is immutable+ there is no shared state between functions+ every expression must be well-typed at compile time+ types can be inferred, and therefore need not be declared+ data modeling is done using algebraic data types+ functions can be made general-purpose with polymorphic types+ interfaces are built using ad-hoc polymorphism, a.k.a. 'type classes'the language of this course is haskell. haskell is arguably the main agenda-setter for the functional paradigm, and it is also somewhat challenging to learn outside of a class. at least in the opinion of this instructor, knowing your way around haskell puts you in an excellent position to get going with other functional languages. that said, although we will spend a lot of time becoming intimately acquainted with haskell, the main goal of this class is to focus on big-picture concepts that can be readily ported to other languages and technologies--in some cases including languages with limited support for the functional style. the functional style offers a wide array of data structures, patterns, and techniques that are nearly indispensable for writing clean, modular, maintainable, bug-free code that runs blazingly fast. these are all methods that any software developer can benefit from having in their personal toolkit.course contentthe week-by-week breakdown of topics will be as follows:week 1: haskell basics, linked lists, recursionweek 2: point-free, lazy evaluation, algebraic datatypesweek 3: type classes, basic io, maybe and eitherweek 4: functors, intro to applicatives and monadsweek 5: more monads, a little more ioweek 6: midterm exam, the state monadweek 7: intro to applicative parsingweek 8: monad transformersweek 9: lazy evaluation, conclusion, final projectcourseworkwork for the course consists of short weekly readings, weekly code exercises, a midterm exam, and a final project. the weekly exercises are intended to be challenging but hopefully also fun. they will not presuppose any prior familiarity with functional programming. the bulk of the final project is written piecemeal every week as part of the homework, with the final two weeks set aside for finalizing it.course textbooksthe main text for this class is the homework assignments, which are intended to be read week by week, like a textbook. however, we will also be reading the first half offinding success (and failure) in haskell, by julie moronuki and chris martin, which can be purchased here:https://leanpub.com/finding-success-in-haskellmoronuki and martin's book is simply incredible, and highly recommended for anyone who would like to get started with haskell.we won't be using any general textbook in this class, but if you are looking for a general-purpose haskell book to use for reference, graham hutton'sprogramming in haskell(second edition) is excellent:http://www.cs.nott.ac.uk/~pszgmh/pih.html | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/ | this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-57200-1,mpcs 57200 generative ai (autumn 2025),mpcs-57200-1,"spertus, michael (spertus)",electivespecialization - data analytics (da-2),"overviewrecent generative ai systems such as chatgpt, dall-e, and github copilot have shown its applicability to a wide range of problem domains, and it is quickly becoming a valuable tool in the software developer's toolbox.this course will provide an experienced software developer with no experience in machine learning witha conceptual understanding of the basic concepts of generative aihow to build generative ai systems to generate output targeting their domain of interesthow to deploy and integrate generative ai models into production applicationsconceptshistory of generative aineural network conceptsthe fundamental equations of deep learningactivation functionstraining with gradient descentkey mathematical concepts like cross-entropy, softmax, and perplexity and their role in deep learning generative aiscaling lawsgenerative ai conceptsencoder/decoder architectures as basis for generative aithe role of the latent spacegenerative adversarial netstransformer architectures and attentionlarge language modelscustomizing generative aiwhile most engineers will not build their own production models from scratch (which typically costs tens of millions of dollars), they will need to customize them for their applicationenhanced pre-trainingfine-tuningprompt engineering and few-shot learningstrengths and weaknesses: llms are not a silver bulletcan llms reason?responsible aiincorporating generative ai into applicationsmodel deploymentlangchainthinking beyond chatbots: non-generative uses of generative ailabsgenerating text programmatically with an llmimage generation with the fashion mnist databasewith an auto-encoderimprove with a variational autoencoderaging and de-aging facesbuilding and training a very simple llm from scratchfine-tuning a modelprompt engineering playgroundresponsible ai labsgenerative adversarial netslangchaindeploying a trained model for use in productionrecommended textwhile we don't closely follow any textbook, a number of the labs and explanations follow david foster's excellent o'reilly book generative deep learning, 2nd edition (if you purchase this, make sure you get the 2nd edition). we will also look at a variety of seminal and topical papers. | recent generative ai systems such as chatgpt, dall-e, and github copilot have shown its applicability to a wide range of problem domains, and it is quickly becoming a valuable tool in the software developer's toolbox. | this course will provide an experienced software developer with no experience in machine learning with","the main prerequisite is a basic familiarity with python. we do not assume any background in machine learning or statistics.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed in any language with a b+ or better.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51046-1,mpcs 51046 intermediate python programming (autumn 2025),mpcs-51046-1,—,core programming,"python is a general-purpose programming language that is used in many application areas, including data science, machine learning/ai, web development, scientific computing, graphical user interfaces, systems programming, gaming, rapid prototyping, and more. this course provides a thorough overview of the python 3 language with an emphasis on writing idiomatic code in python and object-oriented design patterns and is suitable for students with some prior programming experience. we will develop an understanding of the core features of the languages and gain exposure to commonly used standard-library and third-party modules.","this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation.capp, macss and msme students interested in taking this class should talk with their program's advisor.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (new) placement: pass i + ii (w/ advanced)ms in computational analysis in public policy (new) placement: pass i + iimasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced),must receive a pass on the mpcs programming placement exam i and mpcs programming placement exam ii. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.mpcs students can not take this class if they have already taken a core programming class. only one core programming class will be counted towards mpcs degree requirements. this can not be counted as an elective class.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-56511-1,mpcs 56511 introduction to computer security (autumn 2025),mpcs-56511-1,"rossell, shelley (shelley)",core systemselective,"descriptionthis course introduces security principles and practices. topics will range from encryption to network, endpoint, and application threats and controls. the course will emphasize both offense (i.e., attacker mindset) and defense (the importance of implementing both technical and non-technical controls).topics● threat landscape● encryption● authentication and access control● endpoint security● network security● web and application security● risk management● monitoring and vulnerability management● incident responsecoursework● rerequired readings from freely available sources● labs and other assignments● quizzes● research paper● discussion homework | this course introduces security principles and practices. topics will range from encryption to network, endpoint, and application threats and controls. the course will emphasize both offense (i.e., attacker mindset) and defense (the importance of implementing both technical and non-technical controls). | ● rerequired readings from freely available sources","familiarity with linux command linefamiliarity with tcp/ip and network routing recommendedstudents must be able to run the labs -- either on their own machine (virtual machine) or via a cloud-based option that requires installing an sdk on the local machine. installation will be reviewed on week 1 - nothing to do in advance. this does not cost.this course requires basic competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),core programming (completed or concurrently enrolled)
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-52011-1,mpcs 52011 introduction to computer systems (autumn 2025),mpcs-52011-1,—,core systemselective,"course descriptionthis course is all about constructing your own knowledge of computer systems by building a general-purpose computer system from the ground up. the objective is to integrate key ideas from algorithms, computer architecture, operating systems, compilers, and software engineering into one unified framework. along the way, we'll explore ideas and techniques used in the design of modern hardware and software systems, and discuss major trade-offs and future trends. throughout this journey, you'll gain lots of cross-section views of the field of computer science, from the bare-bone details of switching circuits to the high-level abstraction of object-based software design. by the end of the course, you will have written a computer game in an object-oriented programming language; compiled that program into machine language using the compiler, the virtual machine language translator, and the assembler that you wrote; and run your program on (virtual) hardware that you designed.course contents and courseworkweek 1 (chapters 1-2 of the text)topics: boolean logic, combinatorical chip design, karnaugh maps, hardware description languagecoursework: use a hardware description language to build a basic chip set.week 2 (chapter 3 of the text)topics: sequential chip design, binary arithmeticcoursework: use a hardware description language to build a sequential chip set and the alu, cpu, memory for a computer.week 3 (chapters 4-5 of the text)topics: machine language, computer architecturecoursework: write and run programs in assembly language; use a hardware description language to build a working computer.week 4 (chapter 6 of the text)topics: assemblerscoursework: test 1 (in class). design, implement, test, and debug an assembler, using a programming language of your choice.week 5 (chapter 7 of the text)topics: virtual machine paradigm, stack arithmeticcoursework: design, implement, test, and debug a virtual machine translator for stack arithmetic and memory access commands, using a programming language of your choice.week 6 (chapter 8 of the text)topics: virtual machine language program controlcoursework: add function definition, and function call and return commands to the virtual machine translator.week 7 (chapter 9 of the text) (chapter 10 of the text)topics: overview of high-level object-oriented programming languagescoursework: test 2 (in class). write a small sample program in the high-level object-oriented programming language used in this course.week 8 (chapter 10 of the text)topics: compilers, syntax analysiscoursework: design, implement, test, and debug a tokenizer for an object-oriented language compiler, using a programming language of your choice.week 9 (chapters 11-12 of the text)topics: compilers, code generation, operating systemscoursework: design, implement, test, and debug a code generator for an object-oriented language compiler, using a programming language of your choice.week 10examtextbookthe elements of computing systems, second edition: building a modern computer from first principlesby nisan and schocken | this course is all about constructing your own knowledge of computer systems by building a general-purpose computer system from the ground up. the objective is to integrate key ideas from algorithms, computer architecture, operating systems, compilers, and software engineering into one unified framework. along the way, we'll explore ideas and techniques used in the design of modern hardware and software systems, and discuss major trade-offs and future trends. throughout this journey, you'll gain lots of cross-section views of the field of computer science, from the bare-bone details of switching circuits to the high-level abstraction of object-based software design. by the end of the course, you will have written a computer game in an object-oriented programming language; compiled that program into machine language using the compiler, the virtual machine language translator, and the assembler that you wrote; and run your program on (virtual) hardware that you designed. | course contents and courseworkweek 1 (chapters 1-2 of the text)","this is mostly a hands-on course, evolving around building a series of hardware and software modules. you can use any programming language you like to implement the software modules (popular choices are c, c++, java, and python), but you must be comfortable designing, writing, and debugging programs on your own; the guidance given in this course centers around what to program rather than how to program it.this class may be too advanced for students who have just taken mpcs 50101 concepts of programming. if you have an interest in this class, the recommendation is to take mpcs 51082 introduction to unix systems along with core programming before taking mpcs 52011.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),core programming (completed or concurrently enrolled)
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-56430-1,mpcs 56430 introduction to scientific computing (autumn 2025),mpcs-56430-1,"binkowski, thomas (abinkowski)",electivespecialization - high performance computing (hpc-2),"course descriptionthis course aims to introduce students to important concepts in scientific computing. students will survey topics in variety of disciplines and explore how rigorous computation is transforming the way that research conducted, experiments are executed, and data is analyzed across all scientific disciplines.the course will focus on applying a variety of strategies to solve research problems with a focus on scalable, reproducible, and collaborative work. this will include the creation, manipulation, and analysis of data sets and the application of complex algorithms. students will design and implement systems that are reliable, capable of handling vast amounts of data, and utilize best practices in interface and usability design. students will also learn to how to effectively communicate the results of their work to different audiences through written materials and presentation and to develop and provide resources for other researchers to use.while this course should be of interest for students interested in sciencetific research, techniques and approaches taught will be applicable to other fields.course contentthis course will explore the scientific computing across many disciplines, but will rely heavily on examples from computational biology and bioinformatics. this course will present a mix of practical, hands-on and theorectical approaches to scientific computing. the topics covered in this course will include: software engineering, data mining, high-performance computing, scientific communication, mathematical models and other areas of computer science that play an important role in research. students will be introduced to all of the background necessary to understand the applications of field specific algorithms and software taught in this course. there is no specific domain expertise required in any field.courseworkthis course will be assignment and project based and have no exams.the assignments will consist of a mix or literature reading, programming, modeling, and basic scientific research using online resources. assignments will reinforce the topics covered in lecture and will contain self-directed opportunities to allow students to pursue their personal interest and applications in the subject. a significant part of the programming assignments will utilize high-performance computing resources available from the university and from third-party vendors. students should be comfortable working with remote resources from the command line.students will be required to communicate their work through live-presentations, posters, and written manuscripts and will have the opportunity to pursue a research topic of their choice for the final project. | this course aims to introduce students to important concepts in scientific computing. students will survey topics in variety of disciplines and explore how rigorous computation is transforming the way that research conducted, experiments are executed, and data is analyzed across all scientific disciplines. | the course will focus on applying a variety of strategies to solve research problems with a focus on scalable, reproducible, and collaborative work. this will include the creation, manipulation, and analysis of data sets and the application of complex algorithms. students will design and implement systems that are reliable, capable of handling vast amounts of data, and utilize best practices in interface and usability design. students will also learn to how to effectively communicate the results of their work to different audiences through written materials and presentation and to develop and provide resources for other researchers to use.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.students should also be prepared to supplement their knowledge as needed.* proficient in writing complex, networked programs in python* proficient in working from the command line in a linux environment* experience in non-trivial command line scripting using bash* understand http request-response mechanisms, including request headers and response codes* comfortable working with remote apis and reading documentation* comfortable working with versional control using git",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51082-1,mpcs 51082 introduction to unix systems (autumn 2025),mpcs-51082-1,"kenneth samuels, lamont (lamonts)",core systemselective,"course descriptionthis course aims to introduce to the fundamental concepts, principles, and abstractions that underlie the design and architecture of unix systems. students will learn how a unix system works from the hardware level all the way up to the application level. the course will also focus on teaching students develop a command of the unix shell environment by ensuring a basic understanding of unix commands and utilities, and networking capabilities.students will also be able to learn about the fundamentals of systems programming in unix.after taking this course, students will develop a more-depth understanding of unix and be able to use this knowledge to better implement programs on a unix operating systems such as linux or os x.course contenttopics that will be explored in the course will include (but not limited to) the following:brief history of unix and linuxunix system architectureinteracting with a unix shellbasics of how hardware interacts with a unix operating systemunix operating system and processesshell scriptingapplication development for systems programmingunix network utilities | this course aims to introduce to the fundamental concepts, principles, and abstractions that underlie the design and architecture of unix systems. students will learn how a unix system works from the hardware level all the way up to the application level. the course will also focus on teaching students develop a command of the unix shell environment by ensuring a basic understanding of unix commands and utilities, and networking capabilities.students will also be able to learn about the fundamentals of systems programming in unix. | after taking this course, students will develop a more-depth understanding of unix and be able to use this knowledge to better implement programs on a unix operating systems such as linux or os x.","this class is intended as an entry level systems class to prepare students without a strong cs background to take more advanced systems classes. you are not eligible to take this class if you have already taken functional programming, distributed systems, advanced computer architecture, compilers, operating systems, parallel programming, foundations of computer networks, foundations of database systems or any cmsc systems class.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),core programming (completed or concurrently enrolled)
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51036-1,mpcs 51036 java programming (autumn 2025),mpcs-51036-1,—,core programming,"course descriptionjava programming is part of the core curriculum and is a fast-paced first course in java for students with some prior programming experience, though not necessarily java or any other object-oriented language. a strong emphasis will be placed on understanding the fundamentals of object-oriented programming including; inheritance, polymorphism, composition, and more generally on applying sound principles of contemporary software engineering and tools to real-world problems. in the latter half of the course, we will cover threads, design patterns, lambdas, and streams. for their final-projects, students will develop a multi-threaded, arcade-style game. the course format is both lecture and lab. we will be using git to facilitate our learning and to manage our projects. by the end of the quarter, students will have a working knowledge of git and know how to manage both local and remote repositories.course contents include: program control, file and basic i/o, objects, interfaces and abstract classes, complex object relationships, exceptions and debugging, gui programming, lambdas and streams, recursion, collections, data structures, multi-threading, and advanced topics.courseworkcoursework will be divided into four components:labsduring labs, we will use the course tools to create applications together in class. all the source code that you will need to follow along during labs will be available in a single repository that will include rich and logically-grouped commit histories, comments, and slides. the lecture hall will be outfitted with power-strips, and students are required to bring their own laptops and follow-along during labs. labs are not evaluated.projects_01control is a collection of solutions to simple connonical problems related to flow control and implemented using the command-line._02arrays is similar to _01control, but requires you to use single and multi-dimensional arrays to solve the problems. this project is also implemented using the command-line._03objects is a collection of solutions to typical object oriented problems implemented using a driver and the command-line._04interfaces is similar to _03objects, but requires the use of both abstract classes and interfaces._05gui is a dice game that you will implement using swing._06design is a solution to a vending machine where you will use crc (class - responsibility - collaboration), and uml (unified modelling language) to develop your solution._07streams is a collection of solutions to typical problems using java8+ lambdas and streams._08final is the final project. for your final project, you will create a multi-threaded game which extends base-code that will be provided to you. the game-engine is flexible and highly extendible, and you may create a wide variety of arcade-style 2d games such as asteroids, missile comand, 1941, etc.examsquarterterm exam (multiple-choice exam - 40mn in duration)final exam (multiple-choice exam - 1 hour in duration)participationclass participation is a percentage of the final grade. the participation evaluation will be based on: your questions/comments during class, your posts/replies to the listhost, your willingness to help others during lab, and your presentation of project solutions when called on to do so. also, ten finalists will be chosen to present their final-projects to the class.course textbookwe will be using ""big java: late objects, 2nd edition"" by cay horstmann as our textbook. isbn: 978-1-119-32107-1. this book is available as both print and ebook; i recommend the latter. | java programming is part of the core curriculum and is a fast-paced first course in java for students with some prior programming experience, though not necessarily java or any other object-oriented language. a strong emphasis will be placed on understanding the fundamentals of object-oriented programming including; inheritance, polymorphism, composition, and more generally on applying sound principles of contemporary software engineering and tools to real-world problems. in the latter half of the course, we will cover threads, design patterns, lambdas, and streams. for their final-projects, students will develop a multi-threaded, arcade-style game. the course format is both lecture and lab. we will be using git to facilitate our learning and to manage our projects. by the end of the quarter, students will have a working knowledge of git and know how to manage both local and remote repositories. | course contents include: program control, file and basic i/o, objects, interfaces and abstract classes, complex object relationships, exceptions and debugging, gui programming, lambdas and streams, recursion, collections, data structures, multi-threading, and advanced topics.","this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation.capp, macss and msme students interested in taking this class should talk with their program's advisor.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (new) placement: pass ims in computational analysis in public policy (new) placement: pass i + ii (w/ advanced)ms in computational analysis in public policy (new) placement: pass i + iimasters program in computer science (new) placement: pass imasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced),must have completed mpcs immersion programming (mpcs 50101 concepts of programming) or must receive a pass on the mpcs programming placement exam i. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-53111-1,mpcs 53111 machine learning (autumn 2025),mpcs-53111-1,"chaudhary, amitabh (amitabh)",electivespecialization - data analytics (da-1)specialization - high performance computing (hpc-2),"this course introduces the fundamental concepts and techniques in data mining, machine learning, and statistical modeling, and the practical know-how to apply them to real-world data through python-based software. the course examines in detail topics in both supervised and unsupervised learning. these include linear and logistic regression and regularization; classification using decision trees, nearest neighbors, naive bayes, boosting, random trees, and artificial/convolutional neural networks; clustering using k-means and expectation-maximization; and dimensionality reduction through pca and svd. students use python and python libraries such as numpy, scipy, matplotlib, and pandas for for implementing algorithms and analyzing data.apart from lectures, we conduct optional but strongly recommended problem sessions. during these the tas present homework solutions, and other optional material. these are the only source for homework solutions; in particular, we do not publish any solutions. recording or streaming the sessions are also not planned. in spring, 2019, the problem sessions are most likely to be held on sunday afternoons; but they may be moved to saturdays based on ta availability. | this course introduces the fundamental concepts and techniques in data mining, machine learning, and statistical modeling, and the practical know-how to apply them to real-world data through python-based software. the course examines in detail topics in both supervised and unsupervised learning. these include linear and logistic regression and regularization; classification using decision trees, nearest neighbors, naive bayes, boosting, random trees, and artificial/convolutional neural networks; clustering using k-means and expectation-maximization; and dimensionality reduction through pca and svd. students use python and python libraries such as numpy, scipy, matplotlib, and pandas for for implementing algorithms and analyzing data.apart from lectures, we conduct optional but strongly recommended problem sessions. during these the tas present homework solutions, and other optional material. these are the only source for homework solutions; in particular, we do not publish any solutions. recording or streaming the sessions are also not planned. in spring, 2019, the problem sessions are most likely to be held on sunday afternoons; but they may be moved to saturdays based on ta availability. | b+ or above in mpcs mpcs core programming class or a core waiver for programming. 51042 python programming or mpcs 51046 intermediate python programming recommended; all other mpcs core programming classes allowed with b+ or above and prior knowledge of python.b or above in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms.c+ or above in mpcs 53110 foundations of computational data analysis or a pass on the data analysis placement exam. if you earn lower than a b in mpcs 53110, you should reach out to the instructor to discuss if it is advisable to take mpcs 53111.students that have taken cmsc 25400/35400 are not eligible to take mpcs 53111.","univariate calculus and basic multivariate calculus (double integrals, partial derivatives, integration-by-parts, taylor series).this course assumes both mathematical maturity and programming fluency. in particular, students are expected to code complicated machine learning algorithms from scratch (without a template) and debug them on their own.non-mpcs students must complete the above prerequisites to be eligible to take this class.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,"b+ or above in mpcs mpcs core programming class or a core waiver for programming. 51042 python programming or mpcs 51046 intermediate python programming recommended; all other mpcs core programming classes allowed with b+ or above and prior knowledge of python.b or above in mpcs 55001 algorithms or mpcs 55003 intermediate algorithms.c+ or above in mpcs 53110 foundations of computational data analysis or a pass on the data analysis placement exam. if you earn lower than a b in mpcs 53110, you should reach out to the instructor to discuss if it is advisable to take mpcs 53111.students that have taken cmsc 25400/35400 are not eligible to take mpcs 53111."
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-50103-1,mpcs 50103 mathematics for computer science: discrete mathematics (autumn 2025),mpcs-50103-1,"agarwal, ishan (ishanagarwal)",immersion math,"course overview [watch video]syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class.course description:this course is an introduction to ideas and techniques from discrete mathematics that are commonly used in computer science. it emphasizes mathematical proof and problem solving, employed on a variety of useful and interesting topics: combinatorics, discrete probability, graphs, and basic number theory.on completion of the course, students will be practiced in using mathematical concepts and techniques to solve problems, and in expressing mathematical notions precisely. they will be able to use ideas and techniques from discrete mathematics in subsequent courses in computer science, in particular courses in the design and analysis of algorithms, networks, numerical methods, software engineering, data analysis, and machine learning.course contents:mathematical reasoning and proofs:an introduction to mathematical reasoning, common logical fallacies, mathematical proofs and various proof techniques including, most importantly, mathematical induction.combinatorics:counting, permutations, combinations, binomial theorem, pigeon hole principle, inclusion-exclusion principle, bijective counting, recurrences.number theory:divisibility, euclid's division algorithm, prime numbers, modular arithmetic, fermat's little theorem.discrete probability:conditional probability, independence, bayes rule, random variables, expected value, linearity of expectation, variance, markov's inequality, the probabilistic method as a proof technique.graphs:directed and undirected graphs, various representations of graphs, graph isomorphism, , graph colouring, paths, connectivity, eulerian and hamiltonian paths, trees, bipartite graphs, matchings.course activities:classes:classes will typically consist of a lecture on the topic interspersed with problem solving/ related activities.office hours:regular office hours will be held by the course instructor as well as tas. attendance is optional but highly reccomended.problem solving sessions:regular problem solving sessions will be held for the purpose of giving the students guided problem solving practice. attendance is optional but highly reccomended.course materials:the course textbook is: discrete mathematics and its applications (7th edition) (mcgraw-hill) by kenneth h. rosen (isbn 978-0073383095).the mit open courseware textbook for their mathematics for computer science course is also a good resource:mit ocw textbook.the class is intended to be self contained. complete lecture notes will be provided for all the lectures. all problems in the problem sets will also be stated in full.evaluation:the course grade will be based on homework, quizzes, a midterm and a final exam.homework: there will be weekly homework to be submitted online. you will have a homework score out of 100%quizzes (30%): there will be two pre-announced in class quizzes.midterm (25%)final (45%)the quizzes/ exams will be closed-book/notes.you will thus have a homework score out of 100% and an exam score out of 100% and these will be combined as per the table in the syllabus document.prerequisites:pre-calculus (especially familiarity with exponentials and logarithms) is a prerequisite. high school level familiarity with sets and functions, as well as common mathematical notation, will be assumed. | course overview [watch video]syllabus pdf: please look at the attachedsyllabus (winter 2025 version)for full details about the class. | this course is an introduction to ideas and techniques from discrete mathematics that are commonly used in computer science. it emphasizes mathematical proof and problem solving, employed on a variety of useful and interesting topics: combinatorics, discrete probability, graphs, and basic number theory.",course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/,this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer sciencemasters program in computer science (immersion),"mpcs 50101 concepts of programming (completed or concurrently taking), or a pass on mpcs programming placement exam i, or a core waiver for programming."
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-52060-1,mpcs 52060 parallel programming (autumn 2025),mpcs-52060-1,"hückelheim, jan (jhueckelheim)",core systemselectivespecialization - high performance computing (hpc-2),"course descriptionparallel computing is found everywhere in modern computing. multi-core cpus and gpus, supercomputers, and even mobile devices such as smartphones all provide ways to efficiently utilize parallel processing on these architectures and devices. the goal of this course is to provide an introduction to the foundations of parallel programming and to consider the performance gains and trade-offs involved in implementing and designing parallel computing systems. specifically, this course will place an emphasis on concepts related to parallel programming on multicore processors.course contentstopics that will be explored in the course will include (but not limited to) the following:processes and threadsshared memoryhardware mechanisms for parallel computingsynchronization and communication for parallel systemsperformance optimizationsparallel data structuresmemory consistency and hierarchies for parallel computingpatterns of parallel programmingparallel programming on gpusadditional topics dependent on student request and timecourseworkthe course will include weekly homework, two exams, and projects. the weekly assignments will contain practice problems to help enforce the concepts learned during a lecture. the projects provide the opportunity to apply the skills you learned to develop systems that can benefit from parallelization. potential project domains could include: ai and machine learning, computer graphics, cryptocurrency technologies, scientific visualization, etc.course textbook(s)this course will not have a required textbook. along with the lecture notes, students may find the following references helpful in undersntading the course material:the art of multiprocessor programmingby maurice herlihy and nir shavitadditional readings/references will be provided when necessary. | core programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course. | this is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.","familiarity with c, java, and/or python.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 1)ma in computational social science (year 2)bx/ms in computer science (option 1: research-oriented)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programmingthis is an advanced core systems class and we recommend that students take mpcs 51082 introduction to unix systems or mpcs 52011 introduction to computer systems before enrolling in this course.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51240-1,mpcs 51240 product management (autumn 2025),mpcs-51240-1,—,electivespecialization - software engineering (se-2),"product management is a cross-disciplinary endeavor that sits at the intersection of software engineering, marketing, and the user experience. product managers are expected to create products in support of business objectives, ensuring that products deliver value to customers and are feasible to build within varying sets of constraints. in this course, we will introduce the role of the product manager and demonstrate the challenges faced by product managers. we will explore approaches for managing the tension that exists between software development and product delivery using the minimum viable product and the product roadmap as critical tools. | this course assumes no prior knowledge of product management concepts or specific technologies. however, you may find some of the material easier to put into perspective if you're familiar with software design patterns, or have taken one of the other software engineering courses offered in the mpcs.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/. | this course assumes no prior knowledge of product management concepts or specific technologies. however, you may find some of the material easier to put into perspective if you're familiar with software design patterns, or have taken one of the other software engineering courses offered in the mpcs.","this course assumes no prior knowledge of product management concepts or specific technologies. however, you may find some of the material easier to put into perspective if you're familiar with software design patterns, or have taken one of the other software engineering courses offered in the mpcs.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51042-1,mpcs 51042 python programming (autumn 2025),mpcs-51042-1,"turk, james (jturk)",core programming,"course overview [watch video]descriptionpython is a general-purpose programming language that is used in many application areas, including webdevelopment, scientific computing, graphical user interfaces, systems programming, gaming, rapid prototyping,data mining, and more. this course provides a thorough overview of the python 3 language with an emphasison writing idiomatic code in python and object-oriented design patterns and is suitable for students with someprior programming experience. we will develop an understanding of the core features of the languages and gainexposure to commonly used standard-library and third-party modules.course formatweekly classes will provide lectures with interactive notebooks to help you follow along and practice concepts.the first several weeks will include a programming assignment expanding on the topics covered in class. the hands on programming portion will culminate in a larger multi-part project.there will also be in-person quizzes and a final exam to help you evaluate your mastery of concepts covered in this class.you arestrongly encouragedto bring a laptop to class to follow along with examples interactively.course overviewpython basics: types, variable, operations, control flow, iterationfunctions, recursion, generators and scopeclasses, objects, oop programmingdecorators and dynamic attributesthe python data modeldata structures in python (lists, stacks, hash tables, queues, trees)an overview of modules and the python standard library & ecosystem.an introduction to scientific computing and data manipulation (pandas, numpy, etc)textbookswhile there are no required textbooks for this course, the following books may be useful for reference:python distilled (1st edition)learning python (5th edition), by mark lutzfluent python (2nd edition), by luciano ramalho (1st edition ok) | textbookswhile there are no required textbooks for this course, the following books may be useful for reference: | must have completed mpcs immersion programming (mpcs 50101 concepts of programming) or must receive a pass on the mpcs programming placement exam i. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.","this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation.capp, macss and msme students interested in taking this class should talk with their program's advisor.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (new) placement: pass ims in computational analysis in public policy (new) placement: pass i + ii (w/ advanced)ms in computational analysis in public policy (new) placement: pass i + iimasters program in computer science (new) placement: pass imasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced),must have completed mpcs immersion programming (mpcs 50101 concepts of programming) or must receive a pass on the mpcs programming placement exam i. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51042-2,mpcs 51042 python programming (autumn 2025),mpcs-51042-2,"cohen, jeffrey (jeffcohen)",core programming,"note:this section differs from section 1 in class format, homework assignments, and grading policies. the overall learning outcomes remain the same.descriptionpython is a general-purpose programming language that is used in many application areas, including webdevelopment, scientific computing, graphical user interfaces, systems programming, gaming, rapid prototyping,data mining, and more. this course provides a thorough overview of the python 3 language with an emphasison writing idiomatic code in python and object-oriented design patterns and is suitable for students with someprior programming experience. we will develop an understanding of the core features of the languages and gainexposure to commonly used standard-library and third-party modules.course formatthis course is ""half-flipped,"" meaning that instead of the traditional lecture format:students are assigned weekly readings that must be completed prior to class.in class, some time will be devoted to deeper lecture and q&ain class, some of our time will be spent on graded challenges, which students may complete in groups or individuallyin addition, there will also be five homework assignments and three remote quizzes. all of these must be completed individually and asynchronously outside of class.grading policy60% of your grade is based on homework assignments, 30% take-home quizzes, and 10% in-class assignments.of the 9 in-class assignments, the lowest score is automatically excluded from your final grade.late assignments are accepted, but will incur a small penalty for each day late.ai policyai tools are allowed on homework assignments, but must be cited as having been used per assignment.however, no ai, nor any other tools, are allowed on quizzes.course overviewpython basics: types, variable, operations, control flow, iterationfunctions, recursion, generators and scopeclasses, objects, oop programmingdecorators and dynamic attributesthe python data modeldata structures in python (lists, stacks, hash tables, queues, trees)an overview of modules and the python standard library & ecosystem.an introduction to scientific computing and data manipulation (pandas, numpy, etc)textbookswhile there are no required textbooks for this course, the following books may be useful for reference:python distilled (1st edition)learning python (5th edition), by mark lutzfluent python (2nd edition), by luciano ramalho (1st edition ok) | note:this section differs from section 1 in class format, homework assignments, and grading policies. the overall learning outcomes remain the same. | textbookswhile there are no required textbooks for this course, the following books may be useful for reference:","this course requires competency in unix and linux. new students must attend the mpcs unix bootcamp during orientation.capp, macss and msme students interested in taking this class should talk with their program's advisor.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (new) placement: pass ims in computational analysis in public policy (new) placement: pass i + ii (w/ advanced)ms in computational analysis in public policy (new) placement: pass i + iimasters program in computer science (new) placement: pass imasters program in computer science (new) placement: pass i + iimasters program in computer science (new) placement: pass i + ii (w/ advanced),must have completed mpcs immersion programming (mpcs 50101 concepts of programming) or must receive a pass on the mpcs programming placement exam i. all new mpcs students should view information about the exams in the mpcs programming placement exam canvas site.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51205-1,mpcs 51205 topics in software engineering (autumn 2025),mpcs-51205-1,"shacklette, mark (jmshackl)",electivespecialization - software engineering (se-2),"course overview [watch video]this course is an intermediate approach to applied software design and development methods for use in creating efficient, reusable, and modular software. this course is offered annually but content and focus change from year to year. methods we investigate include: distributed systems, architectures including microservices, event-driven architecture, hybrid transactional/analytical processing; software frameworks and container-based software development; and advanced techniques including multi-threading and data design. a heavy focus is on design and creativity and what constitutes creative design.this course provides hands-on experience in the architecture and design of systems and a review of best practices for the communication of that design. issues in the landscape of software design, including complexity, constraints, progressive discovery, and limitations in communication will be explored. in this course,students will be organized into teamsand each team will be provided with a set of (partial) requirements and will be responsible for the analysis, design, design documentation, and implementation in source code of a project that constitutes a complex software system. each team of students will work through requirements analysis, expression of design using a modeling language, and implementation, and techniques and tools will be provided in order to facilitate the delivery.the progression of design will be peer-reviewed by the student teams. we will work within an ""agile"" design and implementation framework and adopt agile approaches to lean design. one of our efforts will be to dispel the myth that design is not performed within an agile environment.during the course and lectures, we will cover the following topics:why is design important, even in an agile environment?attributes of good design: coupling, cohesion, law of demeter, generic solutions vs. specific solutionswhat is the role of modeling in software development?documenting and communicating software design using the unified modeling language notationlean thinking and lean modelingdesign guidelines for quality, interoperability, modifiability, performance, security, testability, and maintainabilitythe role of patterns in designing software and design refactoringdecomposing systems into recognizable patterns | core programming and satisfactory completion of the unix bootcamp. | core programming and satisfactory completion of the unix bootcamp.","knowledge of java and/or c++ and/or pythonthis course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming and satisfactory completion of the unix bootcamp.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-51230-1,mpcs 51230 user interface and user experience design (autumn 2025),mpcs-51230-1,"marques, andre (andremar)",electivespecialization - software engineering (se-2)specialization - application development (app-2),"overviewinstructor: andré marques (he/him/his)email: andre.marques@uchicago.eduprerequisites: core programmingcourse website: google classroomoffice hours: tbdta: tbdta email: tbdgrader: tbdemail: tbddescriptionwhether you’re ordering a burrito, boarding a plane, chatting with friends, booking your next workout, or reading this sentence—you’re likely using software with a user interface.this course will teach you how to create useful and engaging user interfaces.we will cover different methods of approaching design problems, how to conduct research to understand users, create prototypes, discuss, present, and assess design.learning objectivesat the end of this class you will be able to:implement design processes within various contexts: personal projects, startups, and structured software development teams.understand the needs of users and identify meaningful problems to address in order to create positive experiences.create prototypes of any fidelity using contemporary design tools for web, mobile, and design systems.articulate design decisions and provide constructive feedback.course componentsin-person classtuesdays 5:30pm - 8:30pm central.lectures & demoslectures and democs will cover topics and techniques that will prepare you for each week’s assignment.student interviewsyou will interview your classmates for a variety of design activities.critiqueswe will collaborate as a class and in small groups to assess design decisions made on assignments. you will be asked to informally present your designs to peers. i will provide you with structure and guidance throughout this process.participationthis course will be offered in person; lectures will not be recorded. the expectation is that students will attend class in-person each week. due to the nature of this course, attendance is essential and required. failure to attend class on a regular basis could result in a failing grade in the course. if the class schedule doesn’t work for you, you should not take this class. if you miss more than two class sessions during the autumn quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.assessmentgrade25% participation75% assignmentslate assignmentsyou can submit up to 2 late assignments, however you must contact me within 24hrs of the original deadline to coordinate an extension. failure to submit assignments on time could result in a failing grade in the course. if you miss more than two deadlines during the autumn quarter, please reach out to masters-admin@cs.uchicago.edu to discuss options for a leave of absence or withdrawal from the course.academic honestyhttps://studentmanual.uchicago.edu/academic-policies/academic-honesty-plagiarism/topicsthinkingapproaching a design problem. knowing where and how to start will set you in the right direction on design projects.design processcreative problem solvingobservingfinding the right problem to solve. understanding people and their experiences will give you insight into the prototypes you should create and test.need findinghuman-centered designresearch methodspersonasuser testinguser journeysmetricsresearch synthesismakingcreating useful prototypes. design principles will guide you through the creation of visual interface and user workflow decisions to address the needs of your users successfully.accessibilityprinciples, patterns, & techniquesuser goals & user flowsinformation architecturevisual design (layout, typography, icons)paper prototypeslow fidelity prototypeshigh fidelity prototypesiterative designdesign managementevaluatingcommunicating design decisions and providing feedback. design is often a team effort, so we will learn how to successfully work in a design environment with others.presentationscritiquestoolsnotebook: observations and low fidelity paper prototypes. not required for assignment deliverables but useful for exploring ideas.figma: medium & high fidelity prototypes.○ figma is an online user interface design tool that is free for educational use. we will create and share user interfaces with this tool.invision: interactive prototypes.○ invision is an online product design tool that is free for educational use. we will create interactive prototypes with this tool.readingsthis class has no textbook.readings may be assigned weekly and will either be available as links or pdfs on our class website. readings will support topics covered in class. | whether you’re ordering a burrito, boarding a plane, chatting with friends, booking your next workout, or reading this sentence—you’re likely using software with a user interface. | this course will teach you how to create useful and engaging user interfaces.","this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 2)ma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming completed.
https://mpcs-courses.cs.uchicago.edu/2025-26/autumn/courses/mpcs-52553-1,mpcs 52553 web development (autumn 2025),mpcs-52553-1,—,electivespecialization - application development (app-1),"course descriptionthis course is intended to prepare students with a general programming background to work on teams producing modern web applications. students will learn a strong foundation of core web technologies and protocols, an overview of the major design patterns in the history of web development, and a detailed introduction to the current industry standard. we will have an emphasis on learning from publicly-available documentation so that students are equipped to learn new techniques and frameworks in this rapidly-evolving field.specifically, the course will cover content layout and styling with html and css, dynamically generating page content on the webserver, interacting with databases, interacting with remote resources using http and rest, client-side interactivity with modern javascript, and the creation of single-page applications.this course uses agile software techniques to build real, working software each week. we will work as closely as possible on how software is developed in the industry, and all work is asynchronous, open-note, and open-internet, with collaboration, encouraged.course contentsfundamentals of html5, css3, and javascript/es6 for front-end programmingvisual design and responsive web designclient/server communicationbuilding web applicationssingle-page application developmentserver-side page renderingdatabase-driven application developmentcontent management systemsrest api developmentnetwork attacks & web app securitydebugging tools and techniquestentative weekly course scheduleweek 1 (exercise #1):web foundationshypertext markup language (html)week 2 (exercise #2):url and linkscascading style sheets (css)week 3 (exercise #3):javascript basicsjavascript programmingweek 4 (exercise #4):document object model (dom)dom - eventsasynchronous functions, promisesweek 5 (exercise #5):intro to front end programmingintroduction to reactjsintroduction to angularsingle page applicationsweek 6 (exercise #6):responsive web designbuilding web applicationsclient/server communicationweek 7 (exercise #7):web servers / intro to the lamp stacknode.js/expressjsapache/phpweek 8 (exercise #8):storage tiercookies and sessioninput and validationweek 9 (exercise #9):web servicesrest api developmentsoap apixmlweek 10:web app securitynetwork attackslarge scale applicationscloud hostingdata centersexercises:students will be expected to complete:7-9 programming exercises due the day before class1 final project due by the end of finals weekreferencesmdn web docs:https://developer.mozilla.org/en-us/php documentation:https://www.php.net/docs.phpsqlite documentation:https://www.sqlite.org/docs.htmlflask documentation:https://flask.palletsprojects.com/en/2.0.x/react documentation:https://reactjs.org/docs/getting-started.htmlangular documentationhttps://angular.io/startnodejs documentationhttps://nodejs.org/en/docs/guides/getting-started-guide/expressjs documentationhttps://expressjs.com/en/starter/installing.htmltypescript documentationhttps://www.typescriptlang.org/docs/mongodbhttps://docs.mongodb.com/w3schools documentationhttps://www.w3schools.com/ | course descriptionthis course is intended to prepare students with a general programming background to work on teams producing modern web applications. students will learn a strong foundation of core web technologies and protocols, an overview of the major design patterns in the history of web development, and a detailed introduction to the current industry standard. we will have an emphasis on learning from publicly-available documentation so that students are equipped to learn new techniques and frameworks in this rapidly-evolving field.specifically, the course will cover content layout and styling with html and css, dynamically generating page content on the webserver, interacting with databases, interacting with remote resources using http and rest, client-side interactivity with modern javascript, and the creation of single-page applications.this course uses agile software techniques to build real, working software each week. we will work as closely as possible on how software is developed in the industry, and all work is asynchronous, open-note, and open-internet, with collaboration, encouraged. | students must be fluent in at least one programming language, preferably an object-oriented language.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/","students must be fluent in at least one programming language, preferably an object-oriented language.this course requires competency in unix and linux. if you attended the mpcs unix bootcamp you covered the required material. if you did not, please review the uchicago cs student resource guide here: https://uchicago-cs.github.io/student-resource-guide/.course request information for non-mpcs students: https://masters.cs.uchicago.edu/student-resources/non-mpcs-student-course-requests/",this class is scheduled at a time that does not conflict with any other classes this quarter.,ms in computational analysis in public policy (year 1)ms in computational analysis in public policy (year 2)ms in molecular engineeringma in computational social science (year 2)bx/ms in computer science (option 2: professionally-oriented - cs majors)bx/ms in computer science (option 3: profesionally-oriented - non-cs majors)masters program in computer science,core programming
